<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jdk11缺失依赖报错</title>
      <link href="/2022/10/16/jdk11-que-shi-yi-lai-bao-cuo/"/>
      <url>/2022/10/16/jdk11-que-shi-yi-lai-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>当jdk8升级到jdk11,Java EE相关模块默认不在Java包里面了，相关的类需要增加额外依赖或者替换成其他的类,如果你直接运行,可能会出现这个问题: </p><p>error: package javax.xml.bind does not exist<br>import javax.xml.bind.JAXBException;  </p><p>Exception in thread “main” java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException<br>    at monitor.Main.main(Main.java:27)<br>Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBException<br>    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)<br>    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)<br>    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)<br>    … 1 more<br> 我的建议是直接加上缺失的依赖: </p><pre class=" language-xml"><code class="language-xml">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.10-b140310.1920<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--引⼊Jaxb，结束--></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ide </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> bug记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea启动报错</title>
      <link href="/2022/10/16/idea-qi-dong-bao-cuo/"/>
      <url>/2022/10/16/idea-qi-dong-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>今天启动idea突然报错:   </p><p>Internal error. Please refer to <a href="https://jb.gg/ide/critical-startup-errors">https://jb.gg/ide/critical-startup-errors</a> </p><p>java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind</p><p>….</p><p>虽然不知道什么原因,但是拿报错搜了一下,找到解决方法</p><p>win+x –&gt; 以管理员身份运行powershell –&gt; 执行命令net stop winnat和 net start winnat 就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ide </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> bug记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人spring踩坑合集</title>
      <link href="/2022/10/15/ge-ren-spring-cai-keng-he-ji/"/>
      <url>/2022/10/15/ge-ren-spring-cai-keng-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="注册的时候赋值了不存在的参数："><a href="#注册的时候赋值了不存在的参数：" class="headerlink" title="注册的时候赋值了不存在的参数："></a>注册的时候赋值了不存在的参数：</h1><p><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/img2.png" alt="img.png"></p><h1 id="内部bean设置错误报错"><a href="#内部bean设置错误报错" class="headerlink" title="内部bean设置错误报错"></a>内部bean设置错误报错</h1><p><img src="img_1.png" alt="img_1.png"><br><img src="img_2.png" alt="img_2.png"><br><img src="img_3.png" alt="img_3.png"><br><img src="img_4.png" alt="img_4.png"></p><h2 id="不能在内部类配置接口多态"><a href="#不能在内部类配置接口多态" class="headerlink" title="不能在内部类配置接口多态"></a>不能在内部类配置接口多态</h2><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p><img src="img_5.png" alt="img_5.png"></p><h3 id="首先传入name字符串（应该是通过配置文件或别的方式），然后把-换成-，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null"><a href="#首先传入name字符串（应该是通过配置文件或别的方式），然后把-换成-，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null" class="headerlink" title="首先传入name字符串（应该是通过配置文件或别的方式），然后把 . 换成 / ，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null"></a>首先传入name字符串（应该是通过配置文件或别的方式），然后把 . 换成 / ，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null</h3><h3 id="此时result为null，返回类未找到异常"><a href="#此时result为null，返回类未找到异常" class="headerlink" title="此时result为null，返回类未找到异常"></a>此时result为null，返回类未找到异常</h3><p><img src="img_6.png" alt="img_6.png"><br><img src="img_7.png" alt="img_7.png"><br><img src="img_8.png" alt="img_8.png"><br><img src="img_9.png" alt="img_9.png"><br><img src="img_10.png" alt="img_10.png"></p><h2 id="解决：修改配置文件"><a href="#解决：修改配置文件" class="headerlink" title="解决：修改配置文件"></a>解决：修改配置文件</h2><h3 id="内部声明对象不能用property直接创建"><a href="#内部声明对象不能用property直接创建" class="headerlink" title="内部声明对象不能用property直接创建"></a>内部声明对象不能用property直接创建</h3><p><img src="img_11.png" alt="img_11.png"></p><h1 id="内部类未添加set方法而报错"><a href="#内部类未添加set方法而报错" class="headerlink" title="内部类未添加set方法而报错"></a>内部类未添加set方法而报错</h1><p><img src="img_12.png" alt="img_12.png"><br><img src="img_13.png" alt="img_13.png"></p><h2 id="配置文件会调用set方法来赋值"><a href="#配置文件会调用set方法来赋值" class="headerlink" title="配置文件会调用set方法来赋值"></a>配置文件会调用set方法来赋值</h2><p><img src="img_14.png" alt="img_14.png"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="img_15.png" alt="img_15.png"><br><img src="img_16.png" alt="img_16.png"></p><h1 id="外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法"><a href="#外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法" class="headerlink" title="外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法"></a>外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法</h1><p><img src="img_17.png" alt="img_17.png"><br><img src="img_18.png" alt="img_18.png"></p><h2 id="在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来"><a href="#在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来" class="headerlink" title="在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来"></a>在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来</h2><h1 id="创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错"><a href="#创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错" class="headerlink" title="创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错"></a>创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错</h1><h2 id="这里面还有一个错误：调用内部类属性需要xxx-xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致"><a href="#这里面还有一个错误：调用内部类属性需要xxx-xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致" class="headerlink" title="这里面还有一个错误：调用内部类属性需要xxx.xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致"></a>这里面还有一个错误：调用内部类属性需要xxx.xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致</h2><p><img src="img_19.png" alt="img_19.png"></p><h2 id="改正："><a href="#改正：" class="headerlink" title="改正："></a>改正：</h2><p><img src="img_20.png" alt="img_20.png"><br><img src="img_21.png" alt="img_21.png"></p><h1 id="xml配置错误"><a href="#xml配置错误" class="headerlink" title="xml配置错误"></a>xml配置错误</h1><p><img src="img_22.png" alt="img_22.png"><br><img src="img_23.png" alt="img_23.png">   </p><h2 id="更正"><a href="#更正" class="headerlink" title="更正"></a>更正</h2><p><img src="img_24.png" alt="img_24.png"></p><h1 id="按照名称注入报错"><a href="#按照名称注入报错" class="headerlink" title="按照名称注入报错"></a>按照名称注入报错</h1><h2 id="解决，默认bean名是类名且首字母小写"><a href="#解决，默认bean名是类名且首字母小写" class="headerlink" title="解决，默认bean名是类名且首字母小写"></a>解决，默认bean名是类名且首字母小写</h2><p><img src="img_25.png" alt="img_25.png"></p><h1 id="过时的数据库api"><a href="#过时的数据库api" class="headerlink" title="过时的数据库api"></a>过时的数据库api</h1><p><img src="img_26.png" alt="img_26.png"></p><h2 id="把com-mysql-jdbc-Driver改为com-mysql-cj-jdbc-Driver"><a href="#把com-mysql-jdbc-Driver改为com-mysql-cj-jdbc-Driver" class="headerlink" title="把com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver"></a>把com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver</h2><h1 id="数据库参数不匹配"><a href="#数据库参数不匹配" class="headerlink" title="数据库参数不匹配"></a>数据库参数不匹配</h1><p><img src="img_27.png" alt="img_27.png"></p><h2 id="args参数要和数据库完全匹配，不能多也不能少"><a href="#args参数要和数据库完全匹配，不能多也不能少" class="headerlink" title="args参数要和数据库完全匹配，不能多也不能少"></a>args参数要和数据库完全匹配，不能多也不能少</h2><p><img src="img_28.png" alt="img_28.png"></p><h1 id="未指定映射类"><a href="#未指定映射类" class="headerlink" title="未指定映射类"></a>未指定映射类</h1><h2 id="使用BeanPropertyRowMapper时，构造器未传递参数"><a href="#使用BeanPropertyRowMapper时，构造器未传递参数" class="headerlink" title="使用BeanPropertyRowMapper时，构造器未传递参数"></a>使用BeanPropertyRowMapper时，构造器未传递参数</h2><h2 id="解决：在构造器里传递要映射的类Book-class"><a href="#解决：在构造器里传递要映射的类Book-class" class="headerlink" title="解决：在构造器里传递要映射的类Book.class"></a>解决：在构造器里传递要映射的类Book.class</h2><p><img src="img_29.png" alt="img_29.png"><br><img src="img_30.png" alt="img_30.png"></p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug记录 </tag>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式理论</title>
      <link href="/2022/10/13/fen-bu-shi-li-lun/"/>
      <url>/2022/10/13/fen-bu-shi-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="二-分布式理论"><a href="#二-分布式理论" class="headerlink" title="二,分布式理论"></a>二,分布式理论</h1><h2 id="2-1-数据一致性"><a href="#2-1-数据一致性" class="headerlink" title="2.1,数据一致性"></a>2.1,数据一致性</h2><h3 id="2-1-1-什么是数据一致性"><a href="#2-1-1-什么是数据一致性" class="headerlink" title="2.1.1,什么是数据一致性"></a>2.1.1,什么是数据一致性</h3><p>数据在多副本中保存,各副本数据都是一样的</p><h3 id="2-1-2-副本一致性"><a href="#2-1-2-副本一致性" class="headerlink" title="2.1.2,副本一致性"></a>2.1.2,副本一致性</h3><p>分布式系统中,数据往往有多个副本,则带来了<strong>数据同步</strong>的问题,因为延迟等因素,几乎无法保证同时更新所有副本数据,<br>在性能和一致性之间,需要权衡-&gt;分布式一致性协议</p><h3 id="2-1-3-一致性分类"><a href="#2-1-3-一致性分类" class="headerlink" title="2.1.3,一致性分类"></a>2.1.3,一致性分类</h3><p>强一致性-&gt;系统写什么,读出来就是什么,但是对系统性能影响大,也很难实现  </p><p>弱一致性-&gt;写入成功后,不一定立刻且不一定多久可以读到写入的值,但尽可能在某个时间级别后让数据达到一致性状态</p><p>最终一致性-&gt;<strong>也是弱一致性的一种</strong>,<strong>保证一段时间后,节点数据达到一致性状态</strong>,<br>在一致性状态前的时间片段称为[不一致窗口]</p><p>最终一致性又有多个变种-&gt;因果一致性||读己所写一致性||会话一致性||单调/写读一致性||</p><p><img src="img1.png" alt="一致性分类"></p><h2 id="2-2-CAP定理"><a href="#2-2-CAP定理" class="headerlink" title="2.2,CAP定理"></a>2.2,CAP定理</h2><h3 id="2-2-1-CAP定理介绍"><a href="#2-2-1-CAP定理介绍" class="headerlink" title="2.2.1,CAP定理介绍"></a>2.2.1,CAP定理介绍</h3><p>又称布鲁尔定理,它指出,对一个分布式系统,<strong>不可能同时满足以下三点</strong>:</p><p><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/img2.png" alt="CAP定理"></p><h4 id="1-一致性"><a href="#1-一致性" class="headerlink" title="1.一致性"></a>1.一致性</h4><p>指的是强一致性,一旦客户端写入数据,则其他节点访问的任何一台服务器节点得到的都是最新的数据</p><h4 id="2-可用性"><a href="#2-可用性" class="headerlink" title="2.可用性"></a>2.可用性</h4><p>系统中的非故障节点收到每个请求都有响应,不允许服务器忽略请求</p><h4 id="3-分区容错性"><a href="#3-分区容错性" class="headerlink" title="3.分区容错性"></a>3.分区容错性</h4><p>允许网络丢失任意节点间的消息丢失(不同步)</p><h3 id="2-2-2-CAP如何选择"><a href="#2-2-2-CAP如何选择" class="headerlink" title="2.2.2,CAP如何选择"></a>2.2.2,CAP如何选择</h3><p><img src="img03.png" alt="img.png"></p><ul><li>CA系统,关注一致性和可用性,不能容忍网络问题或节点错误,出现这种错误,就会拒绝写请求,变成只读</li><li>CP系统,关注一致性和分区容错性,保证大多数节点数据一致,少数节点会在没有同步的时候处于不可用状态</li><li>AP系统,关注可用性和分区容错性,系统不能达成一致,需要给出数据冲突,给出数据冲突就需要维护数据版本</li></ul><p>互联网电商更多是AP,而银行必须保证C</p><h2 id="2-3-BASE理论"><a href="#2-3-BASE理论" class="headerlink" title="2.3,BASE理论"></a>2.3,BASE理论</h2><p>BASE-&gt;基本可用+软状态+最终一致性;是一致性和可用性的权衡,基于CAP定理演化  </p><p>核心思想: 无法做到强一致性,则根据不同应用的特点采用合适的方式达到最终一致性  </p><h3 id="2-3-1-基本可用"><a href="#2-3-1-基本可用" class="headerlink" title="2.3.1,基本可用"></a>2.3.1,基本可用</h3><p>出现不可预知的故障,但还是能用,相比一般系统,可能出现:</p><ul><li>响应时间的损失: 正常系统在0.5内返回结果,基本可用则在1秒内返回</li><li>功能上的损失: 正常购物可以顺利交易,但是活动流量大的时候,为了保证稳定,部分消费者可能被引导到降级页面  </li></ul><h3 id="2-3-2-软状态"><a href="#2-3-2-软状态" class="headerlink" title="2.3.2,软状态"></a>2.3.2,软状态</h3><p>硬状态要求多个节点数据副本一致,软状态则允许系统中的数据存在中间状态,允许不同节点的副本数据存在数据延时</p><h3 id="2-3-3-最终一致性"><a href="#2-3-3-最终一致性" class="headerlink" title="2.3.3,最终一致性"></a>2.3.3,最终一致性</h3><p>软状态在一定时间内达到副本数据一致</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构与理论</title>
      <link href="/2022/10/13/fen-bu-shi-yi-zhi-xing-xie-yi/"/>
      <url>/2022/10/13/fen-bu-shi-yi-zhi-xing-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-二阶段提交协议-2PC"><a href="#3-1-二阶段提交协议-2PC" class="headerlink" title="3.1,二阶段提交协议(2PC)"></a>3.1,二阶段提交协议(2PC)</h1><h2 id="3-1-1-二阶段提交协议"><a href="#3-1-1-二阶段提交协议" class="headerlink" title="3.1.1,二阶段提交协议"></a>3.1.1,二阶段提交协议</h2><p>简称2PC,是比较常见的解决分布式事务问题的方式: 要么所有参与进程都提交事务,要么都取消事务,即实现ACID的A原子性</p><blockquote><p>分布式事务: 事务提供一种操作本地数据库的不可分割的一系列操作,”要么什么都不做,要么做全套(All or Nothing)”的机制,<br>而分布式事务就是为了操作不同数据库的不可分割的一系列操作的机制</p></blockquote><p><img src="img4.png" alt="img.png"> </p><h2 id="3-1-2-执行流程"><a href="#3-1-2-执行流程" class="headerlink" title="3.1.2,执行流程"></a>3.1.2,执行流程</h2><h3 id="1-成功执行的事务提交流程"><a href="#1-成功执行的事务提交流程" class="headerlink" title="1,成功执行的事务提交流程"></a>1,成功执行的事务提交流程</h3><p><img src="img.png" alt="img.png"><br>阶段一: </p><ul><li>事务询问</li><li>执行事务</li><li>各参与者向协调者反馈事务询问的响应 </li></ul><p>阶段二: </p><ul><li>发送提交请求</li><li>事务提交</li><li>反馈事务提交结果</li><li>完成事务</li></ul><h3 id="2-中断事务流程"><a href="#2-中断事务流程" class="headerlink" title="2,中断事务流程"></a>2,中断事务流程</h3><p>假如任何一个参与者挂了(超时等),协调者无法接收到反馈,会中断事务  </p><p>阶段一: </p><ul><li>事务询问</li><li>执行事务</li><li>各参与者向协调者反馈事务询问的响应 </li></ul><p>阶段二: </p><ul><li>发送回滚请求</li><li>事务回滚</li><li>反馈事务回滚结果 </li><li>中断事务</li></ul><h2 id="3-1-3-2PC的优缺点"><a href="#3-1-3-2PC的优缺点" class="headerlink" title="3.1.3 2PC的优缺点"></a>3.1.3 2PC的优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1,优点"></a>1,优点</h3><p>原理简单</p><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2,缺点"></a>2,缺点</h3><ul><li>同步阻塞<br>在二阶段提交的执行过程中,事务处于阻塞状态,如果参与者占用公共资源,则其他节点访问会被阻塞</li><li>单点问题<br>协调者出现问题,提交流程出现问题,所有参与者一直处于事务锁定状态</li><li>数据不一致<br>协调者发送commit请求,如果一部分参与者网络故障或宕机,则会出现无法接收commit请求来完成事务操作,出现数据不一致问题</li><li>没有完善的容错机制<br>任何一个节点的失败都会导致整个事务的失败</li></ul><h1 id="3-2-三阶段提交协议-3PC"><a href="#3-2-三阶段提交协议-3PC" class="headerlink" title="3.2,三阶段提交协议(3PC)"></a>3.2,三阶段提交协议(3PC)</h1><h1 id="3-3-NWR协议"><a href="#3-3-NWR协议" class="headerlink" title="3.3,NWR协议"></a>3.3,NWR协议</h1><h1 id="3-4-Gossip协议"><a href="#3-4-Gossip协议" class="headerlink" title="3.4,Gossip协议"></a>3.4,Gossip协议</h1><h1 id="3-5-Paxos协议"><a href="#3-5-Paxos协议" class="headerlink" title="3.5,Paxos协议"></a>3.5,Paxos协议</h1><h1 id="3-6-Raft协议"><a href="#3-6-Raft协议" class="headerlink" title="3.6,Raft协议"></a>3.6,Raft协议</h1><h1 id="3-7-Lease机制"><a href="#3-7-Lease机制" class="headerlink" title="3.7,Lease机制"></a>3.7,Lease机制</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构与理论</title>
      <link href="/2022/10/05/fen-bu-shi-jia-gou-she-ji/"/>
      <url>/2022/10/05/fen-bu-shi-jia-gou-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一-分布式架构与理论"><a href="#一-分布式架构与理论" class="headerlink" title="一,分布式架构与理论"></a>一,分布式架构与理论</h1><h2 id="一-分布式架构与理论-1"><a href="#一-分布式架构与理论-1" class="headerlink" title="一,分布式架构与理论"></a>一,分布式架构与理论</h2><h3 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1,什么是分布式系统"></a>1.1,什么是分布式系统</h3><p>分布式系统是硬软件分布在不同网络计算机上,彼此通过消息传递进行通信协调的系统  </p><p>把一个大的业务拆成多个可以独立部署和实现功能的子模块,分布在不同服务器节点,共同构成的系统  </p><p><img src="img0.png" alt="分布式系统">  </p><h3 id="1-2-分布式和集群的区别"><a href="#1-2-分布式和集群的区别" class="headerlink" title="1.2,分布式和集群的区别"></a>1.2,分布式和集群的区别</h3><p>集群-&gt;多个服务做同一件事  </p><p>分布式-&gt;多个服务做不同的事  </p><h3 id="1-3-分布式系统特性"><a href="#1-3-分布式系统特性" class="headerlink" title="1.3,分布式系统特性"></a>1.3,分布式系统特性</h3><p>分布性-&gt;可以分布在不同空间(物理)   </p><p>对等性-&gt;计算机服务节点没有主从之分  </p><p>并发性-&gt;分布式系统的多个节点,可能并发地操作资源(数据库等)  </p><p>缺乏全局时钟-&gt;由于处于不同机器,而且是远程通信,事件执行的先后顺序难以确认  </p><p>故障容易发生-&gt;机器越多,越有可能发生局部的故障  </p><p>单点故障-&gt;如果某个功能/角色只有一台计算机支撑,则它出现的故障就是单点故障</p><h3 id="1-4-分布式系统面临的问题"><a href="#1-4-分布式系统面临的问题" class="headerlink" title="1.4,分布式系统面临的问题"></a>1.4,分布式系统面临的问题</h3><h4 id="1-通信异常"><a href="#1-通信异常" class="headerlink" title="1,通信异常"></a>1,通信异常</h4><p>网络本身可能异常,则会出现<strong>分布式系统无法完成一次网络通信</strong>的情况,<br>而且,远程通信也有延迟,综上,分布式系统很容易出现<strong>消息丢失和延迟</strong></p><h4 id="2-网络分区"><a href="#2-网络分区" class="headerlink" title="2,网络分区"></a>2,网络分区</h4><p>部分网络不连通,但是子网络内部的网络通信正常,导致网络环境分成了不同的区域,出现<strong>局部小集群</strong>,<br>此时需要这些小集群完成服务,对分布式一致性提出巨大挑战</p><h4 id="3-节点故障"><a href="#3-节点故障" class="headerlink" title="3,节点故障"></a>3,节点故障</h4><p>组成微服务的服务器节点宕机或僵死</p><h4 id="4-三态-重发"><a href="#4-三态-重发" class="headerlink" title="4,三态,重发"></a>4,三态,重发</h4><p>三态-&gt;分布式系统每次请求响应都有<strong>成功/失败/超时</strong>三种状态  </p><p>重发-&gt;超时/失败的情况就需要重新发起调用</p><h4 id="5-幂等"><a href="#5-幂等" class="headerlink" title="5,幂等"></a>5,幂等</h4><p>多次请求某个资源,对资源本身都是产生和一次调用相同的结果 </p><h1 id="四-分布式系统设计策略"><a href="#四-分布式系统设计策略" class="headerlink" title="四,分布式系统设计策略"></a>四,分布式系统设计策略</h1><h1 id="五-分布式架构服务调用"><a href="#五-分布式架构服务调用" class="headerlink" title="五,分布式架构服务调用"></a>五,分布式架构服务调用</h1><h1 id="六-分布式服务治理"><a href="#六-分布式服务治理" class="headerlink" title="六,分布式服务治理"></a>六,分布式服务治理</h1><h1 id="七-架构设计基本原则"><a href="#七-架构设计基本原则" class="headerlink" title="七,架构设计基本原则"></a>七,架构设计基本原则</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一代微服务</title>
      <link href="/2022/10/05/di-yi-dai-wei-fu-wu/"/>
      <url>/2022/10/05/di-yi-dai-wei-fu-wu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/10/04/ce-shi-wen-zhang/"/>
      <url>/2022/10/04/ce-shi-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>测试文章</p><img src="/2022/10/04/ce-shi-wen-zhang/test.jpg" class="" title="图片引用方法一"><p><img src="test.jpg" alt="图片引用方法二"></p><p><img src="/images/test.jpg" alt="图片引用方法三"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

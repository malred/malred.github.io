<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手写vite</title>
      <link href="/2023/02/05/shou-xie-vite/shou-xie-vite/"/>
      <url>/2023/02/05/shou-xie-vite/shou-xie-vite/</url>
      
        <content type="html"><![CDATA[<p><img src="img.png" alt="img.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> vue </tag>
            
            <tag> js </tag>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> vite </tag>
            
            <tag> 脚手架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写vue2,vue-router,vuex</title>
      <link href="/2023/02/05/shou-xie-vue2-vuerouter-vuex/shou-xie-vue2-vuerouter-vuex/"/>
      <url>/2023/02/05/shou-xie-vue2-vuerouter-vuex/shou-xie-vue2-vuerouter-vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h1><h2 id="rollup开发环境搭建"><a href="#rollup开发环境搭建" class="headerlink" title="rollup开发环境搭建"></a>rollup开发环境搭建</h2><pre class=" language-shell"><code class="language-shell">npm init -y# 工具库一般用rollup打包,babel则是编译高级语法(->低级语法),来适配不同浏览器npm i rollup rollup-plugin-babel @babel/core @babel/preset-env --save-dev# 使用淘宝新镜像下载npm i rollup rollup-plugin-babel @babel/core @babel/preset-env --registry=https://registry.npmmirror.com</code></pre><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p><img src="img_5.png" alt="img_5.png"></p><h3 id="要打包的src-index-js"><a href="#要打包的src-index-js" class="headerlink" title="要打包的src/index.js"></a>要打包的src/index.js</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件 .babelrc"></a>配置文件 .babelrc</h3><pre class=" language-shell"><code class="language-shell">{    "presets": [        // preset是很多插件的集合        "@babel/preset-env"    ]}</code></pre><h3 id="配置文件-rollup-config-js"><a href="#配置文件-rollup-config-js" class="headerlink" title="配置文件 rollup.config.js"></a>配置文件 rollup.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// rollup默认可以导出一个对象,作为打包的配置文件</span><span class="token comment" spellcheck="true">// import babel from 'rollup-plugin-babel' // es6导入语法</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rollup-plugin-babel'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// export default {</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    input<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        file<span class="token punctuation">:</span> <span class="token string">'./dist/vue.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 出口</span>        name<span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后全局添加Vue对象 global Vue</span>        format<span class="token punctuation">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// esm es6模块 commonjs模块 iife自执行函数 umd通用模块规范(兼容AMD和commonjs,iife,不兼容es6)</span>        sourcemap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以调试源代码</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 可以使用的插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            exclude<span class="token punctuation">:</span> <span class="token string">'node_modules/**'</span> <span class="token comment" spellcheck="true">// 排除nodemodule下所有文件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="测试用html"><a href="#测试用html" class="headerlink" title="测试用html"></a>测试用html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_1.png" alt="img_1.png"><img src="img_2.png" alt="img_2.png"><img src="img_3.png" alt="img_3.png"><img src="img_4.png" alt="img_4.png"></p><h1 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h1><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initMixin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拓展了vue,添加init方法</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h2 id="init-js"><a href="#init-js" class="headerlink" title="init.js"></a>init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将用户传入的options挂载到vue对象上</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 原型中的this表示实例</span>        vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// $xxx 表示是vue的属性(在(vue里,如果data里的变量名是$开头,vue是拿不到的)</span>        <span class="token comment" spellcheck="true">// 初始化状态</span>        <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="state-js"><a href="#state-js" class="headerlink" title="state.js"></a>state.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对options内属性和方法进行操作 </span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data数据的初始化</span>        <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据初始化(转为响应式)</span><span class="token keyword">function</span> <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// 如果data是函数,就调用并获取其返回值</span>    data <span class="token operator">=</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data    <span class="token comment" spellcheck="true">// data挂载到vm上</span>    vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// 数据劫持 </span>    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听数据变化</span><span class="token punctuation">}</span></code></pre><h1 id="实现对象响应式"><a href="#实现对象响应式" class="headerlink" title="实现对象响应式"></a>实现对象响应式</h1><h2 id="src-observe-index-js"><a href="#src-observe-index-js" class="headerlink" title="src\observe\index.js"></a>src\observe\index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">debugger</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="第一步测试-能否拿到data数据"><a href="#第一步测试-能否拿到data数据" class="headerlink" title="第一步测试,能否拿到data数据"></a>第一步测试,能否拿到data数据</h3><p><img src="img_6.png" alt="img_6.png"></p><h3 id="继续开发"><a href="#继续开发" class="headerlink" title="继续开发"></a>继续开发</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环对象,对属性依次劫持</span>        <span class="token comment" spellcheck="true">// 重新定义属性(vue2的性能瓶颈所在),每个变量都添加get/set监听</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置值时,如果是对象,也需要转响应式! </span>            value <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token comment" spellcheck="true">// 如果data不是对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 只对对象进行劫持</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对data对象进行劫持</span>    <span class="token comment" spellcheck="true">// 判断是否被劫持 => 通过一个专门的实例来观测判断</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="修改init-js-代理取操作值-vm-data-xxx-gt-vm-xxx"><a href="#修改init-js-代理取操作值-vm-data-xxx-gt-vm-xxx" class="headerlink" title="修改init.js,代理取操作值 vm._data.xxx -> vm.xxx"></a>修改init.js,代理取操作值 vm._data.xxx -&gt; vm.xxx</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ......</span><span class="token comment" spellcheck="true">// 代理取值和设置值,通过响应式的方法来改变实际操作的值</span><span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回vm[_data][key] (vm._data.key)</span>            <span class="token keyword">return</span> vm<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> vm<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            vm<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据初始化(转为响应式)</span><span class="token keyword">function</span> <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// 如果data是函数,就调用并获取其返回值</span>    data <span class="token operator">=</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data    <span class="token comment" spellcheck="true">// data挂载到vm上</span>    vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// 数据劫持 </span>    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听数据变化</span>    <span class="token comment" spellcheck="true">// 将vm._data代理,则用户操作值只需要vm.xxx(而不是vm._data.xxx)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'_data'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data: {</span>        <span class="token comment" spellcheck="true">//     name: 'zs',</span>        <span class="token comment" spellcheck="true">//     age: 12</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// vue3里data只能是函数,vue2则可以是函数和对象</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    sex<span class="token punctuation">:</span> <span class="token string">'boy'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_7.png" alt="img_7.png"><img src="img_8.png" alt="img_8.png"></p><h3 id="问题-只对第一层data进行响应式处理-而data-obj内的属性则没有转为响应式"><a href="#问题-只对第一层data进行响应式处理-而data-obj内的属性则没有转为响应式" class="headerlink" title="问题: 只对第一层data进行响应式处理,而data.obj内的属性则没有转为响应式"></a>问题: 只对第一层data进行响应式处理,而data.obj内的属性则没有转为响应式</h3><h2 id="修改src-observe-index-js"><a href="#修改src-observe-index-js" class="headerlink" title="修改src\observe\index.js"></a>修改src\observe\index.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ..... </span><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    <span class="token comment" spellcheck="true">// value可能是一个对象,需要对其进行响应式处理</span>    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 递归了,性能也会降低 &lt;&lt;-</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            value <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// .....</span></code></pre><p><img src="img_9.png" alt="修改后,obj确实多了get和set方法"></p><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data: {</span>        <span class="token comment" spellcheck="true">//     name: 'zs',</span>        <span class="token comment" spellcheck="true">//     age: 12</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// vue3里data只能是函数,vue2则可以是函数和对象</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    sex<span class="token punctuation">:</span> <span class="token string">'boy'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>    <span class="token comment" spellcheck="true">// 新增值时不会转响应式</span>    vm<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>addr <span class="token operator">=</span> <span class="token punctuation">{</span>        code<span class="token punctuation">:</span> <span class="token number">201</span><span class="token punctuation">,</span>        desc<span class="token punctuation">:</span> <span class="token string">'华尔街'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 改变已有值时会转响应式</span>    vm<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token punctuation">{</span>        sex<span class="token punctuation">:</span> <span class="token string">'boy'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">112</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="实现数组的响应式"><a href="#实现数组的响应式" class="headerlink" title="实现数组的响应式"></a>实现数组的响应式</h1><blockquote><p>1,原本的方式可以让数组转响应式,但是需要遍历,如果数组很大,则非常耗时!<br>2,如果数组内部有对象,也需要响应式处理</p></blockquote><h2 id="修改-src-observe-index-js"><a href="#修改-src-observe-index-js" class="headerlink" title="修改 src/observe/index.js"></a>修改 src/observe/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>newArrayProto<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./array"</span><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果data是数组</span>            <span class="token comment" spellcheck="true">// 可以保留数组的特性,重写数组的部分方法 7个变异方法 可以修改数组本身</span>            <span class="token comment" spellcheck="true">// data.__proto__ = { // 这样重新指定原型链,会导致数组原有属性和方法的缺失</span>            <span class="token comment" spellcheck="true">//     push() {</span>            <span class="token comment" spellcheck="true">//         // 重写push</span>            <span class="token comment" spellcheck="true">//         console.log('push')</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            data<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> newArrayProto            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...... </span>    <span class="token comment" spellcheck="true">// 观测,对数组和数组里的对象进行响应式处理</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ......</span></code></pre><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 一般操作数组很少用下标,一般是用数组提供的方法</span>    vm<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'bear'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组里的对象也需要被劫持</span>    vm<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="问题-使用变异方法添加的数组元素没有转响应式"><a href="#问题-使用变异方法添加的数组元素没有转响应式" class="headerlink" title="问题: 使用变异方法添加的数组元素没有转响应式"></a>问题: 使用变异方法添加的数组元素没有转响应式</h3><p><img src="img_10.png" alt="使用变异方法添加的数组元素没有转响应式"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="src-observe-index-js-1"><a href="#src-observe-index-js-1" class="headerlink" title="src/observe/index.js"></a>src/observe/index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>newArrayProto<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./array"</span><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 如果data是对象,则加上__ob__后,会一直进行响应式处理walk(在构造函数调用了),然后栈溢出</span>            enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不可枚举,(循环时无法获取)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 把observer实例挂载到data,则array.js也可以使用observer的观测数组方法</span>        <span class="token comment" spellcheck="true">// 如果data上有一个__ob__属性,则说明被观测过</span>        <span class="token comment" spellcheck="true">// data.__ob__ = this</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果data是数组</span>            <span class="token comment" spellcheck="true">// 可以保留数组的特性,重写数组的部分方法 7个变异方法 可以修改数组本身</span>            <span class="token comment" spellcheck="true">// data.__proto__ = { // 这样重新指定原型链,会导致数组原有属性和方法的缺失</span>            <span class="token comment" spellcheck="true">//     push() {</span>            <span class="token comment" spellcheck="true">//         // 重写push</span>            <span class="token comment" spellcheck="true">//         console.log('push')</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            data<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> newArrayProto            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环对象,对属性依次劫持</span>        <span class="token comment" spellcheck="true">// 重新定义属性(vue2的性能瓶颈所在),每个变量都添加get/set监听</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 观测,对数组和数组里的对象进行响应式处理</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ......</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token comment" spellcheck="true">// 如果data不是对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 只对对象进行劫持</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 说明被代理过</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>__ob__    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对data对象进行劫持</span>    <span class="token comment" spellcheck="true">// 判断是否被劫持 => 通过一个专门的实例来观测判断</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="src-observe-array-js"><a href="#src-observe-array-js" class="headerlink" title="src/observe/array.js"></a>src/observe/array.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 重写数组部分方法</span><span class="token keyword">let</span> oldArrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// 获取数组的原型</span><span class="token comment" spellcheck="true">// newArrayProto = oldArrayProto 拿到了旧原型</span><span class="token keyword">export</span> <span class="token keyword">let</span> newArrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>oldArrayProto<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 重写</span><span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 找到所有的变异方法(可以修改数组的方法)</span>    <span class="token comment" spellcheck="true">// push 将新元素添加到数组的末尾，并返回新的长度</span>    <span class="token comment" spellcheck="true">// pop 删除数组的最后一个元素，并返回该元素 </span>    <span class="token comment" spellcheck="true">// shift 移除数组的第一项 </span>    <span class="token comment" spellcheck="true">// unshift 将新元素添加到数组的开头，并返回新的长度</span>    <span class="token comment" spellcheck="true">// reverse 反转数组中元素的顺序 </span>    <span class="token comment" spellcheck="true">// sort 排序</span>    <span class="token comment" spellcheck="true">// splice 从数组中添加/删除元素</span>    <span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span>    <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'unshift'</span><span class="token punctuation">,</span>    <span class="token string">'reverse'</span><span class="token punctuation">,</span>    <span class="token string">'sort'</span><span class="token punctuation">,</span>    <span class="token string">'splice'</span><span class="token punctuation">]</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// arr.push(1,2,3)</span>    <span class="token comment" spellcheck="true">// 重写方法</span>    newArrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用</span>        <span class="token comment" spellcheck="true">// 内部调用原方法,函数的劫持,切片编程</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> oldArrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保留旧方法的逻辑 </span>        <span class="token comment" spellcheck="true">// 对新增的数据再次进行劫持</span>        <span class="token keyword">let</span> inserted <span class="token comment" spellcheck="true">// 是一个数组</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>                inserted <span class="token operator">=</span> args                <span class="token keyword">break</span>            <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// splice(开始位置,结束位置,{新增数据},{新增数据})</span>                <span class="token comment" spellcheck="true">// 获取新增的数据</span>                inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 去掉前两个,拿到剩下的</span>                <span class="token keyword">break</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(inserted)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 数组转响应式</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p><img src="img_11.png" alt="img_11.png"></p><h1 id="解析模板参数"><a href="#解析模板参数" class="headerlink" title="解析模板参数 "></a>解析模板参数 </h1><blockquote><p>实现解析表达式的方案:</p></blockquote><ul><li>1,模板引擎 -&gt; 性能差,需要正则匹配替换 vue1.0 -&gt; 没有引入虚拟dom</li><li>2,采用<strong>虚拟dom</strong> -&gt; 数据变化后,比较虚拟dom的差异,最后更新需要更新的地方,核心就是将模板变成js语法,通过js语法生成虚拟dom</li></ul><blockquote><p>涉及语法转换,如 es6-&gt;es5 css压缩<br>需要先变成语法树再重新组装代码,将template语法转换成render函数</p></blockquote><h2 id="配置一下插件-优化import的编码体验"><a href="#配置一下插件-优化import的编码体验" class="headerlink" title="配置一下插件,优化import的编码体验"></a>配置一下插件,优化import的编码体验</h2><pre class=" language-shell"><code class="language-shell"># node插件,可以简化导入npm i @rollup/plugin-node-resolvenpm i @rollup/plugin-node-resolve --registry=https://registry.npmmirror.com</code></pre><h3 id="rollup-config-js"><a href="#rollup-config-js" class="headerlink" title="rollup.config.js"></a>rollup.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// rollup默认可以导出一个对象,作为打包的配置文件</span><span class="token comment" spellcheck="true">// import babel from 'rollup-plugin-babel' // es6导入语法</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rollup-plugin-babel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@rollup/plugin-node-resolve'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// export default {</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    input<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        file<span class="token punctuation">:</span> <span class="token string">'./dist/vue.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 出口</span>        name<span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后全局添加Vue对象 global Vue</span>        format<span class="token punctuation">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// esm es6模块 commonjs模块 iife自执行函数 umd通用模块规范(兼容AMD和commonjs,iife,不兼容es6)</span>        sourcemap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以调试源代码</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 可以使用的插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            exclude<span class="token punctuation">:</span> <span class="token string">'node_modules/**'</span> <span class="token comment" spellcheck="true">// 排除nodemodule下所有文件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// import xx from 'xxx/index' -> 'xxx'</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="init-js-1"><a href="#init-js-1" class="headerlink" title="init.js"></a>init.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>compileToFunction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ops<span class="token punctuation">.</span>render <span class="token comment" spellcheck="true">// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h3 id="compile-index-js"><a href="#compile-index-js" class="headerlink" title="compile/index.js"></a>compile/index.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对模板进行编译</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1,将template转化为ast语法树</span>    <span class="token comment" spellcheck="true">// 2,生成render方法,render方法执行返回的结果就是虚拟dom</span><span class="token punctuation">}</span></code></pre><h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> skyblue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> skyblue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{name}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// console.log(Vue);</span>    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// name: 'zs',</span>                <span class="token comment" spellcheck="true">// age: 12,</span>                <span class="token comment" spellcheck="true">// obj: {</span>                <span class="token comment" spellcheck="true">//     sex: 'boy'</span>                <span class="token comment" spellcheck="true">// },</span>                arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>hello&lt;/div>'</span>        <span class="token comment" spellcheck="true">// el: '#app', // 将数据解析到el上</span>        <span class="token comment" spellcheck="true">// render(){</span>        <span class="token comment" spellcheck="true">// return createElement('div',{})</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实现解析表达式的方案</span>    <span class="token comment" spellcheck="true">// 1,模板引擎 -> 性能差,需要正则匹配替换 vue1.0 -> 没有引入虚拟dom</span>    <span class="token comment" spellcheck="true">// 2,采用虚拟dom -> 数据变化后,比较虚拟dom的差异,最后更新需要更新的地方</span>    <span class="token comment" spellcheck="true">// 3,核心就是将模板变成js语法,通过js语法生成虚拟dom</span>    <span class="token comment" spellcheck="true">// 涉及语法转换,如 es6->es5 css压缩</span>    <span class="token comment" spellcheck="true">// 需要先变成语法树再重新组装代码,将template语法转换成render函数</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_12.png" alt="img_12.png"></p><h1 id="实现模板转化为ast语法树"><a href="#实现模板转化为ast语法树" class="headerlink" title="实现模板转化为ast语法树"></a>实现模板转化为ast语法树</h1><p><img src="img_13.png" alt="正则表达式可视化网站"></p><h2 id="init-js-2"><a href="#init-js-2" class="headerlink" title="init.js"></a>init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>compileToFunction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ops<span class="token punctuation">.</span>render <span class="token comment" spellcheck="true">// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="compile-index-js-1"><a href="#compile-index-js-1" class="headerlink" title="compile/index.js"></a>compile/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>parseHTML<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./parse"</span><span class="token comment" spellcheck="true">// 编译模板</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(template)</span>    <span class="token comment" spellcheck="true">// 1,将template转化为ast语法树</span>    <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2,生成render方法,render方法执行返回的结果就是虚拟dom </span><span class="token punctuation">}</span></code></pre><h2 id="compile-parse-js"><a href="#compile-parse-js" class="headerlink" title="compile/parse.js"></a>compile/parse.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 正则表达式</span><span class="token comment" spellcheck="true">// vue3采用的不是正则</span><span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token template-string"><span class="token string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span></span> <span class="token comment" spellcheck="true">// 标签名</span><span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token string">`((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span> <span class="token comment" spellcheck="true">// 解析 &lt;div:xxx> 形式(带命名空间)的标签</span><span class="token keyword">const</span> startTagOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`^&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 匹配到的分组是一个开始标签名</span><span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`^&lt;\\/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[^>]*>`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 匹配的是&lt;/xxx> 最终匹配到的分组是结束标签的名字</span><span class="token keyword">const</span> attribute <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span>\s<span class="token string">"'&lt;>\/=]+)(?:\s*(=)\s*(?:"</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token string">"]*)"</span><span class="token operator">+</span><span class="token operator">|</span><span class="token string">'([^'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'+|([^\s"'</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">></span>`<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">// 匹配属性</span><span class="token keyword">const</span> startTagClose <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">(</span>\<span class="token operator">/</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">/</span> <span class="token comment" spellcheck="true">// 匹配 &lt;br/> 这种单标签</span><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token operator">/</span>\<span class="token punctuation">{</span>\<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">|</span>\r<span class="token operator">?</span>\n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span>\<span class="token punctuation">}</span>\<span class="token punctuation">}</span><span class="token operator">/</span>g <span class="token comment" spellcheck="true">// 匹配 插值表达式 </span><span class="token comment" spellcheck="true">// htmlparser2库也可以解析html</span><span class="token comment" spellcheck="true">/*{    tag: 'div',    type: 1,    attrs: [{name,age,address}],    parent: null,    children:[        {                tag: 'span',                type: 1,                attrs: [{...}],                parent: div,                children:[]        }    ]}*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// html必定是&lt;开头(vue2的template不能是字符串,但是vue3可以)</span>    <span class="token comment" spellcheck="true">// 定义虚拟dom的节点类型</span>    <span class="token keyword">const</span> ELEMENT_TYPE <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">const</span> TEXT_TYPE <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 用于存放元素</span>    <span class="token keyword">let</span> currentParent <span class="token comment" spellcheck="true">// 指向栈中最后一个元素</span>    <span class="token keyword">let</span> root <span class="token comment" spellcheck="true">// 标记根节点</span>    <span class="token comment" spellcheck="true">// 创建虚拟dom的节点</span>    <span class="token keyword">function</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            tag<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> ELEMENT_TYPE<span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            attrs<span class="token punctuation">,</span>            parent<span class="token punctuation">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最终需要转化为一颗抽象语法树</span>    <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(tag, attrs, '开始');</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还没有根节点,则该元素就是根节点</span>            root <span class="token operator">=</span> node        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果有当前节点,则当前节点是新节点的parent</span>            node<span class="token punctuation">.</span>parent <span class="token operator">=</span> currentParent            <span class="token comment" spellcheck="true">// 子节点的parent要变为currentParent</span>            currentParent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 放入栈</span>        currentParent <span class="token operator">=</span> node <span class="token comment" spellcheck="true">// 指针指向栈中最后一个</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// vue2源码是保留最多两个空格</span>        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 去掉空格</span>        <span class="token comment" spellcheck="true">// console.log(text, '文本');</span>        <span class="token comment" spellcheck="true">// 文本直接放入当前指向的节点的children</span>        text <span class="token operator">&amp;&amp;</span> currentParent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> TEXT_TYPE<span class="token punctuation">,</span>            text<span class="token punctuation">,</span>            parent<span class="token punctuation">:</span> currentParent        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(tag, '结束');</span>        <span class="token comment" spellcheck="true">// 弹出时,其开始标签和文本内容都被加到根结点的children了</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 弹出最后一个 // 可以校验标签是否合法</span>        currentParent <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 截取html字符串</span>    <span class="token keyword">function</span> <span class="token function">advance</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(html)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 匹配是否是开始标签</span>    <span class="token keyword">function</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> start <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(start); // {0: '&lt;div', 1: 'div' ,...}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分组就是标签名</span>                tagName<span class="token punctuation">:</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// start[0].length是匹配到的字符串,('&lt;div')</span>            <span class="token function">advance</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从html删除匹配到的字符串</span>            <span class="token comment" spellcheck="true">// console.log(match) </span>            <span class="token comment" spellcheck="true">// 只要不是开始标签的结束,就一直循环匹配</span>            <span class="token keyword">let</span> attr<span class="token punctuation">,</span> end            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>end <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagClose<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 将匹配到的内容存入attr</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>attr <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 因为已经将匹配的内容存放,所以可以删除匹配的字符串</span>                <span class="token function">advance</span><span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// console.log(attr);</span>                match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> attr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 因为等号两边可能有空格,所以value可能是attr[3]或[4]或[5]</span>                    value<span class="token punctuation">:</span> attr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> attr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">||</span> attr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 如果是disable这种没有 = 的,则值是true</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果有 > 这种结束标签,也要删除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">advance</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(match);</span>            <span class="token keyword">return</span> match        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(html);</span>        <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不是开始标签</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 每解析一个,就把解析的内容从html字符串里删除,html删完就是解析完成</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token comment" spellcheck="true">// 开头是 &lt;的 而下一个开头则是&lt;/的&lt; 所以两个 &lt; 之间就是标签的内容</span>        <span class="token comment" spellcheck="true">// 如果indexof的索引是0,则说明是个开始或结束标签</span>        <span class="token comment" spellcheck="true">// 如果indexof的索引大于0,则说明是文本结束位置</span>        <span class="token keyword">let</span> textEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> startTagMatch <span class="token operator">=</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 解析到开始标签</span>                <span class="token comment" spellcheck="true">// console.log(html);</span>                <span class="token function">start</span><span class="token punctuation">(</span>startTagMatch<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> startTagMatch<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果有结束标签</span>            <span class="token keyword">let</span> endTagMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>endTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">end</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token function">advance</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 文本内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> text <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> textEnd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 文本内容</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 解析到文本 </span>                <span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>                <span class="token function">advance</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// console.log(html)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(root)</span>    <span class="token comment" spellcheck="true">// console.log(html)</span>    <span class="token keyword">return</span> root<span class="token punctuation">}</span>   </code></pre><h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><p><img src="img_14.png" alt="渲染出来的ast"></p><h1 id="代码生成实现原理"><a href="#代码生成实现原理" class="headerlink" title="代码生成实现原理"></a>代码生成实现原理</h1><h2 id="compile-index-js-2"><a href="#compile-index-js-2" class="headerlink" title="compile/index.js"></a>compile/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>parseHTML<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./parse"</span><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token operator">/</span>\<span class="token punctuation">{</span>\<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">|</span>\r<span class="token operator">?</span>\n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span>\<span class="token punctuation">}</span>\<span class="token punctuation">}</span><span class="token operator">/</span>g <span class="token comment" spellcheck="true">// 匹配 插值表达式</span><span class="token keyword">function</span> <span class="token function">gen</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 节点直接生成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">codegen</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 文本</span>        <span class="token keyword">let</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true">// 有可能是插值表达式或纯文本</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>defaultTagRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 纯文本</span>            <span class="token comment" spellcheck="true">// stringify是为了加上'',让传入的值变成字符串</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 带插值表达式</span>            <span class="token comment" spellcheck="true">// {{name}}hello => _v(_s(name)+'hello')</span>            <span class="token comment" spellcheck="true">// console.log(text)</span>            <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// 捕获文本</span>            <span class="token keyword">let</span> match            <span class="token comment" spellcheck="true">// 如果正则里有g,则再次exec会从上次匹配到的位置开始往后找</span>            <span class="token comment" spellcheck="true">// 重置正则匹配的起始位置</span>            defaultTagRE<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 记录上一次匹配的最后一位</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>match <span class="token operator">=</span> defaultTagRE<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// console.log(match)</span>                <span class="token keyword">let</span> index <span class="token operator">=</span> match<span class="token punctuation">.</span>index <span class="token comment" spellcheck="true">// 拿到匹配到字符({{)的开始索引</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// {{name}} hello {{age}} => hello</span>                    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`_s(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 插值表达式里的变量名</span>                <span class="token comment" spellcheck="true">// {{name}} xxx {{age}} -> 0 + name}}.length => 8</span>                <span class="token comment" spellcheck="true">// 下一次匹配到,就可以查看两次匹配中间有没有值 ({{name}} hello {{age}} => hello)</span>                lastIndex <span class="token operator">=</span> index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// {{name}} hello {{age}} world => world</span>                tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(tokens, `_v(${tokens.join("+")})`)</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tokens<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">gen</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成属性str的方法</span><span class="token keyword">function</span> <span class="token function">genProps</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// {name,value}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> attr <span class="token operator">=</span> attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// color:red => {color:'red'}</span>            <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// color: xxx;font-weight:xxx 多个用;分开</span>            attr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// color: xxx 单个用:分开</span>                <span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>                obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment" spellcheck="true">// 给obj赋值</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            attr<span class="token punctuation">.</span>value <span class="token operator">=</span> obj        <span class="token punctuation">}</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attr<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// slice(开始,结尾),如果是负数则从末尾开始</span>    <span class="token comment" spellcheck="true">// 这里从0取到-1的字符,去掉了最后一个 ,</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">codegen</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解析children</span>    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`_c('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">genProps</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'null'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ${ast.children.length ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : ''})`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(code)</span>    <span class="token keyword">return</span> code<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 编译模板</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(template)</span>    <span class="token comment" spellcheck="true">// 1,将template转化为ast语法树</span>    <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2,生成render方法,render方法执行返回的结果就是虚拟dom</span>    <span class="token comment" spellcheck="true">// render(){ 把树组装成这样</span>    <span class="token comment" spellcheck="true">//     return _c('div', { id: 'app' },_c('div', { color: 'blue' }, _v(_s(name) + 'hello')</span>    <span class="token comment" spellcheck="true">//         , _c('span', null, _v(_s(age) + 'hello'))))</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// console.log(ast)</span>    <span class="token comment" spellcheck="true">// 生成代码 (模板引擎的实现原理就是 with + new Function)</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">codegen</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(this)</span>    <span class="token comment" spellcheck="true">// with会从传进来的参数里取值,这里的this是调用者</span>    code <span class="token operator">=</span> <span class="token template-string"><span class="token string">`with(this){return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span>    <span class="token comment" spellcheck="true">// 根据代码自动生成函数</span>    <span class="token keyword">let</span> render <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(render.toString())</span>    <span class="token comment" spellcheck="true">// function render(</span>    <span class="token comment" spellcheck="true">// ) {</span>    <span class="token comment" spellcheck="true">//     // 关闭严格模式才能用with</span>    <span class="token comment" spellcheck="true">//     with (this) { return _c('div', { id: "app", style: { "color": "skyblue", "background": " yellow" }, show: true }, _c('div', null, _v(_s(age) + "hello" + _s(name) + "world")), _c('br', null, _v("world"), _c('br', null, _c('span', null, _v(_s(age)))))) }</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// console.log(render.call(vm))</span>    <span class="token keyword">return</span> render<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// with (vm) {</span><span class="token comment" spellcheck="true">// 传this,则vm的属性会给this</span><span class="token comment" spellcheck="true">// name => this.name => vm.name => vm.data.name</span><span class="token comment" spellcheck="true">//     // 此时,name就是vm.name</span><span class="token comment" spellcheck="true">// log name</span><span class="token comment" spellcheck="true">// }</span></code></pre><h2 id="init-js-3"><a href="#init-js-3" class="headerlink" title="init.js"></a>init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>compileToFunction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mountComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(ops.render)// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// 组件挂载</span>        <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="lifecycle-js"><a href="#lifecycle-js" class="headerlink" title="lifecycle.js"></a>lifecycle.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 虚拟dom转真实dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 渲染虚拟dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 组件挂载</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1,调用render方法产生虚拟节点,虚拟dom</span>    vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// vm.$options.render 返回虚拟节点</span>    <span class="token comment" spellcheck="true">// 2,根据虚拟dom生成真实dom</span>    <span class="token comment" spellcheck="true">// 3,插入el元素</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// vue核心流程: 1,创建响应式数据 2,模板转化为ast语法树</span><span class="token comment" spellcheck="true">// 3,将ast转换为render函数 4,后续每次更新可以只执行render函数(无需再次执行ast转换)</span><span class="token comment" spellcheck="true">// render函数会产生虚拟节点(使用响应式数据)</span><span class="token comment" spellcheck="true">// 根据生成的虚拟dom创造真实dom</span></code></pre><h2 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initMixin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>initLifeCycle<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拓展了vue,添加init方法</span><span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 组件渲染,生命周期</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h1 id="实现虚拟dom转真实dom"><a href="#实现虚拟dom转真实dom" class="headerlink" title="实现虚拟dom转真实dom"></a>实现虚拟dom转真实dom</h1><p><img src="img_15.png" alt="在线ast转换工具"></p><h2 id="vdom-index-js"><a href="#vdom-index-js" class="headerlink" title="vdom/index.js"></a>vdom/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 虚拟dom操作</span><span class="token comment" spellcheck="true">// _h() _c()</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElementVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> data<span class="token punctuation">.</span>key    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">delete</span> data<span class="token punctuation">.</span>key    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// _v()</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ast是语法转换,描述语法(html js css), &lt;div xxx> -> div,xxx=true</span><span class="token comment" spellcheck="true">// 虚拟dom是描述dom元素,可以增加自定义属性 div.xxx</span><span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">,</span>        tag<span class="token punctuation">,</span>        key<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        children<span class="token punctuation">,</span>        text        <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="lifecycle-js-1"><a href="#lifecycle-js-1" class="headerlink" title="lifecycle.js"></a>lifecycle.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createElementVnode<span class="token punctuation">,</span> createTextVnode<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./vdom"</span><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">}</span> <span class="token operator">=</span> vnode    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 标签</span>        <span class="token comment" spellcheck="true">// 创建真实节点</span>        <span class="token comment" spellcheck="true">// 将真实节点挂载到虚拟节点,后续修改就可以通过虚拟节点直接找到真实节点</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>        <span class="token function">patchProps</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新属性 xxx=xxx</span>        children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(vnode) 文本虚拟节点的tag是undefined</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是style样式属性</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> sytleName <span class="token keyword">in</span> props<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>sytleName<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>style<span class="token punctuation">[</span>sytleName<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化时是传一个真实dom,一个虚拟dom</span>    <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>nodeType    <span class="token comment" spellcheck="true">// 初次渲染</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> elm <span class="token operator">=</span> oldVNode <span class="token comment" spellcheck="true">// 拿到真实元素</span>        <span class="token keyword">const</span> parentElm <span class="token operator">=</span> elm<span class="token punctuation">.</span>parentNode <span class="token comment" spellcheck="true">// 拿到父元素</span>        <span class="token keyword">let</span> newElm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newElm<span class="token punctuation">)</span>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElm<span class="token punctuation">,</span> elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先插入到当前节点的后面(成为兄弟节点)</span>        parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除老节点 </span>        <span class="token keyword">return</span> newElm    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新时是传两个虚拟dom</span>        <span class="token comment" spellcheck="true">// diff算法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 虚拟dom转真实dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">const</span> el <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el        <span class="token comment" spellcheck="true">// console.log('update', vnode)</span>        <span class="token comment" spellcheck="true">// 既能初始化,又能更新</span>        vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// _c{'div',{},...children}</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this -> vm</span>        <span class="token keyword">return</span> <span class="token function">createElementVnode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// _v(text)</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_v <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(...arguments)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">createTextVnode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">createTextVnode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_s <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 插值表达式里的值(zs)如果不是对象,就直接返回 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value        <span class="token comment" spellcheck="true">// 如果是对象,就转字符串    </span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 渲染虚拟dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('render')</span>        <span class="token comment" spellcheck="true">// const vm = this </span>        <span class="token comment" spellcheck="true">// 让with里的this指向vm</span>        <span class="token comment" spellcheck="true">// 此时可以视图和属性进行绑定</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ast语法转义后生成的render</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 组件挂载</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把要被挂载的真实dom,放到vm实例上</span>    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el <span class="token comment" spellcheck="true">// 这个el是querySelector获取了的</span>    <span class="token comment" spellcheck="true">// 1,调用render方法产生虚拟节点,虚拟dom</span>    vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// vm.$options.render 返回虚拟节点</span>    <span class="token comment" spellcheck="true">// 2,根据虚拟dom生成真实dom</span>    <span class="token comment" spellcheck="true">// 3,插入el元素</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// vue核心流程: 1,创建响应式数据 2,模板转化为ast语法树</span><span class="token comment" spellcheck="true">// 3,将ast转换为render函数 4,后续每次更新可以只执行render函数(无需再次执行ast转换)</span><span class="token comment" spellcheck="true">// render函数会产生虚拟节点(使用响应式数据)</span><span class="token comment" spellcheck="true">// 根据生成的虚拟dom创造真实dom</span></code></pre><h2 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{age}} hello {{name}} world    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    world    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// template: '&lt;div>hello&lt;/div>'</span>        <span class="token comment" spellcheck="true">// el: '#app', // 将数据解析到el上</span>        <span class="token comment" spellcheck="true">// render(){</span>        <span class="token comment" spellcheck="true">// return createElement('div',{})</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>        vm<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>        <span class="token comment" spellcheck="true">// 手动重新渲染</span>        vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_17.png" alt="img_17.png"><br><img src="img_16.png" alt="1秒后"><br><img src="img_18.png" alt="小结"></p><h1 id="实现vue中的依赖收集-双向绑定中的数据变化影响视图"><a href="#实现vue中的依赖收集-双向绑定中的数据变化影响视图" class="headerlink" title="实现vue中的依赖收集(双向绑定中的数据变化影响视图)"></a>实现vue中的依赖收集(双向绑定中的数据变化影响视图)</h1><blockquote><p>双向绑定实现原理是观察者模式</p></blockquote><p><img src="img_19.png" alt="组件化的好处"></p><h2 id="修改lifecycle-js的mountComponent方法"><a href="#修改lifecycle-js的mountComponent方法" class="headerlink" title="修改lifecycle.js的mountComponent方法"></a>修改lifecycle.js的mountComponent方法</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件挂载</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把要被挂载的真实dom,放到vm实例上</span>    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el <span class="token comment" spellcheck="true">// 这个el是querySelector获取了的</span>    <span class="token comment" spellcheck="true">// 1,调用render方法产生虚拟节点,虚拟dom</span>    <span class="token comment" spellcheck="true">// 2,根据虚拟dom生成真实dom </span>    <span class="token comment" spellcheck="true">// 3,插入el元素</span>    <span class="token comment" spellcheck="true">// 创建watcher</span>    <span class="token keyword">const</span> updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true用于标识这是一个渲染watcher</span>    <span class="token comment" spellcheck="true">// 改为在Watcher创建时调用,进行初次渲染</span>    <span class="token comment" spellcheck="true">// vm._update(vm._render()) // vm.$options.render 返回虚拟节点</span><span class="token punctuation">}</span></code></pre><h2 id="修改observe-index-js的defineReactive方法"><a href="#修改observe-index-js的defineReactive方法" class="headerlink" title="修改observe/index.js的defineReactive方法"></a>修改observe/index.js的defineReactive方法</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    <span class="token comment" spellcheck="true">// value可能是一个对象,需要对其进行响应式处理</span>    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 递归了,性能也会降低</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时每个属性都有dep </span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在模板里取值时(mount)才会依赖收集(此时有watcher,watcher把dep.target赋值为自己)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每个属性的dep是不同的</span>                dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 属性的收集器记住当前watcher</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置值时,如果是对象,也需要转响应式!  </span>            value <span class="token operator">=</span> newValue            dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通知更新</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="observe-dep-js"><a href="#observe-dep-js" class="headerlink" title="observe/dep.js"></a>observe/dep.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 用于唯一标识dep </span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 存放当前属性对应的watcher有哪些</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不希望加重复的watcher</span>        <span class="token comment" spellcheck="true">// this.subs.push(Dep.target)</span>        <span class="token comment" spellcheck="true">// debugger</span>        Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让watcher记住dep</span>    <span class="token punctuation">}</span>    <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在watcher里有去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新方法!</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 让所有watcher更新数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>watcher <span class="token operator">=</span><span class="token operator">></span> watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">export</span> <span class="token keyword">default</span> Dep </code></pre><h2 id="observe-watcher-js"><a href="#observe-watcher-js" class="headerlink" title="observe/watcher.js"></a>observe/watcher.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 唯一标识watcher</span><span class="token comment" spellcheck="true">// 1,渲染watcher时,把当前渲染的watcher放到dep.target</span><span class="token comment" spellcheck="true">// 2,调用_render() 会取值,走到属性的get上</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不同组件有不同的watcher</span>    <span class="token comment" spellcheck="true">// 传入vm和更新方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderWatcher <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// 是一个渲染watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> fn <span class="token comment" spellcheck="true">// getter意味着调用这个函数可以发生取值操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 后续实现计算属性和清理工作用得到</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存dep的id(多个),set集合可以去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// init get</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个组件有多个属性,重复的不用记录</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watcher记录dep</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 此时让dep记录watcher</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 当前的watcher给dep</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会从vm上取值</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 渲染完清空</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 重新渲染</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要给每个属性添加一个dep,目的是收集watcher</span><span class="token comment" spellcheck="true">// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher</span><span class="token comment" spellcheck="true">// 一个属性,对应多个组件,一个dep对应多个watcher</span><span class="token comment" spellcheck="true">// 多对多</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h2 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{age}} hello {{name}} world {{name}} {{name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        world        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// console.log(Vue);</span>        <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// obj: {</span>                    <span class="token comment" spellcheck="true">//     sex: 'boy'</span>                    <span class="token comment" spellcheck="true">// },</span>                    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>         <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>            vm<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>            <span class="token comment" spellcheck="true">// 手动重新渲染</span>            <span class="token comment" spellcheck="true">// vm._update(vm._render())</span>            vm<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 页面没用到的更新了也不会触发观察者</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_20.png" alt="img_20.png"></p><h1 id="实现异步更新原理"><a href="#实现异步更新原理" class="headerlink" title="实现异步更新原理"></a>实现异步更新原理</h1><blockquote><p>多个更新任务放到一个队列</p></blockquote><h2 id="watcher-js"><a href="#watcher-js" class="headerlink" title="watcher.js"></a>watcher.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 唯一标识watcher</span><span class="token comment" spellcheck="true">// 1,渲染watcher时,把当前渲染的watcher放到dep.target</span><span class="token comment" spellcheck="true">// 2,调用_render() 会取值,走到属性的get上</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不同组件有不同的watcher</span>    <span class="token comment" spellcheck="true">// 传入vm和更新方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderWatcher <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// 是一个渲染watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> fn <span class="token comment" spellcheck="true">// getter意味着调用这个函数可以发生取值操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 后续实现计算属性和清理工作用得到</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存dep的id(多个),set集合可以去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// init get</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个组件有多个属性,重复的不用记录</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watcher记录dep</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 此时让dep记录watcher</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 当前的watcher给dep</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会从vm上取值</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 渲染完清空</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 多次更新同一个数据,则应该用队列记录,只更新最后一次</span>        <span class="token function">queryWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 暂存watcher</span>        <span class="token comment" spellcheck="true">// this.get() // 重新渲染</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此时最终的vm.name已经赋值完毕(ls5),更新时取值,就是最后的这个值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要给每个属性添加一个dep,目的是收集watcher</span><span class="token comment" spellcheck="true">// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher</span><span class="token comment" spellcheck="true">// 一个属性,对应多个组件,一个dep对应多个watcher</span><span class="token comment" spellcheck="true">// 多对多</span><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 源码是用set来去重</span><span class="token comment" spellcheck="true">// 这里使用对象来去重</span><span class="token keyword">let</span> has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 防抖</span><span class="token comment" spellcheck="true">// 等待一段时间后进入该方法,一次性更新</span><span class="token keyword">function</span> <span class="token function">flushSchedulerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flushQueue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 刷新过程中,可能也有新的watcher,可以重新放到queue</span>    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    pending <span class="token operator">=</span> <span class="token boolean">false</span>    flushQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>q <span class="token operator">=</span><span class="token operator">></span> q<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">queryWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有重复,直接放入队列</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>        has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">// console.log(queue)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不管update多少次,最终只执行一轮刷新操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushSchedulerQueue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用户更新队列</span><span class="token keyword">let</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 异步批处理</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    waiting <span class="token operator">=</span> <span class="token boolean">false</span>    callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> timerFunc<span class="token comment" spellcheck="true">// 有bug,promise拿到的还是老的</span><span class="token comment" spellcheck="true">// if (Promise) { // 判断有没有promise(可以转字符串看是不是原生promise)</span><span class="token comment" spellcheck="true">//     // console.log('Promise')</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         Promise.resolve().then(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else if (MutationObserver) {</span><span class="token comment" spellcheck="true">//     // 这里传入的回调是异步的</span><span class="token comment" spellcheck="true">//     let observe = new MutationObserver(flushCallbacks)</span><span class="token comment" spellcheck="true">//     // 监控文本变化</span><span class="token comment" spellcheck="true">//     let textNode = document.createTextNode(1)</span><span class="token comment" spellcheck="true">//     observe.observe(textNode, {</span><span class="token comment" spellcheck="true">//         characterData: true,</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         textNode.textContent = 2</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else if (setImmediate) {</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         setImmediate(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else {</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         setTimeout(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 暴露给外部的更新方法</span><span class="token comment" spellcheck="true">// vue里的nextTick不是用api(定时器...),而是采用优雅降级的方式</span><span class="token comment" spellcheck="true">// 降级: promise(ie不兼容) => MutationObserver(h5的api) => setImmediate(ie专用) => setTimeout</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先用户还是先内部更新 ? => 看用户更新方法在前,还是数据变化在前</span>    <span class="token comment" spellcheck="true">// 定时器耗性能,promise执行比定时器快</span>    callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// timerFunc(flushCallbacks) </span>        <span class="token comment" spellcheck="true">// timerFunc() // 执行的就是flushCallbacks</span>        waiting <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h2 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h2><p><img src="img_21.png" alt="img_21.png"></p><h2 id="测试-7"><a href="#测试-7" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{age}} hello {{name}} world {{name}} {{name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        world        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// console.log(Vue);</span>        <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// obj: {</span>                    <span class="token comment" spellcheck="true">//     sex: 'boy'</span>                    <span class="token comment" spellcheck="true">// },</span>                    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// template: '&lt;div>hello&lt;/div>'</span>            <span class="token comment" spellcheck="true">// el: '#app', // 将数据解析到el上</span>            <span class="token comment" spellcheck="true">// render(){</span>            <span class="token comment" spellcheck="true">// return createElement('div',{})</span>            <span class="token comment" spellcheck="true">// }</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 实现解析表达式的方案</span>        <span class="token comment" spellcheck="true">// 1,模板引擎 -> 性能差,需要正则匹配替换 vue1.0 -> 没有引入虚拟dom</span>        <span class="token comment" spellcheck="true">// 2,采用虚拟dom -> 数据变化后,比较虚拟dom的差异,最后更新需要更新的地方</span>        <span class="token comment" spellcheck="true">// 3,核心就是将模板变成js语法,通过js语法生成虚拟dom</span>        <span class="token comment" spellcheck="true">// 涉及语法转换,如 es6->es5 css压缩</span>        <span class="token comment" spellcheck="true">// 需要先变成语法树再重新组装代码,将template语法转换成render函数</span>        <span class="token comment" spellcheck="true">// setTimeout(() => {</span>        <span class="token comment" spellcheck="true">//     // 多次更新</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls1'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls2'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls3'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls4'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls5'</span>        <span class="token comment" spellcheck="true">//     // vm.age = 23</span>        <span class="token comment" spellcheck="true">//     // 手动重新渲染</span>        <span class="token comment" spellcheck="true">//     // vm._update(vm._render())</span>        <span class="token comment" spellcheck="true">//     // vm.arr[0] = 0 // 页面没用到的更新了也不会触发观察者</span>        <span class="token comment" spellcheck="true">// }, 1000);</span>        vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jw'</span> <span class="token comment" spellcheck="true">// 不会立即重新渲染页面</span>        <span class="token comment" spellcheck="true">// 同步获取,拿不到最新的</span>        <span class="token comment" spellcheck="true">// console.log(app.innerHTML);</span>        <span class="token comment" spellcheck="true">// setTimeout(() => {</span>        <span class="token comment" spellcheck="true">//     // 可以拿到最新的</span>        <span class="token comment" spellcheck="true">//     console.log(app.innerHTML);</span>        <span class="token comment" spellcheck="true">// }, 1000);</span>        <span class="token comment" spellcheck="true">// // promise优先级大于定时器,拿到的还是老的</span>        <span class="token comment" spellcheck="true">// Promise.resolve().then(() => {</span>        <span class="token comment" spellcheck="true">//     console.log(app.innerHTML);</span>        <span class="token comment" spellcheck="true">// })</span>        <span class="token comment" spellcheck="true">// 解决方案: 使用统一暴露给外部的更新方法</span>        <span class="token comment" spellcheck="true">// nextTick不是创建异步任务,而是将任务维护到队列</span>        vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// vm.name = 'jw2' // 放在后面更新,前面拿到的应该还是老数据</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_22.png" alt="img_22.png"></p><h1 id="实现数组的更新"><a href="#实现数组的更新" class="headerlink" title="实现数组的更新"></a>实现数组的更新</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> vue </tag>
            
            <tag> js </tag>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于java反射手写iset注解,实现自动new</title>
      <link href="/2023/01/30/ji-yu-java-fan-she-shou-xie-iset-zhu-jie-shi-xian-zi-dong-new/"/>
      <url>/2023/01/30/ji-yu-java-fan-she-shou-xie-iset-zhu-jie-shi-xian-zi-dong-new/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>这个注解是我之前学反射时写的,代码规范不是很好,有很多需要改进的地方,不过作为学习已经是够用了,也可以用来理解spring的依赖注入</p></blockquote><h1 id="1-新建maven工程"><a href="#1-新建maven工程" class="headerlink" title="1,新建maven工程"></a>1,新建maven工程</h1><h2 id="1-1-添加lombok依赖-简化开发"><a href="#1-1-添加lombok依赖-简化开发" class="headerlink" title="1.1,添加lombok依赖,简化开发"></a>1.1,添加lombok依赖,简化开发</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="2-注解"><a href="#2-注解" class="headerlink" title="2,注解"></a>2,注解</h1><p>写一个注解类,代码如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 作用在字段上</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 运行时使用</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">iset</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注入单个属性</span>    String <span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要设置的属性名</span>    String <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要设置的属性值</span>    <span class="token comment" spellcheck="true">// 注入多个属性</span>    <span class="token comment" spellcheck="true">// 两个数组一一对应,到时候逐个赋值</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>说明一下:  </p><blockquote><p>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。<br>@Target - 标记使用这个注解的应该是哪种 Java 成员。</p></blockquote><p>而我们的目标是声明字段(一个类的实例),然后通过iset来为这个字段创建实例和注入属性</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注入单个字段 </span><span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setName <span class="token operator">=</span> <span class="token string">"age"</span> <span class="token punctuation">,</span> setData <span class="token operator">=</span> <span class="token string">"8"</span> <span class="token punctuation">)</span>tStu stu2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注入多个字段</span><span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">,</span><span class="token string">"lisi@qq.com"</span><span class="token punctuation">,</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>User user<span class="token punctuation">;</span></code></pre><h1 id="3-核心代码逻辑"><a href="#3-核心代码逻辑" class="headerlink" title="3,核心代码逻辑"></a>3,核心代码逻辑</h1><p>我们这里希望怎么做呢, 就是定义一个类,提供方法,将当前所有标记了@iset注解的字段创建, 并将其属性赋值, 然后放入一个公共map&lt;类实例字段的字段名,类实例&gt;, 想要类实例只需要从公共map里取就行了</p><h2 id="3-1-iConstruct"><a href="#3-1-iConstruct" class="headerlink" title="3.1,iConstruct"></a>3.1,iConstruct</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author malguy-wang sir * @create --- */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">iConstruct</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>iConstruct<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * a map to save all class (保存所有创建的类)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> dogs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取所有创建好的类     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dogs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 传入当前类的路径,创建新的实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">generateDogs</span><span class="token punctuation">(</span>String targetClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"\t\t==========>>> iset运行开始 &lt;&lt;&lt;=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//路径改为全类名</span>        targetClass <span class="token operator">=</span> iUtils<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//寻找并加载要创建的类</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//准备返回的类</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前类所有的全类名</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 会带有当前类和全类名+空格+作为属性的类的全类名</span>            <span class="token comment" spellcheck="true">// private org.malred.iset.entitys.User org.malred.iset.itest.t.user</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"获取当前类所有的全类名 => "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取类实例的字段名称 ( org.malred.iset.itest.t.user => user )</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"解析类实例字段名 => "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>                    classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>                    classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"解析结果 => "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据解析完成的类实例字段名,获取类实例需要的字段,然后赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"为 => { "</span><span class="token operator">+</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" } 类实例字段,注入属性值开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取所有字段</span>            <span class="token comment" spellcheck="true">// isAnnotationPresent(iset.class));//判断有没有加注解</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>iset<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                iset is <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>iset<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取注解</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取类</span>                Object iu <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建实例</span>                Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> iu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取属性名</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> iargs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属性名数组</span>                <span class="token comment" spellcheck="true">// 解析属性名(全类名 -> 字段名)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    iargs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">// 属性会带全类名,比如org.malred.iset.itest.t.user</span>                            fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                            fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"获取类属性名称 => "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 注入单个属性时</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 { "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" } 为 { "</span> <span class="token operator">+</span> is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" } 中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Field declaredField <span class="token operator">=</span> iu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置可访问(私有字段也能被访问)</span>                        declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 传入字段和属性,赋值</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>iUtils<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 如果是数值类型需要转int</span>                            declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 => "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 注入属性</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> is<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 { "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" } 为 { "</span>                                    <span class="token operator">+</span> is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" } 中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// iu是创建了的实例</span>                            Field declaredField <span class="token operator">=</span> iu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 如果是数值类型需要转int</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>iUtils<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 => "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"为 => { "</span><span class="token operator">+</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" } 类实例字段,注入属性值完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"将 { "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" } 放入map中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 放入dogs集合</span>                u<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> iu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"\t\t==========>>> iset运行结束 &lt;&lt;&lt;=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> u<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成类,并获取所有创建好的类(map)     *     * @param nowClass 当前类的路径或全类名     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getDogs</span><span class="token punctuation">(</span>String nowClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        dogs <span class="token operator">=</span> <span class="token function">generateDogs</span><span class="token punctuation">(</span>nowClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dogs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过id(字段名)获取类实例     *     * @param className     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getDogByName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> dogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//just new class , than U can get a map named dogs which have all class you need</span>    <span class="token keyword">public</span> <span class="token function">iConstruct</span><span class="token punctuation">(</span>String nowClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">getDogs</span><span class="token punctuation">(</span>nowClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h2 id="3-2-iUtils-工具类"><a href="#3-2-iUtils-工具类" class="headerlink" title="3.2,iUtils 工具类"></a>3.2,iUtils 工具类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>utils<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * 工具类 * * @author malguy-wang sir * @create --- */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">iUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断字符串是不是数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//传入来自源根的路径,返回全类名</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getClassName</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4,测试"></a>4,测试</h1><h2 id="4-1-实体类"><a href="#4-1-实体类" class="headerlink" title="4.1,实体类"></a>4.1,实体类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span> <span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> age<span class="token punctuation">;</span>  <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span> <span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">tStu</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2,测试"></a>4.2,测试</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">t</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">,</span> <span class="token string">"lisi@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"56"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    tStu stu<span class="token punctuation">;</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    tStu stu1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setName <span class="token operator">=</span> <span class="token string">"age"</span> <span class="token punctuation">,</span> setData <span class="token operator">=</span> <span class="token string">"8"</span> <span class="token punctuation">)</span>    tStu stu2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Map iuser <span class="token operator">=</span> iConstruct<span class="token punctuation">.</span>                <span class="token function">generateDogs</span><span class="token punctuation">(</span><span class="token string">"org/malred/iset/itest/t.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iuser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">iConstruct</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> iConstruct<span class="token punctuation">.</span><span class="token function">getDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stu1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-3-结果"><a href="#4-3-结果" class="headerlink" title="4.3,结果"></a>4.3,结果</h2><pre class=" language-java"><code class="language-java"><span class="token string">"C:\Program Files\Java\jdk1.8.0_241\bin\java.exe"</span> <span class="token operator">-</span>Dvisualvm<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">218153308319900</span> <span class="token string">"-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.1\lib\idea_rt.jar=50078:C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.1\bin"</span> <span class="token operator">-</span>Dfile<span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>classpath <span class="token string">"C:\Program Files\Java\jdk1.8.0_241\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\rt.jar;C:\Users\13695\Desktop\造轮子\代码\手写造轮子\iset(反射小练习)\myConstruct\target\classes;D:\java_maven\maven_repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar"</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span>         <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">>>></span> iset运行开始 <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">private</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>User org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>user一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu1一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu2一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">private</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>User org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>user一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> user一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> stu一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu1一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> stu1一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu2一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> stu2一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> id一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> email一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> id <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">200</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> id 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> name <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> 李四 <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> name 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">18</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> email <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> lisi<span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> email 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> user <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> name <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> 张三 <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> name 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">56</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> stu <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu1 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> name <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> 王五 <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> name 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">8</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu1 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> stu1 <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu2 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">8</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu2 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> stu2 <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span>         <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">>>></span> iset运行结束 <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> name<span class="token operator">=</span>李四<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> email<span class="token operator">=</span>lisi<span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token function">tStu</span><span class="token punctuation">(</span>name<span class="token operator">=</span>张三<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token function">tStu</span><span class="token punctuation">(</span>name<span class="token operator">=</span>王五<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token function">tStu</span><span class="token punctuation">(</span>name<span class="token operator">=</span>null<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>进程已结束，退出代码为 <span class="token number">0</span> </code></pre><h1 id="问题和拓展"><a href="#问题和拓展" class="headerlink" title="*.问题和拓展"></a>*.问题和拓展</h1><p>git仓库</p><blockquote><p><a href="https://github.com/malred/myConstruct.git">https://github.com/malred/myConstruct.git</a><br><a href="https://gitee.com/malguy/myConstruct.git">https://gitee.com/malguy/myConstruct.git</a></p></blockquote><h2 id="1-对象"><a href="#1-对象" class="headerlink" title="*.1,对象"></a>*.1,对象</h2><p>我这里没有考虑类里面有对象类型的属性的情况,如果要创建的类需要一个对象属性,如何实现?</p><h2 id="2-循环依赖"><a href="#2-循环依赖" class="headerlink" title="*.2,循环依赖"></a>*.2,循环依赖</h2><p>如果有user和stu类,user类有一个属性是stu类,而stu类也有一个user属性,那么,就会互相依赖,无法创建,如何解决?</p><h2 id="3-扫描"><a href="#3-扫描" class="headerlink" title="*.3,扫描"></a>*.3,扫描</h2><p>当前需要手动传入当前类路径,能不能实现像spring的scan一样的扫描,将某个实现@Scan注解的类的子目录全部扫描,并根据有无@compnent+@iset注解来注入呢</p>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> java </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> 反射 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk11缺失依赖报错</title>
      <link href="/2022/10/16/jdk11-que-shi-yi-lai-bao-cuo/jdk11-que-shi-yi-lai-bao-cuo/"/>
      <url>/2022/10/16/jdk11-que-shi-yi-lai-bao-cuo/jdk11-que-shi-yi-lai-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>当jdk8升级到jdk11,Java EE相关模块默认不在Java包里面了，相关的类需要增加额外依赖或者替换成其他的类,如果你直接运行,可能会出现这个问题: </p><p>error: package javax.xml.bind does not exist<br>import javax.xml.bind.JAXBException;  </p><p>Exception in thread “main” java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException<br>    at monitor.Main.main(Main.java:27)<br>Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBException<br>    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)<br>    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)<br>    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)<br>    … 1 more<br> 我的建议是直接加上缺失的依赖: </p><pre class=" language-xml"><code class="language-xml">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.10-b140310.1920<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--引⼊Jaxb，结束--></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> bug记录 </tag>
            
            <tag> java </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea启动报错</title>
      <link href="/2022/10/16/idea-qi-dong-bao-cuo/idea-qi-dong-bao-cuo/"/>
      <url>/2022/10/16/idea-qi-dong-bao-cuo/idea-qi-dong-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>今天启动idea突然报错:   </p><p>Internal error. Please refer to <a href="https://jb.gg/ide/critical-startup-errors">https://jb.gg/ide/critical-startup-errors</a> </p><p>java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind</p><p>….</p><p>虽然不知道什么原因,但是拿报错搜了一下,找到解决方法</p><p>win+x –&gt; 以管理员身份运行powershell –&gt; 执行命令net stop winnat和 net start winnat 就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> bug记录 </tag>
            
            <tag> java </tag>
            
            <tag> ide </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人spring踩坑合集</title>
      <link href="/2022/10/15/ge-ren-spring-cai-keng-he-ji/"/>
      <url>/2022/10/15/ge-ren-spring-cai-keng-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="注册的时候赋值了不存在的参数："><a href="#注册的时候赋值了不存在的参数：" class="headerlink" title="注册的时候赋值了不存在的参数："></a>注册的时候赋值了不存在的参数：</h1><p><img src="img.png" alt="img.png"></p><h1 id="内部bean设置错误报错"><a href="#内部bean设置错误报错" class="headerlink" title="内部bean设置错误报错"></a>内部bean设置错误报错</h1><p><img src="img_1.png" alt="img_1.png"><br><img src="img_2.png" alt="img_2.png"><br><img src="img_3.png" alt="img_3.png"><br><img src="img_4.png" alt="img_4.png"></p><h2 id="不能在内部类配置接口多态"><a href="#不能在内部类配置接口多态" class="headerlink" title="不能在内部类配置接口多态"></a>不能在内部类配置接口多态</h2><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p><img src="img_5.png" alt="img_5.png"></p><h3 id="首先传入name字符串（应该是通过配置文件或别的方式），然后把-换成-，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null"><a href="#首先传入name字符串（应该是通过配置文件或别的方式），然后把-换成-，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null" class="headerlink" title="首先传入name字符串（应该是通过配置文件或别的方式），然后把 . 换成 / ，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null"></a>首先传入name字符串（应该是通过配置文件或别的方式），然后把 . 换成 / ，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null</h3><h3 id="此时result为null，返回类未找到异常"><a href="#此时result为null，返回类未找到异常" class="headerlink" title="此时result为null，返回类未找到异常"></a>此时result为null，返回类未找到异常</h3><p><img src="img_6.png" alt="img_6.png"><br><img src="img_7.png" alt="img_7.png"><br><img src="img_8.png" alt="img_8.png"><br><img src="img_9.png" alt="img_9.png"><br><img src="img_10.png" alt="img_10.png"></p><h2 id="解决：修改配置文件"><a href="#解决：修改配置文件" class="headerlink" title="解决：修改配置文件"></a>解决：修改配置文件</h2><h3 id="内部声明对象不能用property直接创建"><a href="#内部声明对象不能用property直接创建" class="headerlink" title="内部声明对象不能用property直接创建"></a>内部声明对象不能用property直接创建</h3><p><img src="img_11.png" alt="img_11.png"></p><h1 id="内部类未添加set方法而报错"><a href="#内部类未添加set方法而报错" class="headerlink" title="内部类未添加set方法而报错"></a>内部类未添加set方法而报错</h1><p><img src="img_12.png" alt="img_12.png"><br><img src="img_13.png" alt="img_13.png"></p><h2 id="配置文件会调用set方法来赋值"><a href="#配置文件会调用set方法来赋值" class="headerlink" title="配置文件会调用set方法来赋值"></a>配置文件会调用set方法来赋值</h2><p><img src="img_14.png" alt="img_14.png"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="img_15.png" alt="img_15.png"><br><img src="img_16.png" alt="img_16.png"></p><h1 id="外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法"><a href="#外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法" class="headerlink" title="外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法"></a>外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法</h1><p><img src="img_17.png" alt="img_17.png"><br><img src="img_18.png" alt="img_18.png"></p><h2 id="在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来"><a href="#在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来" class="headerlink" title="在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来"></a>在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来</h2><h1 id="创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错"><a href="#创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错" class="headerlink" title="创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错"></a>创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错</h1><h2 id="这里面还有一个错误：调用内部类属性需要xxx-xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致"><a href="#这里面还有一个错误：调用内部类属性需要xxx-xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致" class="headerlink" title="这里面还有一个错误：调用内部类属性需要xxx.xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致"></a>这里面还有一个错误：调用内部类属性需要xxx.xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致</h2><p><img src="img_19.png" alt="img_19.png"></p><h2 id="改正："><a href="#改正：" class="headerlink" title="改正："></a>改正：</h2><p><img src="img_20.png" alt="img_20.png"><br><img src="img_21.png" alt="img_21.png"></p><h1 id="xml配置错误"><a href="#xml配置错误" class="headerlink" title="xml配置错误"></a>xml配置错误</h1><p><img src="img_22.png" alt="img_22.png"><br><img src="img_23.png" alt="img_23.png">   </p><h2 id="更正"><a href="#更正" class="headerlink" title="更正"></a>更正</h2><p><img src="img_24.png" alt="img_24.png"></p><h1 id="按照名称注入报错"><a href="#按照名称注入报错" class="headerlink" title="按照名称注入报错"></a>按照名称注入报错</h1><h2 id="解决，默认bean名是类名且首字母小写"><a href="#解决，默认bean名是类名且首字母小写" class="headerlink" title="解决，默认bean名是类名且首字母小写"></a>解决，默认bean名是类名且首字母小写</h2><p><img src="img_25.png" alt="img_25.png"></p><h1 id="过时的数据库api"><a href="#过时的数据库api" class="headerlink" title="过时的数据库api"></a>过时的数据库api</h1><p><img src="img_26.png" alt="img_26.png"></p><h2 id="把com-mysql-jdbc-Driver改为com-mysql-cj-jdbc-Driver"><a href="#把com-mysql-jdbc-Driver改为com-mysql-cj-jdbc-Driver" class="headerlink" title="把com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver"></a>把com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver</h2><h1 id="数据库参数不匹配"><a href="#数据库参数不匹配" class="headerlink" title="数据库参数不匹配"></a>数据库参数不匹配</h1><p><img src="img_27.png" alt="img_27.png"></p><h2 id="args参数要和数据库完全匹配，不能多也不能少"><a href="#args参数要和数据库完全匹配，不能多也不能少" class="headerlink" title="args参数要和数据库完全匹配，不能多也不能少"></a>args参数要和数据库完全匹配，不能多也不能少</h2><p><img src="img_28.png" alt="img_28.png"></p><h1 id="未指定映射类"><a href="#未指定映射类" class="headerlink" title="未指定映射类"></a>未指定映射类</h1><h2 id="使用BeanPropertyRowMapper时，构造器未传递参数"><a href="#使用BeanPropertyRowMapper时，构造器未传递参数" class="headerlink" title="使用BeanPropertyRowMapper时，构造器未传递参数"></a>使用BeanPropertyRowMapper时，构造器未传递参数</h2><h2 id="解决：在构造器里传递要映射的类Book-class"><a href="#解决：在构造器里传递要映射的类Book-class" class="headerlink" title="解决：在构造器里传递要映射的类Book.class"></a>解决：在构造器里传递要映射的类Book.class</h2><p><img src="img_29.png" alt="img_29.png"><br><img src="img_30.png" alt="img_30.png"></p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> ssm </tag>
            
            <tag> bug记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷spring security笔记一</title>
      <link href="/2022/10/15/spring-security-bi-ji-yi/"/>
      <url>/2022/10/15/spring-security-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p><img src="img.png" alt="img.png"><img src="img_1.png" alt="img_1.png"><img src="img_2.png" alt="img_2.png"><img src="img_3.png" alt="img_3.png"><img src="img_4.png" alt="img_4.png"><br><img src="img_5.png" alt="img_5.png"><img src="img_6.png" alt="img_6.png"><img src="img_7.png" alt="img_7.png"><br><img src="img_8.png" alt="img_8.png"><img src="img_9.png" alt="img_9.png"><br><img src="img_10.png" alt="img_10.png"><br><img src="img_11.png" alt="img_11.png"><br><img src="img_12.png" alt="img_12.png"><br><img src="img_13.png" alt="img_13.png"><br><img src="img_14.png" alt="img_14.png"><br><img src="img_15.png" alt="img_15.png"><img src="img_16.png" alt="img_16.png"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="ig_1.png" alt="ig.png"><img src="ig_2.png" alt="ig_1.png"><img src="ig_3.png" alt="ig_2.png"><img src="ig_4.png" alt="ig_3.png"><img src="ig_5.png" alt="ig_4.png"><br><img src="ig_6.png" alt="ig_5.png"><img src="ig_7.png" alt="ig_6.png"></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
          <category> 权限 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> bug记录 </tag>
            
            <tag> security </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式理论</title>
      <link href="/2022/10/13/fen-bu-shi-li-lun/"/>
      <url>/2022/10/13/fen-bu-shi-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="二-分布式理论"><a href="#二-分布式理论" class="headerlink" title="二,分布式理论"></a>二,分布式理论</h1><h2 id="2-1-数据一致性"><a href="#2-1-数据一致性" class="headerlink" title="2.1,数据一致性"></a>2.1,数据一致性</h2><h3 id="2-1-1-什么是数据一致性"><a href="#2-1-1-什么是数据一致性" class="headerlink" title="2.1.1,什么是数据一致性"></a>2.1.1,什么是数据一致性</h3><p>数据在多副本中保存,各副本数据都是一样的</p><h3 id="2-1-2-副本一致性"><a href="#2-1-2-副本一致性" class="headerlink" title="2.1.2,副本一致性"></a>2.1.2,副本一致性</h3><p>分布式系统中,数据往往有多个副本,则带来了<strong>数据同步</strong>的问题,因为延迟等因素,几乎无法保证同时更新所有副本数据,<br>在性能和一致性之间,需要权衡-&gt;分布式一致性协议</p><h3 id="2-1-3-一致性分类"><a href="#2-1-3-一致性分类" class="headerlink" title="2.1.3,一致性分类"></a>2.1.3,一致性分类</h3><p>强一致性-&gt;系统写什么,读出来就是什么,但是对系统性能影响大,也很难实现  </p><p>弱一致性-&gt;写入成功后,不一定立刻且不一定多久可以读到写入的值,但尽可能在某个时间级别后让数据达到一致性状态</p><p>最终一致性-&gt;<strong>也是弱一致性的一种</strong>,<strong>保证一段时间后,节点数据达到一致性状态</strong>,<br>在一致性状态前的时间片段称为[不一致窗口]</p><p>最终一致性又有多个变种-&gt;因果一致性||读己所写一致性||会话一致性||单调/写读一致性||</p><p><img src="img1.png" alt="一致性分类"></p><h2 id="2-2-CAP定理"><a href="#2-2-CAP定理" class="headerlink" title="2.2,CAP定理"></a>2.2,CAP定理</h2><h3 id="2-2-1-CAP定理介绍"><a href="#2-2-1-CAP定理介绍" class="headerlink" title="2.2.1,CAP定理介绍"></a>2.2.1,CAP定理介绍</h3><p>又称布鲁尔定理,它指出,对一个分布式系统,<strong>不可能同时满足以下三点</strong>:</p><p><img src="%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/img2.png" alt="CAP定理"></p><h4 id="1-一致性"><a href="#1-一致性" class="headerlink" title="1.一致性"></a>1.一致性</h4><p>指的是强一致性,一旦客户端写入数据,则其他节点访问的任何一台服务器节点得到的都是最新的数据</p><h4 id="2-可用性"><a href="#2-可用性" class="headerlink" title="2.可用性"></a>2.可用性</h4><p>系统中的非故障节点收到每个请求都有响应,不允许服务器忽略请求</p><h4 id="3-分区容错性"><a href="#3-分区容错性" class="headerlink" title="3.分区容错性"></a>3.分区容错性</h4><p>允许网络丢失任意节点间的消息丢失(不同步)</p><h3 id="2-2-2-CAP如何选择"><a href="#2-2-2-CAP如何选择" class="headerlink" title="2.2.2,CAP如何选择"></a>2.2.2,CAP如何选择</h3><p><img src="img03.png" alt="img.png"></p><ul><li>CA系统,关注一致性和可用性,不能容忍网络问题或节点错误,出现这种错误,就会拒绝写请求,变成只读</li><li>CP系统,关注一致性和分区容错性,保证大多数节点数据一致,少数节点会在没有同步的时候处于不可用状态</li><li>AP系统,关注可用性和分区容错性,系统不能达成一致,需要给出数据冲突,给出数据冲突就需要维护数据版本</li></ul><p>互联网电商更多是AP,而银行必须保证C</p><h2 id="2-3-BASE理论"><a href="#2-3-BASE理论" class="headerlink" title="2.3,BASE理论"></a>2.3,BASE理论</h2><p>BASE-&gt;基本可用+软状态+最终一致性;是一致性和可用性的权衡,基于CAP定理演化  </p><p>核心思想: 无法做到强一致性,则根据不同应用的特点采用合适的方式达到最终一致性  </p><h3 id="2-3-1-基本可用"><a href="#2-3-1-基本可用" class="headerlink" title="2.3.1,基本可用"></a>2.3.1,基本可用</h3><p>出现不可预知的故障,但还是能用,相比一般系统,可能出现:</p><ul><li>响应时间的损失: 正常系统在0.5内返回结果,基本可用则在1秒内返回</li><li>功能上的损失: 正常购物可以顺利交易,但是活动流量大的时候,为了保证稳定,部分消费者可能被引导到降级页面  </li></ul><h3 id="2-3-2-软状态"><a href="#2-3-2-软状态" class="headerlink" title="2.3.2,软状态"></a>2.3.2,软状态</h3><p>硬状态要求多个节点数据副本一致,软状态则允许系统中的数据存在中间状态,允许不同节点的副本数据存在数据延时</p><h3 id="2-3-3-最终一致性"><a href="#2-3-3-最终一致性" class="headerlink" title="2.3.3,最终一致性"></a>2.3.3,最终一致性</h3><p>软状态在一定时间内达到副本数据一致</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构与理论</title>
      <link href="/2022/10/13/fen-bu-shi-yi-zhi-xing-xie-yi/"/>
      <url>/2022/10/13/fen-bu-shi-yi-zhi-xing-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-二阶段提交协议-2PC"><a href="#3-1-二阶段提交协议-2PC" class="headerlink" title="3.1,二阶段提交协议(2PC)"></a>3.1,二阶段提交协议(2PC)</h1><h2 id="3-1-1-二阶段提交协议"><a href="#3-1-1-二阶段提交协议" class="headerlink" title="3.1.1,二阶段提交协议"></a>3.1.1,二阶段提交协议</h2><p>简称2PC,是比较常见的解决分布式事务问题的方式: 要么所有参与进程都提交事务,要么都取消事务,即实现ACID的A原子性</p><blockquote><p>分布式事务: 事务提供一种操作本地数据库的不可分割的一系列操作,”要么什么都不做,要么做全套(All or Nothing)”的机制,<br>而分布式事务就是为了操作不同数据库的不可分割的一系列操作的机制</p></blockquote><p><img src="img4.png" alt="img.png"> </p><h2 id="3-1-2-执行流程"><a href="#3-1-2-执行流程" class="headerlink" title="3.1.2,执行流程"></a>3.1.2,执行流程</h2><h3 id="1-成功执行的事务提交流程"><a href="#1-成功执行的事务提交流程" class="headerlink" title="1,成功执行的事务提交流程"></a>1,成功执行的事务提交流程</h3><p><img src="img.png" alt="img.png"><br>阶段一: </p><ul><li>事务询问</li><li>执行事务</li><li>各参与者向协调者反馈事务询问的响应 </li></ul><p>阶段二: </p><ul><li>发送提交请求</li><li>事务提交</li><li>反馈事务提交结果</li><li>完成事务</li></ul><h3 id="2-中断事务流程"><a href="#2-中断事务流程" class="headerlink" title="2,中断事务流程"></a>2,中断事务流程</h3><p>假如任何一个参与者挂了(超时等),协调者无法接收到反馈,会中断事务  </p><p>阶段一: </p><ul><li>事务询问</li><li>执行事务</li><li>各参与者向协调者反馈事务询问的响应 </li></ul><p>阶段二: </p><ul><li>发送回滚请求</li><li>事务回滚</li><li>反馈事务回滚结果 </li><li>中断事务</li></ul><h2 id="3-1-3-2PC的优缺点"><a href="#3-1-3-2PC的优缺点" class="headerlink" title="3.1.3 2PC的优缺点"></a>3.1.3 2PC的优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1,优点"></a>1,优点</h3><p>原理简单</p><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2,缺点"></a>2,缺点</h3><ul><li>同步阻塞<br>在二阶段提交的执行过程中,事务处于阻塞状态,如果参与者占用公共资源,则其他节点访问会被阻塞</li><li>单点问题<br>协调者出现问题,提交流程出现问题,所有参与者一直处于事务锁定状态</li><li>数据不一致<br>协调者发送commit请求,如果一部分参与者网络故障或宕机,则会出现无法接收commit请求来完成事务操作,出现数据不一致问题</li><li>没有完善的容错机制<br>任何一个节点的失败都会导致整个事务的失败</li></ul><h1 id="3-2-三阶段提交协议-3PC"><a href="#3-2-三阶段提交协议-3PC" class="headerlink" title="3.2,三阶段提交协议(3PC)"></a>3.2,三阶段提交协议(3PC)</h1><h1 id="3-3-NWR协议"><a href="#3-3-NWR协议" class="headerlink" title="3.3,NWR协议"></a>3.3,NWR协议</h1><h1 id="3-4-Gossip协议"><a href="#3-4-Gossip协议" class="headerlink" title="3.4,Gossip协议"></a>3.4,Gossip协议</h1><h1 id="3-5-Paxos协议"><a href="#3-5-Paxos协议" class="headerlink" title="3.5,Paxos协议"></a>3.5,Paxos协议</h1><h1 id="3-6-Raft协议"><a href="#3-6-Raft协议" class="headerlink" title="3.6,Raft协议"></a>3.6,Raft协议</h1><h1 id="3-7-Lease机制"><a href="#3-7-Lease机制" class="headerlink" title="3.7,Lease机制"></a>3.7,Lease机制</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构与理论</title>
      <link href="/2022/10/05/fen-bu-shi-jia-gou-she-ji/"/>
      <url>/2022/10/05/fen-bu-shi-jia-gou-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一-分布式架构与理论"><a href="#一-分布式架构与理论" class="headerlink" title="一,分布式架构与理论"></a>一,分布式架构与理论</h1><h2 id="一-分布式架构与理论-1"><a href="#一-分布式架构与理论-1" class="headerlink" title="一,分布式架构与理论"></a>一,分布式架构与理论</h2><h3 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1,什么是分布式系统"></a>1.1,什么是分布式系统</h3><p>分布式系统是硬软件分布在不同网络计算机上,彼此通过消息传递进行通信协调的系统  </p><p>把一个大的业务拆成多个可以独立部署和实现功能的子模块,分布在不同服务器节点,共同构成的系统  </p><p><img src="img0.png" alt="分布式系统">  </p><h3 id="1-2-分布式和集群的区别"><a href="#1-2-分布式和集群的区别" class="headerlink" title="1.2,分布式和集群的区别"></a>1.2,分布式和集群的区别</h3><p>集群-&gt;多个服务做同一件事  </p><p>分布式-&gt;多个服务做不同的事  </p><h3 id="1-3-分布式系统特性"><a href="#1-3-分布式系统特性" class="headerlink" title="1.3,分布式系统特性"></a>1.3,分布式系统特性</h3><p>分布性-&gt;可以分布在不同空间(物理)   </p><p>对等性-&gt;计算机服务节点没有主从之分  </p><p>并发性-&gt;分布式系统的多个节点,可能并发地操作资源(数据库等)  </p><p>缺乏全局时钟-&gt;由于处于不同机器,而且是远程通信,事件执行的先后顺序难以确认  </p><p>故障容易发生-&gt;机器越多,越有可能发生局部的故障  </p><p>单点故障-&gt;如果某个功能/角色只有一台计算机支撑,则它出现的故障就是单点故障</p><h3 id="1-4-分布式系统面临的问题"><a href="#1-4-分布式系统面临的问题" class="headerlink" title="1.4,分布式系统面临的问题"></a>1.4,分布式系统面临的问题</h3><h4 id="1-通信异常"><a href="#1-通信异常" class="headerlink" title="1,通信异常"></a>1,通信异常</h4><p>网络本身可能异常,则会出现<strong>分布式系统无法完成一次网络通信</strong>的情况,<br>而且,远程通信也有延迟,综上,分布式系统很容易出现<strong>消息丢失和延迟</strong></p><h4 id="2-网络分区"><a href="#2-网络分区" class="headerlink" title="2,网络分区"></a>2,网络分区</h4><p>部分网络不连通,但是子网络内部的网络通信正常,导致网络环境分成了不同的区域,出现<strong>局部小集群</strong>,<br>此时需要这些小集群完成服务,对分布式一致性提出巨大挑战</p><h4 id="3-节点故障"><a href="#3-节点故障" class="headerlink" title="3,节点故障"></a>3,节点故障</h4><p>组成微服务的服务器节点宕机或僵死</p><h4 id="4-三态-重发"><a href="#4-三态-重发" class="headerlink" title="4,三态,重发"></a>4,三态,重发</h4><p>三态-&gt;分布式系统每次请求响应都有<strong>成功/失败/超时</strong>三种状态  </p><p>重发-&gt;超时/失败的情况就需要重新发起调用</p><h4 id="5-幂等"><a href="#5-幂等" class="headerlink" title="5,幂等"></a>5,幂等</h4><p>多次请求某个资源,对资源本身都是产生和一次调用相同的结果 </p><h1 id="四-分布式系统设计策略"><a href="#四-分布式系统设计策略" class="headerlink" title="四,分布式系统设计策略"></a>四,分布式系统设计策略</h1><h1 id="五-分布式架构服务调用"><a href="#五-分布式架构服务调用" class="headerlink" title="五,分布式架构服务调用"></a>五,分布式架构服务调用</h1><h1 id="六-分布式服务治理"><a href="#六-分布式服务治理" class="headerlink" title="六,分布式服务治理"></a>六,分布式服务治理</h1><h1 id="七-架构设计基本原则"><a href="#七-架构设计基本原则" class="headerlink" title="七,架构设计基本原则"></a>七,架构设计基本原则</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一代微服务</title>
      <link href="/2022/10/05/di-yi-dai-wei-fu-wu/"/>
      <url>/2022/10/05/di-yi-dai-wei-fu-wu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/10/04/ce-shi-wen-zhang/ce-shi-wen-zhang/"/>
      <url>/2022/10/04/ce-shi-wen-zhang/ce-shi-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>测试文章</p><img src="/2022/10/04/ce-shi-wen-zhang/ce-shi-wen-zhang/test.jpg" class="" title="图片引用方法一"><p><img src="test.jpg" alt="图片引用方法二"></p><p><img src="/images/test.jpg" alt="图片引用方法三"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

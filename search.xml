<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript深度指南</title>
      <link href="/2023/02/14/javascript-shen-du-zhi-nan/javascript-shen-du-zhi-nan/javascript-shen-du-zhi-nan/"/>
      <url>/2023/02/14/javascript-shen-du-zhi-nan/javascript-shen-du-zhi-nan/javascript-shen-du-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="发展史-ECMA-编程语言-js相关-变量-js值"><a href="#发展史-ECMA-编程语言-js相关-变量-js值" class="headerlink" title="发展史,ECMA,编程语言,js相关,变量,js值"></a>发展史,ECMA,编程语言,js相关,变量,js值</h1><blockquote><p>开篇语: 解决问题的能力不仅仅在于经验(或知识深度?),也在于知识的储备(知识广度)<br>前端开发框架知识只是小部分,更多是js基础与高级部分!</p></blockquote><h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><h3 id="五大主流浏览器-有自己研发的内核"><a href="#五大主流浏览器-有自己研发的内核" class="headerlink" title="五大主流浏览器(有自己研发的内核)"></a>五大主流浏览器(有自己研发的内核)</h3><p><img src="img.png" alt="img.png"></p><h3 id="浏览器历史-js诞生"><a href="#浏览器历史-js诞生" class="headerlink" title="浏览器历史,js诞生"></a>浏览器历史,js诞生</h3><p><img src="img_1.png" alt="img_1.png"><br><img src="img_2.png" alt="img_2.png"><br><img src="img_3.png" alt="img_3.png"><br><img src="img_4.png" alt="img_4.png"></p><h2 id="ECMA-European-Computer-Manufactures-Association-欧洲计算机制造联合会"><a href="#ECMA-European-Computer-Manufactures-Association-欧洲计算机制造联合会" class="headerlink" title="ECMA (European Computer Manufactures Association) 欧洲计算机制造联合会"></a>ECMA (European Computer Manufactures Association) 欧洲计算机制造联合会</h2>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> javascript </category>
          
          <category> 高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
            <tag> 高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udemy-rust</title>
      <link href="/2023/02/13/udemy-rust/udemy-rust/udemy-rust/"/>
      <url>/2023/02/13/udemy-rust/udemy-rust/udemy-rust/</url>
      
        <content type="html"><![CDATA[<h1 id="what-is-rust"><a href="#what-is-rust" class="headerlink" title="what is rust"></a>what is rust</h1><p><img src="img.png" alt="内存安全,无gc和运行时"></p><ul><li>现代编程语言,可以解决过去编程语言的问题;</li><li>无null(有丰富的类型系统,无引用与指针);</li><li>无异常(强制的异常处理);</li><li>良好的包管理和构建系统;</li><li>无数据竞争(利于编写异步代码)<br><img src="img_2.png" alt="img_2.png"><h1 id="installing-rust"><a href="#installing-rust" class="headerlink" title="installing rust"></a>installing rust</h1><img src="img_1.png" alt="cargo是包管理和构建系统;rustup是链安装程序,可以升级rust和cargo;"><h1 id="cargo"><a href="#cargo" class="headerlink" title="cargo"></a>cargo</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><pre class=" language-shell"><code class="language-shell"># 如果是--lib,则声明为一个类库,不可执行cargo new examplecd example git init</code></pre><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><h3 id="Cargo-toml"><a href="#Cargo-toml" class="headerlink" title="Cargo.toml"></a>Cargo.toml</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>package<span class="token punctuation">]</span>name = "example"version = "0.1.0"edition = "2021" <span class="token punctuation">[</span>dependencies<span class="token punctuation">]</span>rand = "0.7" </code></pre><img src="img_3.png" alt="如果vs安装了这个插件,可以查看依赖所有可能的版本"><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><pre class=" language-shell"><code class="language-shell">cargo build</code></pre><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><pre class=" language-shell"><code class="language-shell">cargo run</code></pre><img src="img_6.png" alt="img_6.png"><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-shell"><code class="language-shell">cargo install cargo-expand</code></pre><h3 id="如果报这个错-则安装工具链"><a href="#如果报这个错-则安装工具链" class="headerlink" title="如果报这个错,则安装工具链"></a>如果报这个错,则安装工具链</h3><img src="img_5.png" alt="img_5.png"><h3 id="配置cargo镜像-网上搜的"><a href="#配置cargo镜像-网上搜的" class="headerlink" title="配置cargo镜像(网上搜的)"></a>配置cargo镜像(网上搜的)</h3><img src="img_4.png" alt="img_4.png"><pre class=" language-shell"><code class="language-shell">[source.crates-io]registry = "https://github.com/rust-lang/crates.io-index"#指定镜像replace-with = 'tuna'#清华大学[source.tuna]registry = "https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git"</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udemy-Django4</title>
      <link href="/2023/02/13/udemy-django4/udemy-django4/udemy-django4/"/>
      <url>/2023/02/13/udemy-django4/udemy-django4/udemy-django4/</url>
      
        <content type="html"><![CDATA[<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><pre class=" language-shell"><code class="language-shell">pip install Django==4.0</code></pre><h1 id="how-django-works"><a href="#how-django-works" class="headerlink" title="how django works"></a>how django works</h1><p><img src="img.png" alt="MTV"><img src="img_2.png" alt="img_2.png"><img src="img_3.png" alt="img_3.png"><img src="img_4.png" alt="img_4.png"><br><img src="img_5.png" alt="内置权限管理,支持super用户直接查看数据库"><br><img src="img_6.png" alt="缺陷"></p><h1 id="first-django-project"><a href="#first-django-project" class="headerlink" title="first django project"></a>first django project</h1><p><img src="img_7.png" alt="pip安装django时已经安装了Django-Dash"></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="img_8.png" alt="img_8.png"></p><pre class=" language-shell"><code class="language-shell">django-admin startproject my_site</code></pre><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>最顶层的包名可以改变,与项目名不一致也没关系</li><li>manage.py有一堆命令行的语句,可以让我们用各种方式与django项目交互</li><li><strong>init</strong>.py是一个空的python文件</li><li>settings.py是设置文件</li><li>urls.py是网站所有url</li><li>asgi.py是SGI兼容的web服务器服务入口</li><li>wsgi.py是WSI兼容的web服务器服务入口</li></ul><p><img src="img_9.png" alt="生成的项目结构"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class=" language-shell"><code class="language-shell">cd my_sitepython manage.py runserver# 如果要指定端口python manage.py runserver 8080</code></pre><p><img src="img_10.png" alt="img_10.png"><img src="img_11.png" alt="img_11.png"></p><h1 id="first-django-application"><a href="#first-django-application" class="headerlink" title="first django application"></a>first django application</h1><p><img src="img_12.png" alt="一个项目可以写多个app,它们是独立的"><br><img src="img_13.png" alt="img_13.png"></p><h2 id="how-to-create-a-new-app"><a href="#how-to-create-a-new-app" class="headerlink" title="how to create a new app"></a>how to create a new app</h2><pre class=" language-shell"><code class="language-shell">python manage.py startapp app_name</code></pre><p><img src="img_15.png" alt="运行"><br><img src="img_14.png" alt="新增了一个项目文件夹"></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><h3 id="较小的项目中-不同app直接连接-配置-到项目的urls-py"><a href="#较小的项目中-不同app直接连接-配置-到项目的urls-py" class="headerlink" title="较小的项目中,不同app直接连接(配置)到项目的urls.py"></a>较小的项目中,不同app直接连接(配置)到项目的urls.py</h3><p><img src="img_16.png" alt="img_16.png"></p><h3 id="如果大的项目-这样做会混乱-所以建议连接到自己的urls-py-再将app的urls配置到项目的urls"><a href="#如果大的项目-这样做会混乱-所以建议连接到自己的urls-py-再将app的urls配置到项目的urls" class="headerlink" title="如果大的项目,这样做会混乱,所以建议连接到自己的urls.py,再将app的urls配置到项目的urls"></a>如果大的项目,这样做会混乱,所以建议连接到自己的urls.py,再将app的urls配置到项目的urls</h3><p><img src="img_18.png" alt="img_18.png"></p><h2 id="修改my-app的views-py"><a href="#修改my-app的views-py" class="headerlink" title="修改my_app的views.py"></a>修改my_app的views.py</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token comment" spellcheck="true"># 有基于函数和基于类的views</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 返回http响应</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"HELLO THIS IS A VIEW INSIDE MY_APP"</span><span class="token punctuation">)</span></code></pre><h2 id="新建urls-py"><a href="#新建urls-py" class="headerlink" title="新建urls.py"></a>新建urls.py</h2><p><img src="img_19.png" alt="img_19.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># 导入views</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true"># url配置</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># 根路由,用views的index方法处理,视图名称为index</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>index<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h2 id="修改-my-site-urls-py-引入my-app的urls配置"><a href="#修改-my-site-urls-py-引入my-app的urls配置" class="headerlink" title="修改 my_site/urls.py,引入my_app的urls配置"></a>修改 my_site/urls.py,引入my_app的urls配置</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'my_app/'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">'my_app.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span> </code></pre><h2 id="运行并测试"><a href="#运行并测试" class="headerlink" title="运行并测试"></a>运行并测试</h2><pre class=" language-shell"><code class="language-shell">python .\manage.py runserver</code></pre><p><img src="img_20.png" alt="404,提示只要my_app和admin被注册了"><br><img src="img_21.png" alt="访问my_app"></p><h1 id="introduction-to-URLs-views-and-routing"><a href="#introduction-to-URLs-views-and-routing" class="headerlink" title="introduction to URLs,views,and routing"></a>introduction to URLs,views,and routing</h1><h2 id="project-application-exercise"><a href="#project-application-exercise" class="headerlink" title="project application exercise"></a>project application exercise</h2><h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><pre class=" language-shell"><code class="language-shell">django-admin startproject my_sitecd my_sitepython manage.py startapp first_app</code></pre><h3 id="views-and-urls-overview"><a href="#views-and-urls-overview" class="headerlink" title="views and urls overview"></a>views and urls overview</h3><p><img src="img_22.png" alt="img_22.png"><br><img src="img_23.png" alt="img_23.png"><br><img src="img_24.png" alt="img_24.png"></p><h3 id="function-based-views-basics"><a href="#function-based-views-basics" class="headerlink" title="function based views - basics"></a>function based views - basics</h3><h4 id="修改first-app下的views-py"><a href="#修改first-app下的views-py" class="headerlink" title="修改first_app下的views.py"></a>修改first_app下的views.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">simple_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">"SIMPLE VIEW"</span><span class="token punctuation">)</span> </code></pre><h4 id="在first-app下新建urls-py"><a href="#在first-app下新建urls-py" class="headerlink" title="在first_app下新建urls.py"></a>在first_app下新建urls.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># 从当前目录导入</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>simple_view<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h4 id="修改my-site下的urls-py"><a href="#修改my-site下的urls-py" class="headerlink" title="修改my_site下的urls.py"></a>修改my_site下的urls.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include<span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'first_app/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'first_app.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> </code></pre><pre class=" language-shell"><code class="language-shell">python manage.py runserver</code></pre><p><img src="img_27.png" alt="显示提示是因为DEBUG=true选项"><br><img src="img_26.png" alt="img_26.png"></p><h4 id="修改my-site下的urls-py-1"><a href="#修改my-site下的urls-py-1" class="headerlink" title="修改my_site下的urls.py"></a>修改my_site下的urls.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> include <span class="token comment" spellcheck="true"># 最简单的路由处理配置</span><span class="token keyword">def</span> <span class="token function">home_view</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'HOME PAGE'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'first_app/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'first_app.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> home_view<span class="token punctuation">)</span><span class="token punctuation">]</span> </code></pre><p><img src="img_28.png" alt="img_28.png"></p><h4 id="将home-page移动到my-site-views-py-新建"><a href="#将home-page移动到my-site-views-py-新建" class="headerlink" title="将home_page移动到my_site/views.py(新建)"></a>将home_page移动到my_site/views.py(新建)</h4><p><img src="img_29.png" alt="img_29.png"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token comment" spellcheck="true"># 最简单的路由处理配置</span><span class="token keyword">def</span> <span class="token function">home_view</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'HOME PAGE'</span><span class="token punctuation">)</span></code></pre><p><img src="img_30.png" alt="此时的urls.py"><br><img src="img_31.png" alt="django有热更新,可以看到homepage正常显示"></p><h2 id="Dynamic-Views-routing-logic"><a href="#Dynamic-Views-routing-logic" class="headerlink" title="Dynamic Views - routing logic"></a>Dynamic Views - routing logic</h2><p><img src="img_32.png" alt="img_32.png"></p><h3 id="修改first-app-views-py"><a href="#修改first-app-views-py" class="headerlink" title="修改first_app/views.py"></a>修改first_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token comment" spellcheck="true"># 字典里存放网页对应内容</span>articles <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'sports'</span><span class="token punctuation">:</span> <span class="token string">'Sports Page'</span><span class="token punctuation">,</span>    <span class="token string">'finance'</span><span class="token punctuation">:</span> <span class="token string">'Finance Page'</span><span class="token punctuation">,</span>    <span class="token string">'politics'</span><span class="token punctuation">:</span> <span class="token string">'Politics Page'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># topic接收路由参数</span><span class="token keyword">def</span> <span class="token function">news_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 去字典里获取内容,但是如果没有,会报keyError,而我们需要重定向报错页面</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># first_app/num1/num2 -> num1+num2</span>    add_res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2    res <span class="token operator">=</span> f<span class="token string">"{num1} + {num2} = {add_res}"</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>str<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre><h3 id="修改first-app-urls-py"><a href="#修改first-app-urls-py" class="headerlink" title="修改first_app/urls.py"></a>修改first_app/urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># 从当前目录导入</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># 动态路由</span>    <span class="token comment" spellcheck="true"># path('&lt;topic>/',views.news_view)</span>    <span class="token comment" spellcheck="true"># 路径转换器(path convertor),接收并转换路径中的参数</span>    <span class="token comment" spellcheck="true"># 这里将topic识别为字符串</span>    path<span class="token punctuation">(</span><span class="token string">'&lt;str:topic>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>news_view<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'&lt;int:num1>/&lt;int:num2>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>add_view<span class="token punctuation">)</span><span class="token punctuation">]</span>  </code></pre><p><img src="img_33.png" alt="路径转换器"><br><img src="img_35.png" alt="img_35.png"></p><h2 id="Using-ResponseNotFound-and-404-Pages"><a href="#Using-ResponseNotFound-and-404-Pages" class="headerlink" title="Using ResponseNotFound and 404 Pages"></a>Using ResponseNotFound and 404 Pages</h2><p><img src="img_36.png" alt="img_36.png"><br><img src="img_37.png" alt="img_37.png"></p><h3 id="修改first-app-views-py-1"><a href="#修改first-app-views-py-1" class="headerlink" title="修改first_app/views.py"></a>修改first_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpResponseNotFound <span class="token comment" spellcheck="true"># 字典里存放网页对应内容</span>articles <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'sports'</span><span class="token punctuation">:</span> <span class="token string">'Sports Page'</span><span class="token punctuation">,</span>    <span class="token string">'finance'</span><span class="token punctuation">:</span> <span class="token string">'Finance Page'</span><span class="token punctuation">,</span>    <span class="token string">'politics'</span><span class="token punctuation">:</span> <span class="token string">'Politics Page'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># topic接收路由参数</span><span class="token keyword">def</span> <span class="token function">news_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 尝试获取网页</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果没有该网页,返回404的提示</span>        res <span class="token operator">=</span> <span class="token string">'No page for the topic!'</span>        <span class="token keyword">return</span> HttpResponseNotFound<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回字符串 </span></code></pre><p><img src="img_38.png" alt="img_38.png"></p><h3 id="修改first-app-views-py-2"><a href="#修改first-app-views-py-2" class="headerlink" title="修改first_app/views.py"></a>修改first_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpResponseNotFound<span class="token punctuation">,</span> Http404<span class="token comment" spellcheck="true"># 字典里存放网页对应内容</span>articles <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'sports'</span><span class="token punctuation">:</span> <span class="token string">'Sports Page'</span><span class="token punctuation">,</span>    <span class="token string">'finance'</span><span class="token punctuation">:</span> <span class="token string">'Finance Page'</span><span class="token punctuation">,</span>    <span class="token string">'politics'</span><span class="token punctuation">:</span> <span class="token string">'Politics Page'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># topic接收路由参数</span><span class="token keyword">def</span> <span class="token function">news_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 尝试获取网页</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果没有该网页,返回404的提示</span>        res <span class="token operator">=</span> <span class="token string">'No page for the topic!'</span>        <span class="token comment" spellcheck="true"># return HttpResponseNotFound(res) # 返回字符串</span>        <span class="token keyword">raise</span> Http404<span class="token punctuation">(</span><span class="token string">"404 GENERIC ERROR"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回通用错误,返回模板(如404.html) </span></code></pre><p><img src="img_39.png" alt="没有配置自定义404页时的默认404"></p><h3 id="修改my-site-setting-py"><a href="#修改my-site-setting-py" class="headerlink" title="修改my_site/setting.py"></a>修改my_site/setting.py</h3><p><img src="img_40.png" alt="img_40.png"><br><img src="img_41.png" alt="此时的404,不会提供太多信息"></p><h2 id="Redirects-Basics"><a href="#Redirects-Basics" class="headerlink" title="Redirects Basics"></a>Redirects Basics</h2><p><img src="img_42.png" alt="img_42.png"><img src="img_43.png" alt="img_43.png"><img src="img_44.png" alt="img_44.png"></p><h3 id="first-app-views-py"><a href="#first-app-views-py" class="headerlink" title="first_app/views.py"></a>first_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpResponseNotFound<span class="token punctuation">,</span> Http404<span class="token punctuation">,</span> HttpResponseRedirect<span class="token comment" spellcheck="true"># 字典里存放网页对应内容</span>articles <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'sports'</span><span class="token punctuation">:</span> <span class="token string">'Sports Page'</span><span class="token punctuation">,</span>    <span class="token string">'finance'</span><span class="token punctuation">:</span> <span class="token string">'Finance Page'</span><span class="token punctuation">,</span>    <span class="token string">'politics'</span><span class="token punctuation">:</span> <span class="token string">'Politics Page'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># topic接收路由参数</span><span class="token keyword">def</span> <span class="token function">news_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 尝试获取网页</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>articles<span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果没有该网页,返回404的提示</span>        res <span class="token operator">=</span> <span class="token string">'No page for the topic!'</span>        <span class="token comment" spellcheck="true"># return HttpResponseNotFound(res) # 返回字符串</span>        <span class="token keyword">raise</span> Http404<span class="token punctuation">(</span><span class="token string">"404 GENERIC ERROR"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回通用错误,返回模板(如404.html) </span><span class="token keyword">def</span> <span class="token function">num_page_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> num_page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_page<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取字典里所有的key</span>    topics_list <span class="token operator">=</span> list<span class="token punctuation">(</span>articles<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['sports','finance','politics']</span>    topic <span class="token operator">=</span> topics_list<span class="token punctuation">[</span>num_page<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 重定向到 first_app/除num_page外的当前路由/&lt;topic></span>    <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>topic<span class="token punctuation">)</span> </code></pre><h3 id="first-app-urls-py"><a href="#first-app-urls-py" class="headerlink" title="first_app/urls.py"></a>first_app/urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># 从当前目录导入</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># 将被重定向的url</span>    path<span class="token punctuation">(</span><span class="token string">'redirect/&lt;int:num_page>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>num_page_view<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 如果没有redirect,则不知道为啥把除了0以外的都识别称字符串,然后报404</span>    path<span class="token punctuation">(</span><span class="token string">'redirect/&lt;str:topic>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>news_view<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span></code></pre><p><img src="img_45.png" alt="索引超出"></p><h2 id="reverse-urls-and-url-names"><a href="#reverse-urls-and-url-names" class="headerlink" title="reverse urls and url names"></a>reverse urls and url names</h2><p><img src="img_46.png" alt="img_46.png"><img src="img_47.png" alt="img_47.png"><img src="img_48.png" alt="reverse方法查找对应name的url,可用于重定向"> </p><h3 id="first-app-views-py-1"><a href="#first-app-views-py-1" class="headerlink" title="first_app/views.py"></a>first_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> reverse<span class="token keyword">from</span> django<span class="token punctuation">.</span>http<span class="token punctuation">.</span>response <span class="token keyword">import</span> HttpResponse<span class="token punctuation">,</span> HttpResponseNotFound<span class="token punctuation">,</span> Http404<span class="token punctuation">,</span> HttpResponseRedirect<span class="token comment" spellcheck="true"># 字典里存放网页对应内容</span>articles <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'sports'</span><span class="token punctuation">:</span> <span class="token string">'Sports Page'</span><span class="token punctuation">,</span>    <span class="token string">'finance'</span><span class="token punctuation">:</span> <span class="token string">'Finance Page'</span><span class="token punctuation">,</span>    <span class="token string">'politics'</span><span class="token punctuation">:</span> <span class="token string">'Politics Page'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># topic接收路由参数</span><span class="token keyword">def</span> <span class="token function">news_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">num_page_view</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> num_page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_page<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取字典里所有的key</span>    topics_list <span class="token operator">=</span> list<span class="token punctuation">(</span>articles<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['sports','finance','politics']</span>    topic <span class="token operator">=</span> topics_list<span class="token punctuation">[</span>num_page<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 反向定位到name为topic-page的url,并传递参数topic</span>    webpage <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'topic-page'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>topic<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 重定向到 first_app/除num_page外的当前路由/&lt;topic></span>    <span class="token comment" spellcheck="true"># return HttpResponseRedirect(topic)</span>    <span class="token keyword">return</span> HttpResponseRedirect<span class="token punctuation">(</span>webpage<span class="token punctuation">)</span> </code></pre><h3 id="first-app-urls-py-1"><a href="#first-app-urls-py-1" class="headerlink" title="first_app/urls.py"></a>first_app/urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># 从当前目录导入</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true"># 将被重定向的url</span>    path<span class="token punctuation">(</span><span class="token string">'redirect/&lt;int:num_page>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>num_page_view<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 如果没有redirect,则不知道为啥把除了0以外的都识别称字符串,然后报404</span>    path<span class="token punctuation">(</span><span class="token string">'redirect/&lt;str:topic>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>news_view<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'topic-page'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span> </code></pre><h2 id="connecting-a-view-to-a-template"><a href="#connecting-a-view-to-a-template" class="headerlink" title="connecting a view to a template"></a>connecting a view to a template</h2><p><img src="img_49.png" alt="img_49.png"><img src="img_50.png" alt="img_50.png"><img src="img_51.png" alt="img_51.png"></p><h3 id="在顶层目录下创建templates-first-app-example-html"><a href="#在顶层目录下创建templates-first-app-example-html" class="headerlink" title="在顶层目录下创建templates/first_app/example.html"></a>在顶层目录下创建templates/first_app/example.html</h3><p><img src="img_52.png" alt="img_52.png"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>example html connected<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="first-app-views-py-2"><a href="#first-app-views-py-2" class="headerlink" title="first_app/views.py"></a>first_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render <span class="token keyword">def</span> <span class="token function">simple_view</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>req<span class="token punctuation">,</span><span class="token string">'first_app/example.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># xxx.html</span></code></pre><h3 id="first-app-urls-py-2"><a href="#first-app-urls-py-2" class="headerlink" title="first_app/urls.py"></a>first_app/urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token comment" spellcheck="true"># 从当前目录导入</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> views<span class="token comment" spellcheck="true"># 配置路由</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>simple_view<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p><img src="img_53.png" alt="没有找到"><img src="img_54.png" alt="django尝试从内置的admin\templates和auth\templates里寻找html"></p><h3 id="admin和auth在my-site-settings里应用程序列表里有配置"><a href="#admin和auth在my-site-settings里应用程序列表里有配置" class="headerlink" title="admin和auth在my_site/settings里应用程序列表里有配置"></a>admin和auth在my_site/settings里应用程序列表里有配置</h3><p><img src="img_55.png" alt="img_55.png"></p><h3 id="settings里配置templates所在目录"><a href="#settings里配置templates所在目录" class="headerlink" title="settings里配置templates所在目录"></a>settings里配置templates所在目录</h3><p><img src="img_56.png" alt="img_56.png"><br><img src="img_57.png" alt="可以多个"><br><img src="img_58.png" alt="成功"></p><h1 id="django-and-templates"><a href="#django-and-templates" class="headerlink" title="django and templates"></a>django and templates</h1><p><img src="img_59.png" alt="img_59.png"><br><img src="img_60.png" alt="img_60.png"><br><img src="img_61.png" alt="img_61.png"></p><h2 id="template-directories"><a href="#template-directories" class="headerlink" title="template directories"></a>template directories</h2><p><img src="img_62.png" alt="img_62.png"><img src="img_63.png" alt="按app来分templates目录更加理想"><img src="img_64.png" alt="为此,需要注册app到项目setting.py"><br><img src="img_65.png" alt="img_65.png"></p><h3 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h3><p><img src="img_66.png" alt="创建并添加到项目urls"><img src="img_67.png" alt="迁移"><img src="img_68.png" alt="链接app到项目"><br><img src="img_69.png" alt="img_69.png"><img src="img_70.png" alt="img_70.png"><img src="img_71.png" alt="img_71.png"><br><img src="img_72.png" alt="在my_app下有子目录my_app是因为有可能多个app有同名的html"><img src="img_73.png" alt="img_73.png"><img src="img_74.png" alt="img_74.png">  </p><h3 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h3><pre class=" language-shell"><code class="language-shell">django-admin startproject i_sitecd i_sitepython .\manage.py startapp my_app </code></pre><h3 id="my-app"><a href="#my-app" class="headerlink" title="my_app"></a>my_app</h3><h4 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns<span class="token operator">=</span><span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>example_view<span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h4 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># my_app/templates/my_app/example.html</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>req<span class="token punctuation">,</span><span class="token string">'my_app/example.html'</span><span class="token punctuation">)</span></code></pre><h3 id="i-site"><a href="#i-site" class="headerlink" title="i_site"></a>i_site</h3><h4 id="urls-py-1"><a href="#urls-py-1" class="headerlink" title="urls.py"></a>urls.py</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span>includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># !!!这里一定要加 / ,不如my_app/xxx/就识别不了!!!</span>    path<span class="token punctuation">(</span><span class="token string">'my_app/'</span><span class="token punctuation">,</span>include<span class="token punctuation">(</span><span class="token string">'my_app.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><h3 id="第一次迁移-在项目根目录运行"><a href="#第一次迁移-在项目根目录运行" class="headerlink" title="第一次迁移(在项目根目录运行)"></a>第一次迁移(在项目根目录运行)</h3><pre class=" language-shell"><code class="language-shell"># D:\fuck\udemy\python-django\i_site python .\manage.py migrate</code></pre><p><img src="img_76.png" alt="img_76.png"></p><h3 id="配置i-site-setting-py"><a href="#配置i-site-setting-py" class="headerlink" title="配置i_site/setting.py"></a>配置i_site/setting.py</h3><p><img src="img_77.png" alt="img_77.png"></p><h3 id="如果数据库或模型发生变化-运行"><a href="#如果数据库或模型发生变化-运行" class="headerlink" title="如果数据库或模型发生变化,运行"></a>如果数据库或模型发生变化,运行</h3><p><img src="img_78.png" alt="img_78.png"></p><pre class=" language-shell"><code class="language-shell">python manage.py migrate</code></pre><h3 id="创建app的templates"><a href="#创建app的templates" class="headerlink" title="创建app的templates"></a>创建app的templates</h3><p><img src="img_79.png" alt="这个是ture才有用"><br><img src="img_80.png" alt="img_80.png"><img src="img_81.png" alt="img_81.png"></p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p><img src="img_82.png" alt="img_82.png"> </p><h2 id="variables-in-templates"><a href="#variables-in-templates" class="headerlink" title="variables in templates"></a>variables in templates</h2><h3 id="i-site-my-app-templates-my-app-variable-html"><a href="#i-site-my-app-templates-my-app-variable-html" class="headerlink" title="i_site/my_app/templates/my_app/variable.html"></a>i_site/my_app/templates/my_app/variable.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>VARIABLE.HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--字符串变量--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>hello {{first_name}} {{last_name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--list变量--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{some_list}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>some_list第一项: {{some_list.0}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--字典变量--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{some_dict}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>字典的值: {{some_dict.inside_key}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{# 模板的注释 this is a comment 不会显示在页面里 #}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="i-site-my-app-urls-py"><a href="#i-site-my-app-urls-py" class="headerlink" title="i_site/my_app/urls.py"></a>i_site/my_app/urls.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>example_view<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'variable/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>variable_view<span class="token punctuation">)</span><span class="token punctuation">]</span> </code></pre><h3 id="i-site-my-app-views-py"><a href="#i-site-my-app-views-py" class="headerlink" title="i_site/my_app/views.py"></a>i_site/my_app/views.py</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">def</span> <span class="token function">example_view</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># my_app/templates/my_app/example.html</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">'my_app/example.html'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">variable_view</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">:</span>    my_var <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># 字符串变量</span>        <span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Rosalind'</span><span class="token punctuation">,</span>        <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'Franklin'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># list变量</span>        <span class="token string">'some_list'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 字典变量</span>        <span class="token string">'some_dict'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'inside_key'</span><span class="token punctuation">:</span> <span class="token string">'inside_value'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># context是上下文对象,在模板文件里可以拿到</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token string">'my_app/variable.html'</span><span class="token punctuation">,</span> context<span class="token operator">=</span>my_var<span class="token punctuation">)</span> </code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="img_83.png" alt="img_83.png"></p><h2 id="vscode-django-扩展"><a href="#vscode-django-扩展" class="headerlink" title="vscode django 扩展"></a>vscode django 扩展</h2><p><img src="img_84.png" alt="img_84.png"></p><h2 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h2><p><img src="img_85.png" alt="img_85.png"><img src="img_86.png" alt="filter可以在变量渲染前对变量进行操作"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>VARIABLE.HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--字符串变量--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>hello {{first_name}} {{last_name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    filter        upper: 转大写        length: 得到该变量长度--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>hello {{first_name|upper}} {{last_name|length}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    filter        capfirst: 首字母转大写        lower: 转小写        可以叠加使用,从左到右依次执行--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>hello {{first_name|upper|lower|capfirst}} {{last_name|capfirst}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_87.png" alt="img_87.png"></p><h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><h3 id="for-loops-循环标签"><a href="#for-loops-循环标签" class="headerlink" title="for loops (循环标签)"></a>for loops (循环标签)</h3><p><img src="img_88.png" alt="img_88.png"></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>VARIABLE.HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>some_list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for item in some_list %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>some_dict<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    {% for k,v in some_dict.items %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{k}} : {{v}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_90.png" alt="img_90.png"></p><h3 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if,elif,else"></a>if,elif,else</h3><p><img src="img_89.png" alt="img_89.png"><br><img src="img_91.png" alt="img_91.png"> </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>VARIABLE.HTML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等号两边要留空格,否则html解析为字符串--></span><span class="token comment" spellcheck="true">&lt;!--Could not parse the remainder--></span>{# {% if first_name=='Rosalind' %} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>-</span> <span class="token attr-name">错误写法</span> <span class="token attr-name">#}</span>    <span class="token attr-name">&lt;h2</span><span class="token punctuation">></span></span>rosilind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>{% if first_name == 'Rosalind' %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% endif %}    {% for num in some_list %}    {% if num == 2 %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>TWO<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% elif num > 2 %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% else %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&lt;2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endif %}    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_93.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_93.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tags-and-url-names-in-templates<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#tags-and-url-names-in-templates<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headerlink<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tags and url names in templates<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>tags and url names in templates<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_94.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img_94.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example-html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#example-html<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headerlink<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>example.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>example connected<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    {# 这里就是去my_app下的urls.py里找name为variable的url路径 #}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>my_app:variable<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go to variable.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="my-app-urls-html"><a href="#my-app-urls-html" class="headerlink" title="my_app/urls.html"></a>my_app/urls.html</h3><p><img src="img_97.png" alt="img_97.png"> </p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="img_96.png" alt="img_96.png"><br><img src="img_95.png" alt="可以跳转"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> web </category>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> web </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udemy Advanced CSS and Sass - 高级 CSS 和 Sass</title>
      <link href="/2023/02/12/udemy-css-gao-ji/udemy-css-gao-ji/udemy-css-gao-ji/"/>
      <url>/2023/02/12/udemy-css-gao-ji/udemy-css-gao-ji/udemy-css-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><p><img src="img.png" alt="img.png"></p><h1 id="开发工具-vscode-google"><a href="#开发工具-vscode-google" class="headerlink" title="开发工具 vscode + google"></a>开发工具 vscode + google</h1><p><img src="img_1.png" alt="img_1.png"></p><h1 id="项目1-Natours-一家提供自然之旅的虚构公司"><a href="#项目1-Natours-一家提供自然之旅的虚构公司" class="headerlink" title="项目1: Natours 一家提供自然之旅的虚构公司"></a>项目1: Natours 一家提供自然之旅的虚构公司</h1><h2 id="项目演示"><a href="#项目演示" class="headerlink" title="项目演示"></a>项目演示</h2><p><img src="img_3.png" alt="img_3.png"><br><img src="img_4.png" alt="img_4.png"><br><img src="img_5.png" alt="img_5.png"><br><img src="img_6.png" alt="img_6.png"><br><img src="img_7.png" alt="img_7.png"><br><img src="img_8.png" alt="背景视频"><br><img src="img_9.png" alt="img_9.png"><br><img src="img_10.png" alt="img_10.png"></p><h2 id="初始工程"><a href="#初始工程" class="headerlink" title="初始工程"></a>初始工程</h2><p><img src="img_11.png" alt="img_11.png"></p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--google字体--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family<span class="token punctuation">=</span>Lato:100,300,400,700,900<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--网站标题栏的小图标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/favicon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Natours | Exciting tours for adventurous people<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="building-the-header-p1"><a href="#building-the-header-p1" class="headerlink" title="building the header p1"></a>building the header p1</h2><h3 id="本章知识点"><a href="#本章知识点" class="headerlink" title="本章知识点"></a>本章知识点</h3><ul><li>使用通用选择器进行基本重置的最好方式</li><li>如何设置项目范围的字体定义</li><li>如何使用clip-path(剪辑路径?)剪辑元素的某个部分</li></ul><p><img src="img_12.png" alt="img_12.png"><br><img src="img_13.png" alt="元素剪辑的定位"><br><img src="img_14.png" alt="元素剪辑可视化网站"></p><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--google字体,数字表示粗细--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family<span class="token punctuation">=</span>Lato:100,300,400,700,900<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--网站标题栏的小图标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/favicon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Natours | Exciting tours for adventurous people<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Some text...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h3><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*品牌色COLORS:Light green: #7ed56fMedium green: #55c57aDark green: #28b485*/</span><span class="token comment" spellcheck="true">/* basic reset */</span><span class="token comment" spellcheck="true">/*    重置样式是为了让样式在不同浏览器都保持一致    但是如今的浏览器兼容性越来越好,所以重置已经不是必须的了*/</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*改变盒子模型,以便不再添加边框和填充到总宽度和总高度*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    字体相关的写在body,why    因为字体的属性通常是遗传/继承的,所以加在body来使之遗传,    比通用选择器里给每个元素(父子都有)添加来得高效*/</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        sans-serif是无衬线字体        lato是谷歌的字体    */</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Lato"</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 比预定义行高高1.7倍 */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#777</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 四边的留白 */</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* basic reset end */</span><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">95</span>vh<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        linear-gradient: 线性渐变        to right bottom: 向右下角渐变        rgba: 最后一个数值是透明度     */</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>            to right bottom,            <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">126</span>, <span class="token number">213</span>, <span class="token number">111</span>, <span class="token number">0.8</span><span class="token punctuation">)</span>,            <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">40</span>, <span class="token number">180</span>, <span class="token number">133</span>, <span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>,    <span class="token url">url("../img/hero.jpg")</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* cover: 不论宽度如何改变,都会适应 */</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 背景缩放时顶部不会被裁剪,而是下半部分被裁剪 */</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        剪辑图片的右下角        polygon: 四个参数对应顺时针的四角,参数指定该点相对于左上角的顶点的距离    */</span>    <span class="token comment" spellcheck="true">/*clip-path: polygon(0 0,50% 15%,100% 200px,0 100%);*/</span>    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span>, <span class="token number">100%</span> <span class="token number">0</span>, <span class="token number">100%</span> <span class="token number">75</span>vh, <span class="token number">0</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="img_15.png" alt="测试"></p><h2 id="building-the-header-p2"><a href="#building-the-header-p2" class="headerlink" title="building the header p2"></a>building the header p2</h2><h3 id="本章知识点-1"><a href="#本章知识点-1" class="headerlink" title="本章知识点"></a>本章知识点</h3><ul><li>通过transform,top,left来使任何元素居中<br><img src="img_16.png" alt="img_16.png"><h3 id="index-html-2"><a href="#index-html-2" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--设置背景的一个好的方式: 定义一个容器,设置容器背景,然后调整容器定位--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--alt: 描述seo,搜索引擎优化,并且图片无法加载时作为填充文本--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/logo-white.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Logo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-primary-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Outdoors<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-primary-sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>is where life happens<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="style-css-1"><a href="#style-css-1" class="headerlink" title="style.css"></a>style.css</h3>```css<br>/* …… */</li></ul><p>.text-box {<br>    position: absolute;<br>    /<em>移动父元素的50%</em>/<br>    /<em>top: 50%;</em>/<br>    top: 40%;<br>    left: 50%;<br>    /<em>移动自身的-50%,回到正中位置</em>/<br>    /<em>这里的50%不是基于父元素,而是基于元素本身</em>/<br>    transform: translate(-50%,-50%);<br>}</p><p>.heading-primary {<br>    color: #fff;<br>    /* 字母转大写 */<br>    text-transform: uppercase;<br>}</p><p>.heading-primary-main {<br>    /<em>块元素会占一整行,可以把另一个span挤下去</em>/<br>    display: block;<br>    font-size: 60px;<br>    font-weight: 400;<br>    /<em>字间距</em>/<br>    letter-spacing: 35px;<br>}</p><p>.heading-primary-sub {<br>    display: block;<br>    font-size: 20px;<br>    font-weight: 700;<br>    letter-spacing: 17.4px;<br>}</p><pre><code>![效果](img_17.png)## creating cool css animations &gt; 实现标题的进入动画 ### 本章知识点- 使用关键帧规则和动画属性创建动画![img_18.png](img_18.png)![img_19.png](img_19.png)### style.css```css/*品牌色COLORS:Light green: #7ed56fMedium green: #55c57aDark green: #28b485*//*    ......*/.logo-box:hover .logo {    /*        要父元素的hover+子元素选择器才行        如果是子元素选择器:hover,则每次hover,子元素移开(动画),此时又失去hover,则会一直在原点频闪    */    animation: moveInRight 1s ease-out;}.text-box {    ......}.heading-primary {    color: #fff;    /* 字母转大写 */    text-transform: uppercase;    /*        背部可见性        解决动画的震动(原理不明)    */    backface-visibility: hidden;}.heading-primary-main {    /*块元素会占一整行,可以把另一个span挤下去*/    display: block;    font-size: 60px;    font-weight: 400;    /*字间距*/    letter-spacing: 35px;    /*指定要执行的动画的名称*/    animation-name: moveInLeft;    /*动画执行时间*/    animation-duration: 1s;    /**        动画计时函数        ease-in: 越来越快        ease-out(缓出): 越来越慢        ease-in-out/linear/step-start/step-end        支持自定义     */    animation-timing-function: ease-out;    /*动画重复次数*/    /*animation-iteration-count: 3;*/    /*动画延迟时间(会等待x秒再开始动画)*/    /*animation-delay: 3s; */}.heading-primary-sub {    display: block;    font-size: 20px;    font-weight: 700;    letter-spacing: 17.4px;    animation: moveInRight 1s ease-out;}/* 从左侧移动 *//* 为了浏览器优化,最好只对两个属性进行动画 */@keyframes moveInLeft {    /*初始状态*/    0% {        opacity: 0;        /*初始位置是执行动画的元素的-100px*/        transform: translateX(-100px);    }    80% {        /*执行到80%,此时到原元素位置的右侧20px*/        transform: translateX(10px);    }    /*结束状态*/    100% {        /*最后回到元素的初始位置*/        transform: translate(0);    }}/* 从右侧移动 */@keyframes moveInRight {    /*初始状态*/    0% {        opacity: 0;        /*初始位置是执行动画的元素的100px*/        transform: translateX(100px);    }    80% {        /*执行到80%,此时到原元素位置的左侧20px*/        transform: translateX(-10px);    }    /*结束状态*/    100% {        /*最后回到元素的初始位置*/        transform: translate(0);    }}</code></pre><h3 id="index-html-3"><a href="#index-html-3" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--google字体,数字表示粗细--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://fonts.googleapis.com/css?family<span class="token punctuation">=</span>Lato:100,300,400,700,900<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--网站标题栏的小图标--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/png<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img/favicon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Natours | Exciting tours for adventurous people<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置背景的一个好的方式: 定义一个容器,设置容器背景,然后调整容器定位--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--alt: 描述seo,搜索引擎优化,并且图片无法加载时作为填充文本--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./img/logo-white.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Logo<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-primary-main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Outdoors<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>heading-primary-sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>is where life happens<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="Building-a-Complex-Animation-Button-p1"><a href="#Building-a-Complex-Animation-Button-p1" class="headerlink" title="Building a Complex Animation Button p1"></a>Building a Complex Animation Button p1</h2><h3 id="本章知识点-2"><a href="#本章知识点-2" class="headerlink" title="本章知识点"></a>本章知识点</h3><ul><li>什么是伪元素和伪类</li><li>如何以及为什么使用::after</li><li>通过过渡属性构建创意的悬停动画效果<br><img src="img_20.png" alt="img_20.png"><h3 id="index-html-4"><a href="#index-html-4" class="headerlink" title="index.html"></a>index.html</h3><img src="img_21.png" alt="img_21.png"><h3 id="style-css-2"><a href="#style-css-2" class="headerlink" title="style.css"></a>style.css</h3>```css<br>/* …… */<br>.text-box {<br>  position: absolute;<br>  /<em>移动父元素的50%</em>/<br>  /<em>top: 50%;</em>/<br>  top: 40%;<br>  left: 50%;<br>  /<em>移动自身的-50%,回到正中位置</em>/<br>  /<em>这里的50%不是基于父元素,而是基于元素本身</em>/<br>  transform: translate(-50%, -50%);<br>  /<em>文本/行内块对齐</em>/<br>  text-align: center;<br>}</li></ul><p>.heading-primary {<br>    color: #fff;<br>    /* 字母转大写 <em>/<br>    text-transform: uppercase;<br>    /</em><br>        背部可见性<br>        解决动画的震动(原理不明)<br>    */<br>    backface-visibility: hidden;<br>    margin-bottom: 60px;</p><p>/* …… */</p><p>/<em>可以通过分别设置两个伪类来实现点击前后的不同效果</em>/<br>/<em>:link是链接伪类,此时尚未被点击</em>/<br>/<em>:visited是已被点击的状态(已被访问的链接)(访问状态)</em>/<br>.btn:link,<br>.btn:visited {<br>    /<em>转大写字母</em>/<br>    text-transform: uppercase;<br>    /<em>取消a默认下划线</em>/<br>    text-decoration: none;<br>    /<em>padding可以撑开a元素</em>/<br>    padding: 15px 40px;<br>    /<em>防止挡住其他元素,并且行内元素被视为文字,可以使用文字居中</em>/<br>    display: inline-block;<br>    border-radius: 100px;<br>    /<em>过渡属性动画,比帧动画简单</em>/<br>    /<em>该属性作用于该选择器的所有属性</em>/<br>    transition: all .2s;<br>}</p><p>/<em>hover y=3 active(点击) y=-1 则点击时实际是从3到1,实现了按钮按下的效果</em>/<br>.btn:hover {<br>    /<em>向上移动</em>/<br>    transform: translateY(-3px);<br>    /<em>阴影</em>/<br>    /<em>参数1: x轴阴影位置; 参数2: y轴阴影位置; 参数3: 模糊度; 参数4: 颜色</em>/<br>    /<em>y轴向下10px的阴影</em>/<br>    box-shadow: 0 10px 20px rgba(0, 0, 0, .2);<br>}</p><p>/<em>被激活(单击或触发事件)时</em>/<br>.btn:active {<br>    transform: translateY(-1px);<br>    /<em>减少y轴的阴影面积,以及模糊度,给人一种向上按下的视觉效果</em>/<br>    box-shadow: 0 5px 10px rgba(0, 0, 0, .2);<br>}</p><p>.btn-white {<br>    background-color: #fff;<br>    color: #777;<br>}</p><pre><code>### 效果![升起](img_22.png)![按下](img_23.png)## Building a Complex Animation Button p2### 本章内容: 当第一次悬停于按钮上时,按钮会有一个冲击波(扩散到无限大的淡影)### index.html![btn添加一个class](img_24.png)### style.css```css/*......*//*可以通过分别设置两个伪类来实现点击前后的不同效果*//*:link是链接伪类,此时尚未被点击*//*:visited是已被点击的状态(已被访问的链接)(访问状态)*/.btn:link,.btn:visited {    /*......*/    position: relative;}/*基本被视为(此处为btn的)子元素*//*悬停到按钮外时,after会回到按钮后面*/.btn::after {    /*可以是空,但必须设置,否则不会出现*/    content: "";    display: inline-block;    height: 100%;    width: 100%;    border-radius: 100px;    /*此处定位是基于.btn*/    /*子绝父相*/    position: absolute;    top: 0;    left: 0;    /*藏在.btn下方*/    z-index: -1;    /*初始状态*/    transition: all .4s;}.btn-white::after {    /*给.btn-white的after添加背景颜色*/    background-color: #fff;}/*after被hover时触发*/.btn:hover::after {    /*scale就是简单地增大元素,磁力增大为原来的2倍*/    /*transform: scale(1.5);*/    /*scale可以设置不同方向的缩放倍数*/    transform: scaleX(1.4) scaleY(1.6);    /*透明度过渡到0*/    opacity: 0;}/* 从底部移动 */@keyframes moveInBottom {    /*初始状态*/    0% {        opacity: 0;        /*初始位置是执行动画的元素的100px*/        transform: translateY(30px);    }    /*结束状态*/    100% {        /*最后回到元素的初始位置*/        transform: translate(0);    }}/*有(从底部)进入动画的按钮*/.btn-animated {    /*动画,延迟0.75秒启动*/    animation: moveInBottom .5s ease-out .75s;    /*动画填充模式,解决动画0%时opacity无效的问题*/    animation-fill-mode: backwards;}</code></pre><blockquote><p>Natours第一部分完成</p></blockquote><h1 id="how-css-works"><a href="#how-css-works" class="headerlink" title="how css works"></a>how css works</h1><h2 id="three-pillars-支柱-of-writing-good-HTML-and-CSS"><a href="#three-pillars-支柱-of-writing-good-HTML-and-CSS" class="headerlink" title="three pillars(支柱) of writing good HTML and CSS"></a>three pillars(支柱) of writing good HTML and CSS</h2><p><img src="img_25.png" alt="三大支柱: 响应式设计;编写可维护和可扩展的代码;提高网站性能"><br><img src="img_26.png" alt="img_26.png"></p><h3 id="Responsive-design-响应式网页设计"><a href="#Responsive-design-响应式网页设计" class="headerlink" title="Responsive design 响应式网页设计"></a>Responsive design 响应式网页设计</h3><blockquote><p>在任何设备大小上正常显示</p></blockquote><ul><li>流式布局(flex)</li><li>媒体查询</li><li>响应式图片</li><li>正确的单位(字体大小或元素尺寸px,rem,vh,vw?)</li><li>桌面优先vs移动优先</li></ul><h3 id="Maintainable-and-scalable-code"><a href="#Maintainable-and-scalable-code" class="headerlink" title="Maintainable and scalable code"></a>Maintainable and scalable code</h3><h3 id="web-performance"><a href="#web-performance" class="headerlink" title="web performance"></a>web performance</h3><ul><li>less HTTP requests 尽可能少的http请求(ps: 让我想起graph.js)</li><li>less code 尽可能少的代码 </li><li>compress code 压缩代码</li><li>use a css preprocessor 使用css预处理器</li><li>less image 更少的图片</li><li>compress image 压缩图片</li></ul><h2 id="how-css-works-behind-the-scenes-an-overview"><a href="#how-css-works-behind-the-scenes-an-overview" class="headerlink" title="how css works behind the scenes (an overview)"></a>how css works behind the scenes (an overview)</h2><h3 id="css解析"><a href="#css解析" class="headerlink" title="css解析"></a>css解析</h3><ol><li>解决冲突的css声明,该过程称为级联(cascade)</li><li>处理最终的css值</li><li>最终css也存储在树状结构中 -&gt; 渲染树</li><li>视觉格式化模型,计算了一堆东西</li><li>最终呈现</li></ol><p><img src="img_27.png" alt="浏览器前端渲染过程"></p><h2 id="how-css-is-parsed-p1-the-cascade-级联-and-specificity-特异性"><a href="#how-css-is-parsed-p1-the-cascade-级联-and-specificity-特异性" class="headerlink" title="how css is parsed,p1,the cascade(级联) and specificity(特异性)"></a>how css is parsed,p1,the cascade(级联) and specificity(特异性)</h2><p><img src="img_28.png" alt="img_28.png"><br><img src="img_29.png" alt="img_29.png"></p><h3 id="级联解决冲突"><a href="#级联解决冲突" class="headerlink" title="级联解决冲突"></a>级联解决冲突</h3><p><img src="img_31.png" alt="级联,解决css冲突(来自不同来源的css)"><br><img src="img_34.png"></p><ol><li>importance(权重)</li><li>specificity(特异性) 当权重一致,则比较特异性</li><li>source other 当特异性也一致,则后声明的覆盖前声明的</li></ol><p><img src="img_32.png" alt="权重比较示例"><br><img src="img_33.png" alt="特异性比较示例"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="img_35.png" alt="img_35.png"></p><h3 id="specificity-in-practice"><a href="#specificity-in-practice" class="headerlink" title="specificity in practice"></a>specificity in practice</h3><h4 id="打开codepen-io-做一个specificity的练习"><a href="#打开codepen-io-做一个specificity的练习" class="headerlink" title="打开codepen.io,做一个specificity的练习"></a>打开codepen.io,做一个specificity的练习</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pull-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button button-danger<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Don't click here!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.button</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a</span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#nav</span> div<span class="token class">.pull-right</span> a<span class="token class">.button</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#nav</span> a<span class="token class">.button</span><span class="token pseudo-class">:hover</span></span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="img_36.png" alt="img_36.png"><img src="img_37.png" alt="!important"><br><img src="img_38.png" alt="hover后变绿,hover计算为class"></p><h2 id="how-css-is-parsed-p2-value-processing-单位如何计算-px-rem-…"><a href="#how-css-is-parsed-p2-value-processing-单位如何计算-px-rem-…" class="headerlink" title="how css is parsed,p2 value processing (单位如何计算(px,rem,…))"></a>how css is parsed,p2 value processing (单位如何计算(px,rem,…))</h2><p><img src="img_39.png" alt="百分比%不是单位,它取决于父元素的值!,通过计算并四舍五入后得出"><br><img src="img_40.png" alt="没有声明的属性有初始值,浏览器默认的"><br><img src="img_41.png" alt="rem是基于初始值计算的"><br><img src="img_42.png" alt="关于文字的属性会被子类继承"><br><img src="img_44.png" alt="字体的em是取决于父元素的font-size,padding等length的是取决于当前元素的font-size,rem基于根元素"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="img_45.png" alt="img_45.png"></p><h2 id="how-css-is-parsed-p3-inheritance-继承"><a href="#how-css-is-parsed-p3-inheritance-继承" class="headerlink" title="how css is parsed,p3 inheritance (继承)"></a>how css is parsed,p3 inheritance (继承)</h2><p><img src="img_46.png" alt="1,判断有无级联值,如果没有2,有无继承值,如果没有,就使用初始/默认值"><br><img src="img_47.png" alt="img_47.png"></p><h1 id="back-to-Natours-回到项目"><a href="#back-to-Natours-回到项目" class="headerlink" title="back to Natours 回到项目"></a>back to Natours 回到项目</h1><h2 id="converting-px-to-rem-转换px为rem"><a href="#converting-px-to-rem-转换px为rem" class="headerlink" title="converting px to rem 转换px为rem"></a>converting px to rem 转换px为rem</h2><p><img src="img_48.png" alt="img_48.png"></p><blockquote><p>rem的便利在于,改变根元素,则所有rem都会改变,无需逐个修改,并且不需要写一堆媒体查询</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*品牌色COLORS:Light green: #7ed56fMedium green: #55c57aDark green: #28b485*/</span><span class="token comment" spellcheck="true">/* basic reset */</span><span class="token comment" spellcheck="true">/*    重置样式是为了让样式在不同浏览器都保持一致    但是如今的浏览器兼容性越来越好,所以重置已经不是必须的了    添加after和before是因为只匹配*的话,after和before不会被覆盖到*/</span><span class="token selector">*,*<span class="token pseudo-element">::after</span>,*<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*继承*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*设置根元素font-size*/</span>    <span class="token comment" spellcheck="true">/*设置为10是因为方便换算 1rem=10px -> 16px=1.6rem*/</span>    <span class="token comment" spellcheck="true">/*font-size: 10px;*/</span>    <span class="token comment" spellcheck="true">/*写死为10px是不好的(比如用户修改浏览器默认字体大小?放大缩小),我们应该基于浏览器的默认font-size(16px)的百分比*/</span>    <span class="token comment" spellcheck="true">/*0.625*16=10*/</span>    <span class="token comment" spellcheck="true">/*老ie不兼容rem*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">62.5%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*改变盒子模型,以便不再添加边框和填充到总宽度和总高度*/</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    字体相关的写在body,why    因为字体的属性通常是遗传/继承的,所以加在body来使之遗传,    比通用选择器里给每个元素(父子都有)添加来得高效*/</span><span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        sans-serif是无衬线字体        lato是谷歌的字体    */</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Lato"</span>, sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*font-size: 16px;*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.6</span>rem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 比预定义行高高1.7倍 */</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#777</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 四边的留白 */</span>    <span class="token comment" spellcheck="true">/*padding: 30px;*/</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">3</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* basic reset end */</span><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">95</span>vh<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        linear-gradient: 线性渐变        to right bottom: 向右下角渐变        rgba: 最后一个数值是透明度     */</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>            to right bottom,            <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">126</span>, <span class="token number">213</span>, <span class="token number">111</span>, <span class="token number">0.8</span><span class="token punctuation">)</span>,            <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">40</span>, <span class="token number">180</span>, <span class="token number">131</span>, <span class="token number">0.8</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>,    <span class="token url">url("../img/hero.jpg")</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* cover: 不论宽度如何改变,都会适应 */</span>    <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 背景缩放时顶部不会被裁剪,而是下半部分被裁剪 */</span>    <span class="token property">background-position</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        剪辑图片的右下角        polygon: 四个参数对应顺时针的四角,参数指定该点相对于左上角的顶点的距离    */</span>    <span class="token comment" spellcheck="true">/*clip-path: polygon(0 0,50% 15%,100% 200px,0 100%);*/</span>    <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span>, <span class="token number">100%</span> <span class="token number">0</span>, <span class="token number">100%</span> <span class="token number">75</span>vh, <span class="token number">0</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.logo-box</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*子绝父相*/</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*top: 40px;*/</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">4</span>rem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*left: 40px;*/</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">4</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.logo</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*会自动计算宽度*/</span>    <span class="token comment" spellcheck="true">/*height: 35px;*/</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">3.5</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.logo-box</span><span class="token pseudo-class">:hover</span> <span class="token class">.logo</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        要父元素的hover+子元素选择器才行        如果是子元素选择器:hover,则每次hover,子元素移开(动画),此时又失去hover,则会一直在原点频闪    */</span>    <span class="token property">animation</span><span class="token punctuation">:</span> moveInRight <span class="token number">1</span>s ease-out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.text-box</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*移动父元素的50%*/</span>    <span class="token comment" spellcheck="true">/*top: 50%;*/</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">40%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*移动自身的-50%,回到正中位置*/</span>    <span class="token comment" spellcheck="true">/*这里的50%不是基于父元素,而是基于元素本身*/</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*文本/行内块对齐*/</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.heading-primary</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 字母转大写 */</span>    <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        背部可见性        解决动画的震动(原理不明)    */</span>    <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*margin-bottom: 60px;*/</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">6</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.heading-primary-main</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*块元素会占一整行,可以把另一个span挤下去*/</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*font-size: 60px;*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">6</span>rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*字间距*/</span>    <span class="token comment" spellcheck="true">/*letter-spacing: 35px;*/</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> <span class="token number">3.5</span>rem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*指定要执行的动画的名称*/</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> moveInLeft<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*动画执行时间*/</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**        动画计时函数        ease-in: 越来越快        ease-out(缓出): 越来越慢        ease-in-out/linear/step-start/step-end        支持自定义     */</span>    <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease-out<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*动画重复次数*/</span>    <span class="token comment" spellcheck="true">/*animation-iteration-count: 3;*/</span>    <span class="token comment" spellcheck="true">/*动画延迟时间(会等待x秒再开始动画)*/</span>    <span class="token comment" spellcheck="true">/*animation-delay: 3s; */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.heading-primary-sub</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*font-size: 20px;*/</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*letter-spacing: 17.4px;*/</span>    <span class="token property">letter-spacing</span><span class="token punctuation">:</span> <span class="token number">1.75</span>rem<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> moveInRight <span class="token number">1</span>s ease-out<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 从左侧移动 */</span><span class="token comment" spellcheck="true">/* 为了浏览器优化,最好只对两个属性进行动画 */</span><span class="token atrule"><span class="token rule">@keyframes</span> moveInLeft</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*初始状态*/</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*初始位置是执行动画的元素的-100px*/</span>        <span class="token comment" spellcheck="true">/*transform: translateX(-100px);*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">10</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">80% </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*执行到80%,此时到原元素位置的右侧20px*/</span>        <span class="token comment" spellcheck="true">/*transform: translateX(10px);*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">1</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*结束状态*/</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*最后回到元素的初始位置*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 从右侧移动 */</span><span class="token atrule"><span class="token rule">@keyframes</span> moveInRight</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*初始状态*/</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*初始位置是执行动画的元素的100px*/</span>        <span class="token comment" spellcheck="true">/*transform: translateX(100px);*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">10</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">80% </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*执行到80%,此时到原元素位置的左侧20px*/</span>        <span class="token comment" spellcheck="true">/*transform: translateX(-10px);*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">1</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*结束状态*/</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*最后回到元素的初始位置*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*可以通过分别设置两个伪类来实现点击前后的不同效果*/</span><span class="token comment" spellcheck="true">/*:link是链接伪类,此时尚未被点击*/</span><span class="token comment" spellcheck="true">/*:visited是已被点击的状态(已被访问的链接)(访问状态)*/</span><span class="token selector"><span class="token class">.btn</span><span class="token pseudo-class">:link</span>,<span class="token class">.btn</span><span class="token pseudo-class">:visited</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*转大写字母*/</span>    <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*取消a默认下划线*/</span>    <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*padding可以撑开a元素*/</span>    <span class="token comment" spellcheck="true">/*padding: 15px 40px;*/</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem <span class="token number">4</span>rem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*防止挡住其他元素,并且行内元素被视为文字,可以使用文字居中*/</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*border-radius: 100px;*/</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>rem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*过渡属性动画,比帧动画简单*/</span>    <span class="token comment" spellcheck="true">/*该属性作用于该选择器的所有属性*/</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.2</span>s<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">1.6</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*hover y=3 active(点击) y=-1 则点击时实际是从3到1,实现了按钮按下的效果*/</span><span class="token selector"><span class="token class">.btn</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*向上移动*/</span>    <span class="token comment" spellcheck="true">/*transform: translateY(-3px);*/</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">0.3</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*阴影*/</span>    <span class="token comment" spellcheck="true">/*参数1: x轴阴影位置; 参数2: y轴阴影位置; 参数3: 模糊度; 参数4: 颜色*/</span>    <span class="token comment" spellcheck="true">/*y轴向下10px的阴影*/</span>    <span class="token comment" spellcheck="true">/*box-shadow: 0 10px 20px rgba(0, 0, 0, .2);*/</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>rem <span class="token number">2</span>rem <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*被激活(单击或触发事件)时*/</span><span class="token selector"><span class="token class">.btn</span><span class="token pseudo-class">:active</span> </span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">0.1</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*减少y轴的阴影面积,以及模糊度,给人一种向上按下的视觉效果*/</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">5</span>px <span class="token number">10</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0.5</span>rem <span class="token number">1</span>rem <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.btn-white</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#777</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*基本被视为(此处为btn的)子元素*/</span><span class="token comment" spellcheck="true">/*悬停到按钮外时,after会回到按钮后面*/</span><span class="token selector"><span class="token class">.btn</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*可以是空,但必须设置,否则不会出现*/</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*border-radius: 100px;*/</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>rem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*此处定位是基于.btn*/</span>    <span class="token comment" spellcheck="true">/*子绝父相*/</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*藏在.btn下方*/</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*初始状态*/</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.4</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.btn-white</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*给.btn-white的after添加背景颜色*/</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*after被hover时触发*/</span><span class="token selector"><span class="token class">.btn</span><span class="token pseudo-class">:hover</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*scale就是简单地增大元素,磁力增大为原来的2倍*/</span>    <span class="token comment" spellcheck="true">/*transform: scale(1.5);*/</span>    <span class="token comment" spellcheck="true">/*scale可以设置不同方向的缩放倍数*/</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span><span class="token number">1.4</span><span class="token punctuation">)</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">1.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*透明度过渡到0*/</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 从底部移动 */</span><span class="token atrule"><span class="token rule">@keyframes</span> moveInBottom</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*初始状态*/</span>    <span class="token selector">0% </span><span class="token punctuation">{</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*初始位置是执行动画的元素的100px*/</span>        <span class="token comment" spellcheck="true">/*transform: translateY(30px);*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">3</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*结束状态*/</span>    <span class="token selector">100% </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*最后回到元素的初始位置*/</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*有(从底部)进入动画的按钮*/</span><span class="token selector"><span class="token class">.btn-animated</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*动画,延迟0.75秒启动*/</span>    <span class="token property">animation</span><span class="token punctuation">:</span> moveInBottom <span class="token number">.5</span>s ease-out <span class="token number">.75</span>s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*动画填充模式,解决动画0%时opacity无效的问题*/</span>    <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> backwards<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 高阶 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udemy-PythonPRO训练营</title>
      <link href="/2023/02/12/udemy-pythonpro-xun-lian-ying/udemy-pythonpro-xun-lian-ying/udemy-pythonpro-xun-lian-ying/"/>
      <url>/2023/02/12/udemy-pythonpro-xun-lian-ying/udemy-pythonpro-xun-lian-ying/udemy-pythonpro-xun-lian-ying/</url>
      
        <content type="html"><![CDATA[<h1 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h1><p><img src="img.png" alt="img.png"></p><blockquote><p>本节将做一个命令行交互界面,生成乐队名称<br><img src="img_1.png" alt="本节项目演示地址"></p></blockquote><h2 id="print-打印"><a href="#print-打印" class="headerlink" title="print() 打印"></a>print() 打印</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span></code></pre><h2 id="input-接收输入"><a href="#input-接收输入" class="headerlink" title="input() 接收输入"></a>input() 接收输入</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello "</span> <span class="token operator">+</span> input<span class="token punctuation">(</span><span class="token string">"What is your name? "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="作业-1-3-打印输入的字符串的长度"><a href="#作业-1-3-打印输入的字符串的长度" class="headerlink" title="作业 1.3 打印输入的字符串的长度"></a>作业 1.3 打印输入的字符串的长度</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"What is your name? "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="variable-变量"><a href="#variable-变量" class="headerlink" title="variable 变量"></a>variable 变量</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># variable</span>name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"What is your name? "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">"柯莱"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> </code></pre><h2 id="1-4-练习"><a href="#1-4-练习" class="headerlink" title="1.4 练习"></a>1.4 练习</h2><h3 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h3><pre><code>a=1b=2c=aa=bb=cprint(a)print(b)</code></pre><h2 id="项目-乐队名称生成器"><a href="#项目-乐队名称生成器" class="headerlink" title="项目: 乐队名称生成器"></a>项目: 乐队名称生成器</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Project_Band Name Generator </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome to the band name generator."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># \n可以让输入的位置变到下一行(而不是和input输出的语句在同一行)</span>city <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Which city did you grow up in? \n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(city)</span>pet <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"What is the name of a pet? \n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(pet)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your band name could be "</span> <span class="token operator">+</span> city <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> pet<span class="token punctuation">)</span></code></pre><p><img src="img_2.png" alt="测试"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udemy-Python数据科学和机器学习训练营</title>
      <link href="/2023/02/12/udemy-python-shu-ju-ke-xue-he-ji-qi-xue-xi-xun-lian-ying/udemy-python-shu-ju-ke-xue-he-ji-qi-xue-xi-xun-lian-ying/udemy-python-shu-ju-ke-xue-he-ji-qi-xue-xi-xun-lian-ying/"/>
      <url>/2023/02/12/udemy-python-shu-ju-ke-xue-he-ji-qi-xue-xi-xun-lian-ying/udemy-python-shu-ju-ke-xue-he-ji-qi-xue-xi-xun-lian-ying/udemy-python-shu-ju-ke-xue-he-ji-qi-xue-xi-xun-lian-ying/</url>
      
        <content type="html"><![CDATA[<h1 id="数据科学"><a href="#数据科学" class="headerlink" title="数据科学"></a>数据科学</h1><blockquote><p>从数据提取价值</p></blockquote><ol><li><strong>data engineer</strong> 收集数据</li><li><strong>data scientist</strong> 分析,可视化</li><li><strong>machine learning expert</strong> 智能算法分析新数据, 得出结论</li></ol><p><img src="5C1676184385567.png" alt="1676184385567"></p><h1 id="用数据科学解决问题-线性回归"><a href="#用数据科学解决问题-线性回归" class="headerlink" title="用数据科学解决问题 + 线性回归"></a>用数据科学解决问题 + 线性回归</h1><blockquote><p>线性回归 -&gt; 建模, 发现潜在联系</p></blockquote><p>数据分析科学家会: </p><ol><li><strong>formulate question</strong> 提出要回答的问题</li><li><strong>gather data</strong> 收集(有助于回答问题的)数据</li><li><strong>clean data</strong> 清理无用数据(噪声)</li><li><strong>explore &amp; visualise</strong> 探究与可视化</li><li><strong>train algorithm</strong> 训练算法 (本节的算法是线性回归)</li><li><strong>evaluate</strong> 评估结果</li></ol><p><img src="5C1676185079157.png" alt="数据科学步骤"></p><h2 id="step1-一个好问题"><a href="#step1-一个好问题" class="headerlink" title="step1 一个好问题"></a>step1 一个好问题</h2><ul><li>我的电影能赚多少💴 =&gt; 不是好问题, 太模糊fake了, 金钱money的定义?</li><li>我的电影可以赚多少收入(revenue) =&gt; 比金钱money更具体, 可以更好地定量分析(测量, 追踪)</li><li>我们可以使用电影预算来预测电影收入吗 =&gt; 多了一个x自变量, 他是可测试的(可以检查预算x和收入y是否存在关系) , 这里的<strong>y</strong>就是<strong>dependent variable <strong>或 机器学习中的</strong>target</strong>, 而<strong>x</strong>则是 <strong>independent variable</strong> 或 机器学习中的 <strong>feature</strong></li></ul><p><img src="5C1676185484462.png" alt="1676185484462"></p><h2 id="step2-收集数据"><a href="#step2-收集数据" class="headerlink" title="step2 收集数据"></a>step2 收集数据</h2><ol><li><strong>data on feature</strong> 自变量x 电影预算</li><li><strong>data on target</strong> 因变量y 电影收入</li></ol><p><img src="5C1676185936970.png" alt="1676185936970"></p><h3 id="去哪获取数据-the-numbers"><a href="#去哪获取数据-the-numbers" class="headerlink" title="去哪获取数据? the numbers"></a>去哪获取数据? the numbers</h3><p><a href="https://www.the-numbers.com/">the numbers</a></p><p><a href="https://www.the-numbers.com/movie/budgets/all">budgets</a></p><p><img src="5C1676186758255.png" alt="课程资料的csv文件"></p><p><img src="5C1676186853728.png" alt="存在空数据,需要进行处理"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote><p>数据 -&gt; 排序和筛选 -&gt; 不需要包含标题 -&gt; 排序列 -&gt; 排序</p></blockquote><p><img src="5C1676187177869.png" alt="1676187177869"></p><blockquote><p>为0的数据可能是因为从未上映(没有数据) 或 数据有问题/争议</p></blockquote><p><img src="5C1676187203915.png" alt="排序结果"></p><h2 id="step3-清理数据"><a href="#step3-清理数据" class="headerlink" title="step3 清理数据"></a>step3 清理数据</h2><ol><li><p>选取所有含0数据的项 -&gt; 右键删除</p></li><li><p>删除前三列和最后一列,留下Production Budget和Worldwide Gross, 因为对计算没有用</p></li><li><p>将$x,000,000 格式转为纯数字格式</p></li><li><p>重命名列名(去掉特殊符号)</p></li></ol><p><img src="5C1676188509895.png" alt="转换格式"></p><p><img src="5C1676188624574.png" alt="1676188624574"><img src="5C1676188639640.png" alt="1676188639640"></p><p><img src="5C1676188831845.png" alt="列名"></p><p><img src="5C1676188889862.png" alt="数据清洗步骤"></p><h2 id="step4-可视化数据"><a href="#step4-可视化数据" class="headerlink" title="step4 可视化数据"></a>step4 可视化数据</h2><h3 id="使用Jupyter"><a href="#使用Jupyter" class="headerlink" title="使用Jupyter"></a>使用Jupyter</h3><p><img src="img.png" alt="img.png"></p><h4 id="shift-enter-gt-执行代码"><a href="#shift-enter-gt-执行代码" class="headerlink" title="shift+enter => 执行代码"></a>shift+enter =&gt; 执行代码</h4><h4 id="将csv文件上传到jupyter"><a href="#将csv文件上传到jupyter" class="headerlink" title="将csv文件上传到jupyter"></a>将csv文件上传到jupyter</h4><p><img src="img_2.png" alt="upload"></p><h3 id="使用pandas读取csv"><a href="#使用pandas读取csv" class="headerlink" title="使用pandas读取csv"></a>使用pandas读取csv</h3><p><img src="img_3.png" alt="img_3.png"><br><img src="img_4.png" alt="读取"><br><img src="img_5.png" alt="得到data的一些汇总统计数据"> </p><h4 id="Linear-Regression-ipynb"><a href="#Linear-Regression-ipynb" class="headerlink" title="Linear Regression.ipynb"></a>Linear Regression.ipynb</h4><pre class=" language-jupyter"><code class="language-jupyter">#%%import pandas #%%data = pandas.read_csv('008 cost-revenue-clean.csv')#%%data#%%data.describe()#%%from pandas import DataFrame#%%# 拆分datax = DataFrame(data,columns=['production_budget_usd'])y = DataFrame(data,columns=['worldwide_gross_usd'])#%%# 绘图import matplotlib.pyplot as plt#%%# 散点图# 图像大小plt.figure(figsize=(10,6))# alpha: 透明度plt.scatter(x,y,alpha=0.3) # matplotlib.pyplot.scatter(x,y)# matplotlib.pyplot.show()plt.title('File Cost vs Global Revenue') # 图表标题plt.xlabel('Production Budget $') # x轴标签plt.ylabel('Worldwide Gross $')# 设置y轴的最小值和最大值plt.ylim(0,3000000000)plt.xlim(0,450000000)plt.show()#%% </code></pre><p><img src="img_6.png" alt="散点图"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 数据科学 </category>
          
          <category> ai </category>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> ai </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3实现低代码编辑器</title>
      <link href="/2023/02/07/vue3-shi-xian-di-dai-ma-bian-ji-qi/vue3-shi-xian-di-dai-ma-bian-ji-qi/vue3-shi-xian-di-dai-ma-bian-ji-qi/"/>
      <url>/2023/02/07/vue3-shi-xian-di-dai-ma-bian-ji-qi/vue3-shi-xian-di-dai-ma-bian-ji-qi/vue3-shi-xian-di-dai-ma-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="img.png" alt="低代码的作用"></p><h1 id="拖拽编辑器搭建"><a href="#拖拽编辑器搭建" class="headerlink" title="拖拽编辑器搭建"></a>拖拽编辑器搭建</h1><pre class=" language-shell"><code class="language-shell">vue create low-codeyarn add element-plus</code></pre><p><img src="img_1.png" alt="img_1.png"><br><img src="img_2.png" alt="img_2.png"><br><img src="img_3.png" alt="img_3.png"></p><blockquote><p>把拖曳组件的数据保存到一个json文件里</p></blockquote><h1 id="package"><a href="#package" class="headerlink" title="package/"></a>package/</h1><h2 id="editor-block-jsx"><a href="#editor-block-jsx" class="headerlink" title="editor-block.jsx"></a>editor-block.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    block<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Object <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> blockStyles <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      top<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>top<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">,</span>      left<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span><span class="token punctuation">,</span>      zIndex<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>zIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 根据key获取组件</span>      <span class="token keyword">const</span> component <span class="token operator">=</span> config<span class="token punctuation">.</span>componentMap<span class="token punctuation">[</span>props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取渲染组件</span>      <span class="token keyword">const</span> RenderComponent <span class="token operator">=</span> component<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-block<span class="token punctuation">"</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>blockStyles<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span>RenderComponent<span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h2 id="editor-jsx"><a href="#editor-jsx" class="headerlink" title="editor.jsx"></a>editor.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./editor.scss"</span><span class="token punctuation">;</span><span class="token keyword">import</span> EditorBlock <span class="token keyword">from</span> <span class="token string">"./editor-block"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收父级传来的数据</span>    modelValue<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Object <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> props<span class="token punctuation">.</span>modelValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(props.data);</span>    <span class="token comment" spellcheck="true">// console.log(props.modelValue);</span>    <span class="token comment" spellcheck="true">// console.log(data.value);</span>    <span class="token keyword">const</span> containerStyles <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      width<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 根据注册列表,渲染物料区 */</span><span class="token punctuation">}</span>          <span class="token punctuation">{</span>config<span class="token punctuation">.</span>componentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-left-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>component<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>component<span class="token punctuation">.</span><span class="token function">preview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性控制栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 负责产生滚动条 */</span><span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-container-canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 产生内容区域 */</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-container-canvas__content<span class="token punctuation">"</span></span>              <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>containerStyles<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span>            <span class="token punctuation">></span></span>              <span class="token punctuation">{</span>data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditorBlock</span> <span class="token attr-name">block</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>block<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EditorBlock</span><span class="token punctuation">></span></span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h2 id="editor-scss"><a href="#editor-scss" class="headerlink" title="editor.scss"></a>editor.scss</h2><pre class=" language-scss"><code class="language-scss"><span class="token selector">.editor </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token selector"><span class="token parent important">&amp;</span>-left,    <span class="token parent important">&amp;</span>-right </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">270</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token parent important">&amp;</span>-left </span><span class="token punctuation">{</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token selector"><span class="token parent important">&amp;</span>-item </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span>            <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token selector">> span </span><span class="token punctuation">{</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>                <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">96</span>, <span class="token number">205</span>, <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">4</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">{</span>                <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>                <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>                <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token parent important">&amp;</span>-right </span><span class="token punctuation">{</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token parent important">&amp;</span>-top </span><span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">280</span>px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">280</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token parent important">&amp;</span>-container </span><span class="token punctuation">{</span>        <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">80</span>px <span class="token number">270</span>px <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token selector"><span class="token parent important">&amp;</span>-canvas </span><span class="token punctuation">{</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token selector"><span class="token parent important">&amp;</span>__content </span><span class="token punctuation">{</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// width: 550px;</span>                <span class="token comment" spellcheck="true">// height: 550px;</span>                <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>                <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.editor-block </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h1 id="utils"><a href="#utils" class="headerlink" title="utils/"></a>utils/</h1><h2 id="editor-config-jsx"><a href="#editor-config-jsx" class="headerlink" title="editor-config.jsx"></a>editor-config.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 列表区,可以显示所有的物料</span><span class="token comment" spellcheck="true">// key对应的组件映射关系</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ElButton<span class="token punctuation">,</span> ElInput <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"element-plus"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createEditorConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> componentList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> componentMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    componentList<span class="token punctuation">,</span>    componentMap<span class="token punctuation">,</span>    register<span class="token punctuation">:</span> <span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 存放</span>      componentList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>      componentMap<span class="token punctuation">[</span>component<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">let</span> registerConfig <span class="token operator">=</span> <span class="token function">createEditorConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>registerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注册组件,渲染物料区的示例组件</span>registerConfig<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  label<span class="token punctuation">:</span> <span class="token string">"文本"</span><span class="token punctuation">,</span>  preview<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"预览文本"</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"渲染文本"</span><span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registerConfig<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  label<span class="token punctuation">:</span> <span class="token string">"按钮"</span><span class="token punctuation">,</span>  preview<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ElButton</span><span class="token punctuation">></span></span>预览<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ElButton</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ElButton</span><span class="token punctuation">></span></span>渲染按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ElButton</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token string">"button"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registerConfig<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  label<span class="token punctuation">:</span> <span class="token string">"输入框"</span><span class="token punctuation">,</span>  preview<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ElInput</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>预览输入框<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ElInput</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ElInput</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>渲染输入框<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ElInput</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token string">"input"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h1 id="src"><a href="#src" class="headerlink" title="src/"></a>src/</h1><h2 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h2><pre class=" language-vue"><code class="language-vue"><template>  <div class="app">    <Editor v-model="state"></Editor>  </div></template><script>import { provide, ref } from "vue";// 编辑器的设置和代码块的数据import data from "./data.json";import Editor from "./package/editor";import { registerConfig as config } from "./utils/editor-config";export default {    components: {    Editor,  },  setup() {    // console.log(data);    const state = ref(data);    // console.log(state.value);    // 暴露组件(物料)的配置    provide("config", config);    return { state };  },};</script><style lang="scss" scoped>.app {  position: fixed;  top: 20px;  left: 20px;  right: 20px;  bottom: 20px;}</style> </code></pre><h2 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"container"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"width"</span><span class="token operator">:</span> <span class="token number">550</span><span class="token punctuation">,</span>        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token number">550</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"blocks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"top"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token property">"left"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token property">"zIndex"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"text"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"top"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token property">"left"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            <span class="token property">"zIndex"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"button"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"top"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            <span class="token property">"left"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>            <span class="token property">"zIndex"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"input"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span> <span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">'element-plus'</span><span class="token keyword">import</span> <span class="token string">'element-plus/dist/index.css'</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span> </code></pre><h1 id="拖拽的实现"><a href="#拖拽的实现" class="headerlink" title="拖拽的实现"></a>拖拽的实现</h1><blockquote><p>drag,h5提供的</p></blockquote><pre class=" language-shell"><code class="language-shell"># 用于深度拷贝 yarn add deepcopy --registry=https://registry.npmmirror.com</code></pre><p><img src="img_4.png" alt="vue3语法糖"></p><h2 id="package-1"><a href="#package-1" class="headerlink" title="package"></a>package</h2><h3 id="editor-block-jsx-1"><a href="#editor-block-jsx-1" class="headerlink" title="editor-block.jsx"></a>editor-block.jsx</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    block<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Object <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> blockStyles <span class="token operator">=</span> <span class="token operator">...</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(config);</span>    <span class="token keyword">const</span> blockRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// new -> 拖拽释放后居中</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 拖拽放入时,获取该元素</span>      <span class="token comment" spellcheck="true">// console.log(blockRef.value);</span>      <span class="token keyword">let</span> <span class="token punctuation">{</span> offsetWidth<span class="token punctuation">,</span> offsetHeight <span class="token punctuation">}</span> <span class="token operator">=</span> blockRef<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 有这个属性,说明是拖拽松手放置的,要居中(渲染后鼠标在这个组件正中间)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>alignCenter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>left <span class="token operator">=</span> props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>left <span class="token operator">-</span> offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>top <span class="token operator">=</span> props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>top <span class="token operator">-</span> offsetHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span>block<span class="token punctuation">.</span>alignCenter <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// new </span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="editor-jsx-1"><a href="#editor-jsx-1" class="headerlink" title="editor.jsx"></a>editor.jsx</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./editor.scss"</span><span class="token punctuation">;</span><span class="token keyword">import</span> EditorBlock <span class="token keyword">from</span> <span class="token string">"./editor-block"</span><span class="token punctuation">;</span><span class="token keyword">import</span> deepcopy <span class="token keyword">from</span> <span class="token string">"deepcopy"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useMenuDrager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useMenuDragger"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useFocus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useFocus"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useBlockDragger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useBlockDragger"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收父级传来的数据</span>    <span class="token comment" spellcheck="true">// v-model是语法糖,其传进来的props名称就是modelValue</span>    <span class="token comment" spellcheck="true">// &lt;input modelValue="xxx" @change="xxx" /></span>    modelValue<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Object <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  emits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 要触发的事件</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> props<span class="token punctuation">.</span>modelValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(newValue);</span>        <span class="token comment" spellcheck="true">// 触发事件更新数据,(v-model语法糖提供的)</span>        ctx<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"update:modelValue"</span><span class="token punctuation">,</span> <span class="token function">deepcopy</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(props.data);</span>    <span class="token comment" spellcheck="true">// console.log(props.modelValue);</span>    <span class="token comment" spellcheck="true">// console.log(data.value);</span>    <span class="token keyword">const</span> containerStyles <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      width<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> containerRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取内容区域对应的dom元素</span>    <span class="token comment" spellcheck="true">// 1,实现菜单拖拽功能</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> dragstart<span class="token punctuation">,</span> dragend <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMenuDrager</span><span class="token punctuation">(</span>containerRef<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2,实现获取焦点</span>    <span class="token comment" spellcheck="true">// 实现组件拖拽</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> blockMousedown<span class="token punctuation">,</span> focusData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFocus</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 有可能选中后直接进行拖拽</span>      <span class="token comment" spellcheck="true">// console.log(focusData.value.focus);</span>      <span class="token function">mousedown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3,实现拖拽多个元素的功能</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> mousedown <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useBlockDragger</span><span class="token punctuation">(</span>focusData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 收集获取和没有获取焦点的组件(block)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 根据注册列表,渲染物料区,可以实现h5的拖拽 */</span><span class="token punctuation">}</span>          <span class="token punctuation">{</span>config<span class="token punctuation">.</span>componentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div              draggable              <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-left-item"</span>              onDrag<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dragstart</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// onDragEnd={dragend} 原生的无法绑定,不知道为啥</span>            <span class="token operator">></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>component<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>component<span class="token punctuation">.</span><span class="token function">preview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-top<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>菜单栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性控制栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 负责产生滚动条 */</span><span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>editor-container-canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 产生内容区域 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>div              <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-container-canvas__content"</span>              ref<span class="token operator">=</span><span class="token punctuation">{</span>containerRef<span class="token punctuation">}</span>              style<span class="token operator">=</span><span class="token punctuation">{</span>containerStyles<span class="token punctuation">.</span>value<span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 点击组件以外的内容区,可以把focus取消</span>              <span class="token comment" spellcheck="true">// onMouseDown={containerMouseDown}</span>            <span class="token operator">></span>              <span class="token punctuation">{</span>data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>EditorBlock                  <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>block<span class="token punctuation">.</span>focus <span class="token operator">?</span> <span class="token string">"editor-block-focus"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// focus的话需要添加样式</span>                  block<span class="token operator">=</span><span class="token punctuation">{</span>block<span class="token punctuation">}</span>                  onMousedown<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">blockMousedown</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token operator">></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EditorBlock</span><span class="token punctuation">></span></span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h3 id="editor-scss-1"><a href="#editor-scss-1" class="headerlink" title="editor.scss"></a>editor.scss</h3><pre class=" language-scss"><code class="language-scss"><span class="token selector">.editor </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//......</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加一个伪类</span><span class="token selector">.editor-block </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 防止被选中</span>    <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.editor-block-focus </span><span class="token punctuation">{</span>    <span class="token selector"><span class="token parent important">&amp;</span>::after </span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 虚线</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">3</span>px dashed red<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="useBlockDragger-js"><a href="#useBlockDragger-js" class="headerlink" title="useBlockDragger.js"></a>useBlockDragger.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useBlockDragger</span><span class="token punctuation">(</span>focusData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 记录起始位置</span>    <span class="token keyword">let</span> dragState <span class="token operator">=</span> <span class="token punctuation">{</span>        startX<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        startY<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mouseup <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> mouseup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mousemove <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取移动后的距离</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> clientX<span class="token punctuation">:</span> moveX<span class="token punctuation">,</span> clientY<span class="token punctuation">:</span> moveY <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">let</span> durX <span class="token operator">=</span> moveX <span class="token operator">-</span> dragState<span class="token punctuation">.</span>startX<span class="token punctuation">;</span>        <span class="token keyword">let</span> durY <span class="token operator">=</span> moveY <span class="token operator">-</span> dragState<span class="token punctuation">.</span>startY<span class="token punctuation">;</span>        focusData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>focus<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            block<span class="token punctuation">.</span>top <span class="token operator">=</span> dragState<span class="token punctuation">.</span>startPos<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>top <span class="token operator">+</span> durY<span class="token punctuation">;</span>            block<span class="token punctuation">.</span>left <span class="token operator">=</span> dragState<span class="token punctuation">.</span>startPos<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>left <span class="token operator">+</span> durX<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mousedown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        dragState <span class="token operator">=</span> <span class="token punctuation">{</span>            startX<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>            startY<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 记录每一个选中的位置</span>            startPos<span class="token punctuation">:</span> focusData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>focus<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> top<span class="token punctuation">,</span> left <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> top<span class="token punctuation">,</span> left <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> mouseup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        mousedown    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="useFocus-js"><a href="#useFocus-js" class="headerlink" title="useFocus.js"></a>useFocus.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFocus</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取哪些元素被选中</span>  <span class="token keyword">const</span> focusData <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> focus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> unfocused <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>block<span class="token punctuation">.</span>focus <span class="token operator">?</span> focus <span class="token punctuation">:</span> unfocused<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      focus<span class="token punctuation">,</span>      unfocused<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clearBlockFocus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Mousedown事件仅需要按键被按下，而不需要松开即可发生</span>  <span class="token keyword">const</span> blockMousedown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// block上我们定义一个属性focus,获取焦点后就将focus变为true</span>    <span class="token comment" spellcheck="true">// 如果是按住shift的情况,就可以多选</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token operator">!</span>block<span class="token punctuation">.</span>focus<span class="token punctuation">;</span>      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">.</span>focus<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearBlockFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要清空其他block的focus,实现单选</span>      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> containerMouseDown <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">clearBlockFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 点击容器,让选中的block失去焦点</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 不知道为啥直接onxxxx绑定失效了</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document      <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".editor-container-canvas__content"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousedown"</span><span class="token punctuation">,</span> containerMouseDown<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    blockMousedown<span class="token punctuation">,</span>    focusData<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="useMenuDragger-js"><a href="#useMenuDragger-js" class="headerlink" title="useMenuDragger.js"></a>useMenuDragger.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useMenuDrager</span><span class="token punctuation">(</span>containerRef<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> currentComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记录拖拽的组件,drop时渲染</span>  <span class="token keyword">const</span> dragenter <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"enter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该属性控制在拖放操作中给用户的反馈（通常是视觉上的）。它会影响在拖拽过程中光标的手势</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">"move"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dragover <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// !!!</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dragleave <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"leave"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span>dropEffect <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> drop <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> blocks <span class="token operator">=</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内部已经渲染的组件</span>    <span class="token comment" spellcheck="true">// console.log(data.value);</span>    <span class="token comment" spellcheck="true">// 更新组件的属性</span>    data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>data<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      blocks<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token operator">...</span>blocks<span class="token punctuation">,</span>        <span class="token punctuation">{</span>          top<span class="token punctuation">:</span> e<span class="token punctuation">.</span>offsetY<span class="token punctuation">,</span>          left<span class="token punctuation">:</span> e<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span>          zIndex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          key<span class="token punctuation">:</span> currentComponent<span class="token punctuation">.</span>key<span class="token punctuation">,</span>          alignCenter<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 松手时居中</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    currentComponent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dragstart <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// dragenter进入元素,添加移动标识</span>    <span class="token comment" spellcheck="true">// dragover经过元素,要阻止默认行为,负责不能触发drop</span>    <span class="token comment" spellcheck="true">// dragleave离开元素,增加禁用标识</span>    <span class="token comment" spellcheck="true">// drop松手时,根据拖拽的组件添加到内容区</span>    <span class="token comment" spellcheck="true">// console.log(containerRef.value);</span>    <span class="token comment" spellcheck="true">// e.dataTransfer.dropEffect = "move";</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> dragover<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragenter"</span><span class="token punctuation">,</span> dragenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragleave"</span><span class="token punctuation">,</span> dragleave<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> drop<span class="token punctuation">)</span><span class="token punctuation">;</span>    currentComponent <span class="token operator">=</span> component<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document      <span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".editor-left-item"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"dragend"</span><span class="token punctuation">,</span> dragend<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 拖拽结束,清理事件</span>  <span class="token keyword">const</span> dragend <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"end! remove listener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"dragover"</span><span class="token punctuation">,</span> dragover<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"dragenter"</span><span class="token punctuation">,</span> dragenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"dragleave"</span><span class="token punctuation">,</span> dragleave<span class="token punctuation">)</span><span class="token punctuation">;</span>    containerRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"drop"</span><span class="token punctuation">,</span> drop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    dragstart<span class="token punctuation">,</span>    dragend<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="img_5.png" alt="img_5.png"></p><h1 id="实现拖动的辅助线效果"><a href="#实现拖动的辅助线效果" class="headerlink" title="实现拖动的辅助线效果"></a>实现拖动的辅助线效果</h1><p><img src="img_6.png" alt="img_6.png"><img src="img_7.png" alt="img_7.png"></p><h2 id="useBlockDragger-js-1"><a href="#useBlockDragger-js-1" class="headerlink" title="useBlockDragger.js"></a>useBlockDragger.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span> <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useBlockDragger</span><span class="token punctuation">(</span>focusData<span class="token punctuation">,</span> lastSelectBlock<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 记录起始位置</span>    <span class="token keyword">let</span> dragState <span class="token operator">=</span> <span class="token punctuation">{</span>        startX<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        startY<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 响应式,让x,y双向绑定</span>    <span class="token keyword">let</span> markline <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        x<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        y<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> mouseup <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> mouseup<span class="token punctuation">)</span><span class="token punctuation">;</span>        markline<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token keyword">null</span>        markline<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mousemove <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取移动后的距离</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> clientX<span class="token punctuation">:</span> moveX<span class="token punctuation">,</span> clientY<span class="token punctuation">:</span> moveY <span class="token punctuation">}</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算最新的left和top,去lines里找要显示的线</span>        <span class="token comment" spellcheck="true">// 鼠标移动后 - 鼠标移动前 + left</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> moveX <span class="token operator">-</span> dragState<span class="token punctuation">.</span>startX <span class="token operator">+</span> dragState<span class="token punctuation">.</span>startLeft        <span class="token keyword">let</span> top <span class="token operator">=</span> moveY <span class="token operator">-</span> dragState<span class="token punctuation">.</span>startY <span class="token operator">+</span> dragState<span class="token punctuation">.</span>startTop        <span class="token comment" spellcheck="true">// 计算线 距离参照物还有5px就显示</span>        <span class="token keyword">let</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dragState<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>y<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> top<span class="token punctuation">:</span> t<span class="token punctuation">,</span> showTop<span class="token punctuation">:</span> s <span class="token punctuation">}</span> <span class="token operator">=</span> dragState<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>t <span class="token operator">-</span> top<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                y <span class="token operator">=</span> s <span class="token comment" spellcheck="true">// 线要显示的位置</span>                <span class="token comment" spellcheck="true">// 实现快速贴合</span>                <span class="token comment" spellcheck="true">// 容器距离顶部的距离+目标高度</span>                moveY <span class="token operator">=</span> dragState<span class="token punctuation">.</span>startY <span class="token operator">-</span> dragState<span class="token punctuation">.</span>startTop <span class="token operator">+</span> t                <span class="token keyword">break</span> <span class="token comment" spellcheck="true">// 找到一根线就跳出循环   </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dragState<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> <span class="token punctuation">{</span> left<span class="token punctuation">:</span> l<span class="token punctuation">,</span> showLeft<span class="token punctuation">:</span> s <span class="token punctuation">}</span> <span class="token operator">=</span> dragState<span class="token punctuation">.</span>lines<span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>l <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x <span class="token operator">=</span> s <span class="token comment" spellcheck="true">// 线要显示的位置</span>                <span class="token comment" spellcheck="true">// 实现快速贴合</span>                <span class="token comment" spellcheck="true">// 容器距离顶部的距离+目标高度</span>                moveX <span class="token operator">=</span> dragState<span class="token punctuation">.</span>startX <span class="token operator">-</span> dragState<span class="token punctuation">.</span>startLeft <span class="token operator">+</span> l                <span class="token keyword">break</span> <span class="token comment" spellcheck="true">// 找到一根线就跳出循环   </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现视图更新</span>        markline<span class="token punctuation">.</span>x <span class="token operator">=</span> x        markline<span class="token punctuation">.</span>y <span class="token operator">=</span> y        <span class="token comment" spellcheck="true">// .....</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mousedown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取宽高</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> width<span class="token punctuation">:</span> BWidth<span class="token punctuation">,</span> height<span class="token punctuation">:</span> BHeight <span class="token punctuation">}</span> <span class="token operator">=</span> lastSelectBlock<span class="token punctuation">.</span>value <span class="token comment" spellcheck="true">// 拖拽的最后一个元素</span>        dragState <span class="token operator">=</span> <span class="token punctuation">{</span>            startX<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">,</span>            startY<span class="token punctuation">:</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">,</span>            startTop<span class="token punctuation">:</span> lastSelectBlock<span class="token punctuation">.</span>value<span class="token punctuation">.</span>top<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 拖拽前的位置    </span>            startLeft<span class="token punctuation">:</span> lastSelectBlock<span class="token punctuation">.</span>value<span class="token punctuation">.</span>left<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 记录每一个选中的位置</span>            startPos<span class="token punctuation">:</span> focusData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>focus<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> top<span class="token punctuation">,</span> left <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> top<span class="token punctuation">,</span> left <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            lines<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> <span class="token punctuation">{</span> unfocused <span class="token punctuation">}</span> <span class="token operator">=</span> focusData<span class="token punctuation">.</span>value <span class="token comment" spellcheck="true">// 获取其他没选中的,以它们的位置做辅助</span>                <span class="token keyword">let</span> lines <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 计算横线的位置用y存放 x存纵向</span>                unfocused<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                    width<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>width<span class="token punctuation">,</span>                    height<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>height                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// console.log(unfocused)</span>                unfocused<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                    <span class="token keyword">const</span> <span class="token punctuation">{</span> top<span class="token punctuation">:</span> ATop<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ALeft<span class="token punctuation">,</span> width<span class="token punctuation">:</span> AWidth<span class="token punctuation">,</span> height<span class="token punctuation">:</span> AHeight <span class="token punctuation">}</span> <span class="token operator">=</span> block                    <span class="token comment" spellcheck="true">// 当此元素拖动到A元素和top一致时,要显示这辅助线,辅助线的位置就是ATop</span>                    lines<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showTop<span class="token punctuation">:</span> ATop<span class="token punctuation">,</span> top<span class="token punctuation">:</span> ATop <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 顶对顶</span>                    lines<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showTop<span class="token punctuation">:</span> ATop<span class="token punctuation">,</span> top<span class="token punctuation">:</span> ATop <span class="token operator">-</span> BHeight <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 顶对底</span>                    lines<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showTop<span class="token punctuation">:</span> ATop <span class="token operator">+</span> AHeight <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span> ATop <span class="token operator">-</span> BHeight <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 中对中</span>                    lines<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showTop<span class="token punctuation">:</span> ATop <span class="token operator">+</span> AHeight<span class="token punctuation">,</span> top<span class="token punctuation">:</span> ATop <span class="token operator">+</span> AHeight <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 底对顶</span>                    lines<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showTop<span class="token punctuation">:</span> ATop <span class="token operator">+</span> AHeight<span class="token punctuation">,</span> top<span class="token punctuation">:</span> ATop <span class="token operator">+</span> AHeight <span class="token operator">+</span> BHeight <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 底对底</span>                    lines<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showLeft<span class="token punctuation">:</span> ALeft<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ALeft <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左对左</span>                    lines<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showLeft<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 右对左</span>                    lines<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showLeft<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> left<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> BWidth <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 中对中</span>                    lines<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showLeft<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth <span class="token operator">-</span> BWidth <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 右对右</span>                    lines<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> showLeft<span class="token punctuation">:</span> ALeft<span class="token punctuation">,</span> left<span class="token punctuation">:</span> ALeft <span class="token operator">+</span> AWidth <span class="token operator">-</span> BWidth <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 左对右</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// console.log(lines) </span>                <span class="token keyword">return</span> lines            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mousemove"</span><span class="token punctuation">,</span> mousemove<span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"mouseup"</span><span class="token punctuation">,</span> mouseup<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        mousedown<span class="token punctuation">,</span>        markline    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="useFocus-js-获取最后一个拖拽元素"><a href="#useFocus-js-获取最后一个拖拽元素" class="headerlink" title="useFocus.js 获取最后一个拖拽元素"></a>useFocus.js 获取最后一个拖拽元素</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useFocus</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> selectIndex <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 记录最后点击的组件的索引</span>  <span class="token keyword">const</span> lastSelectBlock <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">[</span>selectIndex<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 最后点击的元素</span>  <span class="token comment" spellcheck="true">// 获取哪些元素被选中</span>  <span class="token keyword">const</span> focusData <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> focus <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> unfocused <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>      <span class="token punctuation">(</span>block<span class="token punctuation">.</span>focus <span class="token operator">?</span> focus <span class="token punctuation">:</span> unfocused<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      focus<span class="token punctuation">,</span>      unfocused<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> clearBlockFocus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    selectIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Mousedown事件仅需要按键被按下，而不需要松开即可发生</span>  <span class="token keyword">const</span> blockMousedown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> block<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// block上我们定义一个属性focus,获取焦点后就将focus变为true</span>    <span class="token comment" spellcheck="true">// 如果是按住shift的情况,就可以多选</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>shiftKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果只有一个选中的block,每次点击时就不需要切换focus状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>focusData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>focus<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token boolean">true</span>        selectIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> index        <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token operator">!</span>block<span class="token punctuation">.</span>focus<span class="token punctuation">;</span>      selectIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> index      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">.</span>focus<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearBlockFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      block<span class="token punctuation">.</span>focus <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要清空其他block的focus,实现单选</span>      selectIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> index      <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// block.focus = false; // 已经被选中,则再次点击时还是选中状态</span>    selectIndex<span class="token punctuation">.</span>value <span class="token operator">=</span> index    <span class="token function">callback</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// .....</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    blockMousedown<span class="token punctuation">,</span>    focusData<span class="token punctuation">,</span>    lastSelectBlock  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="editor-js"><a href="#editor-js" class="headerlink" title="editor.js"></a>editor.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed<span class="token punctuation">,</span> defineComponent<span class="token punctuation">,</span> inject<span class="token punctuation">,</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./editor.scss"</span><span class="token punctuation">;</span><span class="token keyword">import</span> EditorBlock <span class="token keyword">from</span> <span class="token string">"./editor-block"</span><span class="token punctuation">;</span><span class="token keyword">import</span> deepcopy <span class="token keyword">from</span> <span class="token string">"deepcopy"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useMenuDrager <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useMenuDragger"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useFocus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useFocus"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useBlockDragger <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./useBlockDragger"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 接收父级传来的数据</span>    <span class="token comment" spellcheck="true">// v-model是语法糖,其传进来的props名称就是modelValue</span>    <span class="token comment" spellcheck="true">// &lt;input modelValue="xxx" @change="xxx" /></span>    modelValue<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> Object <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  emits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"update:modelValue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 要触发的事件</span>  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> props<span class="token punctuation">.</span>modelValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(newValue);</span>        <span class="token comment" spellcheck="true">// 触发事件更新数据,(v-model语法糖提供的)</span>        ctx<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"update:modelValue"</span><span class="token punctuation">,</span> <span class="token function">deepcopy</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// console.log(props.data);</span>    <span class="token comment" spellcheck="true">// console.log(props.modelValue);</span>    <span class="token comment" spellcheck="true">// console.log(data.value);</span>    <span class="token keyword">const</span> containerStyles <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      width<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>container<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> containerRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取内容区域对应的dom元素</span>    <span class="token comment" spellcheck="true">// 1,实现菜单拖拽功能</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> dragstart<span class="token punctuation">,</span> dragend <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMenuDrager</span><span class="token punctuation">(</span>containerRef<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2,实现获取焦点</span>    <span class="token comment" spellcheck="true">// 实现组件拖拽</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> blockMousedown<span class="token punctuation">,</span> focusData<span class="token punctuation">,</span> lastSelectBlock <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFocus</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 有可能选中后直接进行拖拽</span>      <span class="token comment" spellcheck="true">// console.log(focusData.value.focus);</span>      <span class="token function">mousedown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3,实现拖拽多个元素的功能</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> mousedown<span class="token punctuation">,</span> markline <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useBlockDragger</span><span class="token punctuation">(</span>      focusData<span class="token punctuation">,</span>      lastSelectBlock<span class="token punctuation">,</span>      data    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 收集获取和没有获取焦点的组件(block)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-left"</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 根据注册列表,渲染物料区,可以实现h5的拖拽 */</span><span class="token punctuation">}</span>          <span class="token punctuation">{</span>config<span class="token punctuation">.</span>componentList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div              draggable              <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-left-item"</span>              onDrag<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dragstart</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> component<span class="token punctuation">)</span><span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// onDragEnd={dragend} 原生的无法绑定,不知道为啥</span>            <span class="token operator">></span>              <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span>component<span class="token punctuation">.</span>label<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>              <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>component<span class="token punctuation">.</span><span class="token function">preview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-top"</span><span class="token operator">></span>菜单栏<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-right"</span><span class="token operator">></span>属性控制栏<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-container"</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 负责产生滚动条 */</span><span class="token punctuation">}</span>          <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-container-canvas"</span><span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 产生内容区域 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>div              <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"editor-container-canvas__content"</span>              ref<span class="token operator">=</span><span class="token punctuation">{</span>containerRef<span class="token punctuation">}</span>              style<span class="token operator">=</span><span class="token punctuation">{</span>containerStyles<span class="token punctuation">.</span>value<span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">// 点击组件以外的内容区,可以把focus取消</span>              <span class="token comment" spellcheck="true">// onMouseDown={containerMouseDown}</span>            <span class="token operator">></span>              <span class="token punctuation">{</span>data<span class="token punctuation">.</span>value<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>EditorBlock                  <span class="token keyword">class</span><span class="token operator">=</span><span class="token punctuation">{</span>block<span class="token punctuation">.</span>focus <span class="token operator">?</span> <span class="token string">"editor-block-focus"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// focus的话需要添加样式</span>                  block<span class="token operator">=</span><span class="token punctuation">{</span>block<span class="token punctuation">}</span>                  onMousedown<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">blockMousedown</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> block<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>EditorBlock<span class="token operator">></span>              <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>              <span class="token punctuation">{</span>markline<span class="token punctuation">.</span>x <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line-x"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> left<span class="token punctuation">:</span> markline<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">"px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token punctuation">)</span><span class="token punctuation">}</span>              <span class="token punctuation">{</span>markline<span class="token punctuation">.</span>y <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"line-y"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> top<span class="token punctuation">:</span> markline<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">"px"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="scss"><a href="#scss" class="headerlink" title="scss"></a>scss</h2><pre class=" language-scss"><code class="language-scss"><span class="token selector">.line-x </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">1</span>px dashed red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.line-y </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>px dashed red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> js </tag>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
            <tag> 低代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/02/06/shou-xie-pinia/shou-xie-pinia/"/>
      <url>/2023/02/06/shou-xie-pinia/shou-xie-pinia/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 手写pinia(一种思路)<br>date: 2023-02-06 18:32:05<br>tags: </p><ul><li>pinia</li><li>状态管理  </li><li>vue </li><li>js</li><li>javaScript</li><li>造轮子</li><li>框架</li><li>前端<br>categories: </li><li>pinia</li><li>状态管理  </li><li>vue </li><li>js</li><li>javaScript</li><li>造轮子</li><li>框架</li><li>前端<br>summary: ‘手写实现类似pinia的功能,来着B站up<strong>前端小野森森-1</strong>的视频’<br>description: ‘手写实现类似pinia的功能,来着B站up<strong>前端小野森森-1</strong>的视频’</li></ul><hr><h1 id="本笔记内容来自B站up前端小野森森-1的视频"><a href="#本笔记内容来自B站up前端小野森森-1的视频" class="headerlink" title="本笔记内容来自B站up前端小野森森-1的视频"></a>本笔记内容来自B站up<strong>前端小野森森-1</strong>的视频</h1><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre class=" language-shell"><code class="language-shell">vue create mypinia# 添加pinia依赖yarn add pinia </code></pre><p><img src="img.png" alt="项目结构"><br><img src="img_1.png" alt="main.js"></p><h2 id="store"><a href="#store" class="headerlink" title="store/"></a>store/</h2><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> useTodoListStore <span class="token keyword">from</span> <span class="token string">'./todoList'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    useTodoListStore<span class="token punctuation">}</span></code></pre><h3 id="todoList-js"><a href="#todoList-js" class="headerlink" title="todoList.js"></a>todoList.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'pinia'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">'todoList'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        todos<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// id: number text: string isFinished: boolean</span>        filter<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// finished unfinished</span>        nextId<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加todo</span>        <span class="token function">addTodo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                id<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">,</span>                text<span class="token punctuation">,</span>                isFinished<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 转换todo状态</span>        <span class="token function">toggleTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 找到要修改的todo</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>todo<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 转换状态    </span>                    todo<span class="token punctuation">.</span>isFinished <span class="token operator">=</span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isFinished                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> todo            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">removeTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 过滤id对应的元素</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>todos <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// state=>获取这里的state返回的数据</span>        <span class="token comment" spellcheck="true">// 获取所有已完成的</span>        <span class="token function">finishedTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 获取所有未完成的</span>        <span class="token function">undefinedTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>todo <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 获取不同状态的todos</span>        <span class="token function">filterTodos</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filter<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'finished'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>finishedTodos                <span class="token keyword">case</span> <span class="token string">'unfinished'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>undefinedTodos                <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTodoListStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store"</span><span class="token punctuation">;</span><span class="token keyword">const</span> todoListStore <span class="token operator">=</span> <span class="token function">useTodoListStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>todoListStore<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> </code></pre><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><blockquote><p>store里的东西(filter,todos…)是ObjectRefImpl<br>getter里的东西(finishedTodos…)是计算属性(computedRefImpl)</p></blockquote><p><img src="img_2.png" alt="img_2.png"></p><h1 id="先实现简单的todos程序"><a href="#先实现简单的todos程序" class="headerlink" title="先实现简单的todos程序"></a>先实现简单的todos程序</h1><h2 id="components-TodoList"><a href="#components-TodoList" class="headerlink" title="components/TodoList/"></a>components/TodoList/</h2><h3 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a>index.vue</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-tab</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-tab</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todos</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todos</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> TodoTab <span class="token keyword">from</span> <span class="token string">"./TodoTab"</span><span class="token punctuation">;</span><span class="token keyword">import</span> TodoForm <span class="token keyword">from</span> <span class="token string">"./TodoForm"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Todos <span class="token keyword">from</span> <span class="token string">"./Todos"</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="TodoForm-vue"><a href="#TodoForm-vue" class="headerlink" title="TodoForm.vue"></a>TodoForm.vue</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>      <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Please input something...<span class="token punctuation">"</span></span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inputRef<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addTodo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add Todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useTodoListStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store"</span><span class="token punctuation">;</span><span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定input框</span><span class="token keyword">const</span> todoListStore <span class="token operator">=</span> <span class="token function">useTodoListStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> inputRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  todoListStore<span class="token punctuation">.</span><span class="token function">addTodo</span><span class="token punctuation">(</span>inputRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加todo到全局状态</span>  inputRef<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清空内容</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="Todos-vue"><a href="#Todos-vue" class="headerlink" title="Todos.vue"></a>Todos.vue</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item of todoListStore.filterTodos<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>        <span class="token attr-name">:checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.isFinished<span class="token punctuation">"</span></span>        <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todoListStore.toggleTodo(item.id)<span class="token punctuation">"</span></span>      <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ finished: item.isFinished }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ item.text }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todoListStore.removeTodo(item.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTodoListStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store"</span><span class="token punctuation">;</span><span class="token keyword">const</span> todoListStore <span class="token operator">=</span> <span class="token function">useTodoListStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.finished</span> </span><span class="token punctuation">{</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> line-through<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="TodoTab-vue"><a href="#TodoTab-vue" class="headerlink" title="TodoTab.vue"></a>TodoTab.vue</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span>      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setFilter(<span class="token punctuation">'</span>all<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>      <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ active: todoListStore.filter <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>all<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>All<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span>      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setFilter(<span class="token punctuation">'</span>finished<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>      <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ active: todoListStore.filter <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>finished<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>Finished<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:;<span class="token punctuation">"</span></span>      <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setFilter(<span class="token punctuation">'</span>unfinished<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>      <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ active: todoListStore.filter <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>unfinished<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>UnFinished<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span>    <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTodoListStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store"</span><span class="token punctuation">;</span><span class="token keyword">const</span> todoListStore <span class="token operator">=</span> <span class="token function">useTodoListStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> setFilter <span class="token operator">=</span> <span class="token punctuation">(</span>filter<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  todoListStore<span class="token punctuation">.</span><span class="token function">$patch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filter <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.active</span> </span><span class="token punctuation">{</span>  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">a </span><span class="token punctuation">{</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="img_3.png" alt="img_3.png"></p><h1 id="手写pinia"><a href="#手写pinia" class="headerlink" title="手写pinia"></a>手写pinia</h1><p><img src="img_4.png" alt="main.js"><br><img src="img_6.png" alt="store/todoList.js"></p><blockquote><p>猜测: pinia会创建一个根store,所有用户定义的store都会挂到该父store上</p></blockquote><p><img src="img_5.png" alt="img_5.png"></p><h2 id="pinia"><a href="#pinia" class="headerlink" title="pinia/"></a>pinia/</h2><h3 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> createPinia <span class="token keyword">from</span> <span class="token string">'./createPinia'</span><span class="token keyword">import</span> defineStore <span class="token keyword">from</span> <span class="token string">'./defineStore'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    createPinia<span class="token punctuation">,</span>    defineStore<span class="token punctuation">}</span>   </code></pre><h3 id="createPinia-js"><a href="#createPinia-js" class="headerlink" title="createPinia.js"></a>createPinia.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span> <span class="token comment" spellcheck="true">// 接收一个普通对象然后返回该普通对象的响应式代理(嵌套的都会被代理)</span><span class="token keyword">import</span> <span class="token punctuation">{</span> patch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./apis'</span> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> piniaStore <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 暴露操作piniaStore的方法</span>    <span class="token keyword">function</span> <span class="token function">setSubStore</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> store<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> store            piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>$patch <span class="token operator">=</span> patch <span class="token comment" spellcheck="true">// 给子store添加patch方法</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> piniaStore    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">install</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建pinia实例</span>        <span class="token comment" spellcheck="true">// 暴露piniaStore</span>        <span class="token comment" spellcheck="true">// app.provide('piniaStore',piniaStore)        </span>        app<span class="token punctuation">.</span><span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'setSubStore'</span><span class="token punctuation">,</span> setSubStore<span class="token punctuation">)</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        install    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 可以被vue实例.use的,包含这种结构 *  * { *  install (app) {} * } */</span></code></pre><h3 id="defineStore-js"><a href="#defineStore-js" class="headerlink" title="defineStore.js"></a>defineStore.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> inject<span class="token punctuation">,</span> reactive<span class="token punctuation">,</span> toRef<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    createActions<span class="token punctuation">,</span>    createState<span class="token punctuation">,</span>    createGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./options'</span><span class="token comment" spellcheck="true">// 定义store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>    name<span class="token punctuation">,</span>    <span class="token punctuation">{</span>        state<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// function</span>        getters<span class="token punctuation">,</span>        actions    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建和挂载state</span>    state <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> state <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">createState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建和挂载actions</span>    actions <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">createActions</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> actions<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建和挂载getters</span>    getters <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>getters<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">createGetters</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> getters<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取暴露的setSubStore方法</span>        <span class="token keyword">const</span> setSubStore <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'setSubStore'</span><span class="token punctuation">)</span>        <span class="token keyword">const</span> piniaStore <span class="token operator">=</span> <span class="token function">setSubStore</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token function">reactive</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> piniaStore<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="pinia-options"><a href="#pinia-options" class="headerlink" title="pinia/options/"></a>pinia/options/</h2><h3 id="state-js"><a href="#state-js" class="headerlink" title="state.js"></a>state.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createState</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> _state <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指向state(一个函数),获取其返回值</span>    store<span class="token punctuation">.</span>$state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>_state<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// state转响应式,操作时就是操作他 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> _state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// key in (todos,filter,nextId)</span>        <span class="token comment" spellcheck="true">// 创建一个 ref 对象，其 value 值指向另一个对象中的某个属性</span>        <span class="token comment" spellcheck="true">// store.key.value == store.$state.key ($state.todos)</span>        store<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toRef</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="actions-js"><a href="#actions-js" class="headerlink" title="actions.js"></a>actions.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*    actions: {        // 添加todo        addTodo(text) {            this.todos.push({                id: this.nextId++,                text,                isFinished: false            })        },        ...    }*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createActions</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span>actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> method <span class="token keyword">in</span> actions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        store<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> actions<span class="token punctuation">[</span>method<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="getters-js"><a href="#getters-js" class="headerlink" title="getters.js"></a>getters.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token comment" spellcheck="true">/*        getters: {            // state=>获取这里的state             finishedTodos(state) {                return state.todos.filter(todo => todo.isFinished)            },        }        ...*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createGetters</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> getter <span class="token keyword">in</span> getters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// bind,把getter方法的this指向store.$state,并传一个参数</span>        store<span class="token punctuation">[</span>getter<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span>getters<span class="token punctuation">[</span>getter<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>$state<span class="token punctuation">,</span> store<span class="token punctuation">.</span>$state<span class="token punctuation">)</span><span class="token punctuation">)</span>        store<span class="token punctuation">.</span>$state<span class="token punctuation">[</span>getter<span class="token punctuation">]</span> <span class="token operator">=</span> store<span class="token punctuation">[</span>getter<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// state.xxx</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./state'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actions'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./getters'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>    createState<span class="token punctuation">,</span>    createActions<span class="token punctuation">,</span>    createGetters<span class="token punctuation">}</span></code></pre><h1 id="git仓库"><a href="#git仓库" class="headerlink" title="git仓库"></a>git仓库</h1><blockquote><p><a href="https://gitee.com/malguy/mypinia">https://gitee.com/malguy/mypinia</a><br><a href="https://github.com/malred/mypinia">https://github.com/malred/mypinia</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>手写redux(一种思路)</title>
      <link href="/2023/02/06/shou-xie-redux/shou-xie-redux/"/>
      <url>/2023/02/06/shou-xie-redux/shou-xie-redux/</url>
      
        <content type="html"><![CDATA[<h1 id="初始项目"><a href="#初始项目" class="headerlink" title="初始项目"></a>初始项目</h1><blockquote><p>使用原生的provider和context</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建上下文</span><span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>appState<span class="token punctuation">,</span> setAppState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化上下文</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 大儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    大儿子    <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 二儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    二儿子    <span class="token operator">&lt;</span>UserModifier <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>section<span class="token operator">></span>幺儿子<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// console.log(contextValue);</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span> <span class="token operator">=</span> contextValue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// const {appState, setAppState} = useContext(appContext)</span>  <span class="token comment" spellcheck="true">// console.log(contextValue)</span>  <span class="token comment" spellcheck="true">// console.log(appState)</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改上下文</span>    <span class="token function">setAppState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>contextValue<span class="token punctuation">.</span>appState <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><h1 id="手写reducer"><a href="#手写reducer" class="headerlink" title="手写reducer"></a>手写reducer</h1><blockquote><p>上文的代码中, 直接修改了state的原始内容, 不符合规范, 新增reducer来规范state创建流程 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建上下文</span><span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>appState<span class="token punctuation">,</span> setAppState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化上下文</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 大儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    大儿子    <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 二儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    二儿子    <span class="token operator">&lt;</span>UserModifier <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>section<span class="token operator">></span>幺儿子<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// console.log(contextValue);</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"updateUser"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>        <span class="token operator">...</span>payload<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其实payload就是data</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span> <span class="token operator">=</span> contextValue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// const {appState, setAppState} = useContext(appContext)</span>  <span class="token comment" spellcheck="true">// console.log(contextValue)</span>  <span class="token comment" spellcheck="true">// console.log(appState)</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// appState.user.name = e.target.value;</span>    <span class="token comment" spellcheck="true">// 修改上下文</span>    <span class="token comment" spellcheck="true">// setAppState({ ...contextValue.appState });</span>    <span class="token comment" spellcheck="true">// 不是直接修改,而是创建新的state</span>    <span class="token comment" spellcheck="true">// 传入旧的state,创建新的</span>    <span class="token function">setAppState</span><span class="token punctuation">(</span>      <span class="token function">reducer</span><span class="token punctuation">(</span>appState<span class="token punctuation">,</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"updateUser"</span><span class="token punctuation">,</span>        payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> </code></pre><h1 id="手写dispatch"><a href="#手写dispatch" class="headerlink" title="手写dispatch"></a>手写dispatch</h1><blockquote><p>修改state需要setxxx, 如果多次, 则会在onChange函数里添加太多的set逻辑, 我们将他抽取出来, 作为一个function, <strong>规范setState流程</strong> </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建上下文</span><span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>appState<span class="token punctuation">,</span> setAppState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化上下文</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 大儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    大儿子    <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 二儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    二儿子    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;UserModifier /> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>Wrapper <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>section<span class="token operator">></span>幺儿子<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// console.log(contextValue);</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"updateUser"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>        <span class="token operator">...</span>payload<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其实payload就是data</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span> <span class="token operator">=</span> contextValue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 规范setState流程</span>  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setAppState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>appState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>UserModifier dispatch<span class="token operator">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span> state<span class="token operator">=</span><span class="token punctuation">{</span>appState<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"updateUser"</span><span class="token punctuation">,</span>      payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="connect-高阶组件"><a href="#connect-高阶组件" class="headerlink" title="connect 高阶组件"></a>connect 高阶组件</h1><blockquote><p>高阶组件: 一个函数,接收一个组件,返回一个新组件,这个组件就是高阶组件<br>connect: 将组件和全局的state联系起来</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建上下文</span><span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>appState<span class="token punctuation">,</span> setAppState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化上下文</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 大儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    大儿子    <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 二儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>section<span class="token operator">></span>    二儿子    <span class="token operator">&lt;</span>UserModifier x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"x"</span><span class="token punctuation">}</span><span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>UserModifier<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Wrapper /> */</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>section<span class="token operator">></span>幺儿子<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// console.log(contextValue);</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>contextValue<span class="token punctuation">.</span>appState<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"updateUser"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>        <span class="token operator">...</span>payload<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其实payload就是data</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token keyword">const</span> connent <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> contextValue <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> appState<span class="token punctuation">,</span> setAppState <span class="token punctuation">}</span> <span class="token operator">=</span> contextValue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 规范setState流程</span>    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setAppState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>appState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> dispatch<span class="token operator">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span> state<span class="token operator">=</span><span class="token punctuation">{</span>appState<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入组件,将组件和全局state联系起来,就是connect的含义</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"updateUser"</span><span class="token punctuation">,</span>      payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="实现精准render"><a href="#实现精准render" class="headerlink" title="实现精准render"></a>实现精准render</h1><blockquote><p>当前每次都是重新渲染, 把没有改变的也更新了, 浪费性能(影响其实不大, 但是太多也不好)</p></blockquote><p><img src="5C1675999650847.png" alt="1675999701929"></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> <span class="token punctuation">{</span> update <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"lodash"</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建上下文</span><span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(newState); 没有调用组件的setState,所以不会刷新</span>    store<span class="token punctuation">.</span>state <span class="token operator">=</span> newState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历监听者列表,调用用户传入的(更新)方法</span>    store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 监听者</span>  listeners<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 让所有使用store的组件监听store的变化,实现更新渲染</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回取消订阅的函数</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 只要改变了组件(app)的state,其返回的所有组件都会重新执行</span>  <span class="token comment" spellcheck="true">// useMemo(() => {</span>  <span class="token comment" spellcheck="true">//   return &lt;幺儿子 />;</span>  <span class="token comment" spellcheck="true">// }, []); // 方案1: 使用缓存,传空数组表示以后不再更新</span>  <span class="token comment" spellcheck="true">// const [appState, setAppState] = useState({</span>  <span class="token comment" spellcheck="true">//   user: { name: "frank", age: 18 },</span>  <span class="token comment" spellcheck="true">// });</span>  <span class="token comment" spellcheck="true">// 初始化上下文</span>  <span class="token comment" spellcheck="true">// const contextValue = { appState, setAppState };</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 大儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>section<span class="token operator">></span>      大儿子      <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 二儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"二儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>section<span class="token operator">></span>      二儿子      <span class="token operator">&lt;</span>UserModifier x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"x"</span><span class="token punctuation">}</span><span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>UserModifier<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Wrapper /> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"三儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>section<span class="token operator">></span>幺儿子<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token keyword">const</span> connent <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在wrapper使用state,调用更新方法,可以实现更新</span>    <span class="token comment" spellcheck="true">// 而且wrapper包装的是用到state的组件,所以更新时不会影响其他组件</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const { appState, setAppState } = contextValue;</span>    <span class="token comment" spellcheck="true">// 只订阅一次</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 规范setState流程</span>    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// setAppState(reducer(appState, action));</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> dispatch<span class="token operator">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span> state<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>  <span class="token comment" spellcheck="true">// const { state } = useContext(appContext);</span>  <span class="token comment" spellcheck="true">// console.log(state);</span>  <span class="token comment" spellcheck="true">// console.log(contextValue);</span>  <span class="token comment" spellcheck="true">// return &lt;div>User:{contextValue.appState.user.name}&lt;/div>;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"updateUser"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>        <span class="token operator">...</span>payload<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其实payload就是data</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入组件,将组件和全局state联系起来,就是connect的含义</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"updateUser"</span><span class="token punctuation">,</span>      payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><img src="5C1676000932952.png" alt="1676000932952"></p><h1 id="redux乍现"><a href="#redux乍现" class="headerlink" title="redux乍现"></a>redux乍现</h1><h2 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token '&lt;'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> appContext<span class="token punctuation">,</span> store<span class="token punctuation">,</span> connent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./redux.jsx"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 只要改变了组件(app)的state,其返回的所有组件都会重新执行</span>  <span class="token comment" spellcheck="true">// useMemo(() => {</span>  <span class="token comment" spellcheck="true">//   return &lt;幺儿子 />;</span>  <span class="token comment" spellcheck="true">// }, []); // 方案1: 使用缓存,传空数组表示以后不再更新</span>  <span class="token comment" spellcheck="true">// const [appState, setAppState] = useState({</span>  <span class="token comment" spellcheck="true">//   user: { name: "frank", age: 18 },</span>  <span class="token comment" spellcheck="true">// });</span>  <span class="token comment" spellcheck="true">// 初始化上下文</span>  <span class="token comment" spellcheck="true">// const contextValue = { appState, setAppState };</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 大儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>section<span class="token operator">></span>      大儿子      <span class="token operator">&lt;</span>User <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 二儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"二儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>section<span class="token operator">></span>      二儿子      <span class="token operator">&lt;</span>UserModifier x<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"x"</span><span class="token punctuation">}</span><span class="token operator">></span>内容<span class="token operator">&lt;</span><span class="token operator">/</span>UserModifier<span class="token operator">></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;Wrapper /> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"三儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>section<span class="token operator">></span>幺儿子<span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> state<span class="token punctuation">,</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>  <span class="token comment" spellcheck="true">// const { state } = useContext(appContext);</span>  <span class="token comment" spellcheck="true">// console.log(state);</span>  <span class="token comment" spellcheck="true">// console.log(contextValue);</span>  <span class="token comment" spellcheck="true">// return &lt;div>User:{contextValue.appState.user.name}&lt;/div>;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入组件,将组件和全局state联系起来,就是connect的含义</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"updateUser"</span><span class="token punctuation">,</span>      payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="redux-jsx"><a href="#redux-jsx" class="headerlink" title="redux.jsx"></a>redux.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token keyword">export</span> <span class="token keyword">const</span> connent <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在wrapper使用state,调用更新方法,可以实现更新</span>        <span class="token comment" spellcheck="true">// 而且wrapper包装的是用到state的组件,所以更新时不会影响其他组件</span>        <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// const { appState, setAppState } = contextValue;</span>        <span class="token comment" spellcheck="true">// 只订阅一次</span>        <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 规范setState流程</span>        <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// setAppState(reducer(appState, action));</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> dispatch<span class="token operator">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span> state<span class="token operator">=</span><span class="token punctuation">{</span>state<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"updateUser"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token operator">...</span>state<span class="token punctuation">,</span>            user<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token operator">...</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                <span class="token operator">...</span>payload<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 其实payload就是data</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(newState); 没有调用组件的setState,所以不会刷新</span>        store<span class="token punctuation">.</span>state <span class="token operator">=</span> newState<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历监听者列表,调用用户传入的(更新)方法</span>        store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 监听者</span>    listeners<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 让所有使用store的组件监听store的变化,实现更新渲染</span>    <span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>        store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回取消订阅的函数</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> index <span class="token operator">=</span> store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>            store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></code></pre><h1 id="让connect支持selector"><a href="#让connect支持selector" class="headerlink" title="让connect支持selector"></a>让connect支持selector</h1><h2 id="App-jsx-1"><a href="#App-jsx-1" class="headerlink" title="App.jsx"></a>App.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token '&lt;'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> appContext<span class="token punctuation">,</span> store<span class="token punctuation">,</span> connent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./redux.jsx"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appContext.Provider</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// const x儿子 ......</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取局部state,无需再state.xxx.xxx</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> state<span class="token punctuation">.</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入组件,将组件和全局state联系起来,就是connect的含义</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="redux-jsx-1"><a href="#redux-jsx-1" class="headerlink" title="redux.jsx"></a>redux.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token comment" spellcheck="true">// 这个写法表示 先接收一个参数,再接收一个参数</span><span class="token keyword">export</span> <span class="token keyword">const</span> connent <span class="token operator">=</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在wrapper使用state,调用更新方法,可以实现更新</span>    <span class="token comment" spellcheck="true">// 而且wrapper包装的是用到state的组件,所以更新时不会影响其他组件</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const { appState, setAppState } = contextValue;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只订阅一次</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 规范setState流程</span>    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// setAppState(reducer(appState, action));</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>    <span class="token comment" spellcheck="true">// return &lt;Component {...props} dispatch={dispatch} state={state} />;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> dispatch<span class="token operator">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="精准渲染"><a href="#精准渲染" class="headerlink" title="精准渲染"></a>精准渲染</h1><p><img src="5C1676015232322.png" alt="1676015232322"></p><p><img src="D:\vs-vue\1-blog\hexo-blog\source_posts\手写redux\手写redux\5C1676016677462.png" alt="修改user后,三儿子也改变了"></p><h2 id="redux-jsx-2"><a href="#redux-jsx-2" class="headerlink" title="redux.jsx"></a>redux.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> changed <span class="token operator">=</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> newState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> changed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token comment" spellcheck="true">// 这个写法表示 先接收一个参数,再接收一个参数</span><span class="token keyword">export</span> <span class="token keyword">const</span> connent <span class="token operator">=</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在wrapper使用state,调用更新方法,可以实现更新</span>    <span class="token comment" spellcheck="true">// 而且wrapper包装的是用到state的组件,所以更新时不会影响其他组件</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const { appState, setAppState } = contextValue;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只订阅一次</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//   const unsubscribe =</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newData <span class="token operator">=</span> selector          <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span>          <span class="token punctuation">:</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> store<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断data(store.state.xxx)是否发生变化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">changed</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> newData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//   return unsubscribe; // 取消订阅</span>      <span class="token comment" spellcheck="true">// 这里最好取消订阅,否则selector变化时可能出现重复订阅</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 规范setState流程</span>    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// setAppState(reducer(appState, action));</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>    <span class="token comment" spellcheck="true">// return &lt;Component {...props} dispatch={dispatch} state={state} />;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> dispatch<span class="token operator">=</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="App-jsx-2"><a href="#App-jsx-2" class="headerlink" title="App.jsx"></a>App.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token '&lt;'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> appContext<span class="token punctuation">,</span> store<span class="token punctuation">,</span> connent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./redux.jsx"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appContext.Provider</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span><span class="token keyword">const</span> 幺儿子 <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span> group<span class="token punctuation">:</span> state<span class="token punctuation">.</span>group <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> group <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"三儿子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>      幺儿子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Group<span class="token punctuation">:</span> <span class="token punctuation">{</span>group<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取局部state,无需再state.xxx.xxx</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> state<span class="token punctuation">.</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>User<span class="token punctuation">:</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入组件,将组件和全局state联系起来,就是connect的含义</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><img src="D:\vs-vue\1-blog\hexo-blog\source_posts\手写redux\手写redux\5C1676017417280.png" alt="1676017417280"></p><h1 id="mapDispatcherToProps"><a href="#mapDispatcherToProps" class="headerlink" title="mapDispatcherToProps"></a>mapDispatcherToProps</h1><p><img src="D:\vs-vue\1-blog\hexo-blog\source_posts\手写redux\手写redux\5C1676017628946.png" alt="1676017628946"></p><h2 id="App-jsx-3"><a href="#App-jsx-3" class="headerlink" title="App.jsx"></a>App.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token '&lt;'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> appContext<span class="token punctuation">,</span> store<span class="token punctuation">,</span> connent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./redux.jsx"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appContext.Provider</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span><span class="token comment" spellcheck="true">// 传入组件,将组件和全局state联系起来,就是connect的含义</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connent</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每次都要传update,简化</span>    updateUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"update"</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> attr <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// })(({ dispatch, state, ...props }) => {</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> updateUser<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// dispatch({</span>    <span class="token comment" spellcheck="true">//   type: "update",</span>    <span class="token comment" spellcheck="true">//   payload: {</span>    <span class="token comment" spellcheck="true">//     name: e.target.value,</span>    <span class="token comment" spellcheck="true">//   },</span>    <span class="token comment" spellcheck="true">// });</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><h2 id="redux-jsx-3"><a href="#redux-jsx-3" class="headerlink" title="redux.jsx"></a>redux.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> changed <span class="token operator">=</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token comment" spellcheck="true">// 这个写法表示 先接收一个参数,再接收一个参数</span><span class="token comment" spellcheck="true">// export const connent = (selector,mapDispatchToProps) => (Component) => {</span><span class="token keyword">export</span> <span class="token keyword">const</span> connent <span class="token operator">=</span> <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> dispatchSelector<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在wrapper使用state,调用更新方法,可以实现更新</span>    <span class="token comment" spellcheck="true">// 而且wrapper包装的是用到state的组件,所以更新时不会影响其他组件</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> state<span class="token punctuation">,</span> setState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const { appState, setAppState } = contextValue;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 规范setState流程</span>    <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// setAppState(reducer(appState, action));</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每次都要传update,简化</span>    <span class="token keyword">const</span> dispatchers <span class="token operator">=</span> dispatchSelector      <span class="token operator">?</span> <span class="token function">dispatchSelector</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只订阅一次</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//   const unsubscribe =</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newData <span class="token operator">=</span> selector          <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span>          <span class="token punctuation">:</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> store<span class="token punctuation">.</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断data(store.state.xxx)是否发生变化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">changed</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> newData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// return unsubscribe; // 取消订阅</span>      <span class="token comment" spellcheck="true">// 这里最好取消订阅,否则selector变化时可能出现重复订阅</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>    <span class="token comment" spellcheck="true">// return &lt;Component {...props} dispatch={dispatch} state={state} />;</span>    <span class="token comment" spellcheck="true">// return &lt;Component {...props} dispatch={dispatch} {...data} />;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>dispatchers<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="connect的意义"><a href="#connect的意义" class="headerlink" title="connect的意义"></a>connect的意义</h1><blockquote><p>多次调用, 每次调用产生半成品, 可以根据不同的半成品来进行读/写操作</p></blockquote><p><img src="D:\vs-vue\1-blog\hexo-blog\source_posts\手写redux\手写redux\5C1676026550867.png" alt="1676026550867"></p><h2 id="connects-connectToUser-js"><a href="#connects-connectToUser-js" class="headerlink" title="connects/connectToUser.js"></a>connects/connectToUser.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../redux'</span><span class="token comment" spellcheck="true">// 抽取公共selector和dispatcher</span><span class="token comment" spellcheck="true">// 封装读逻辑</span><span class="token keyword">const</span> userSelector <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> state<span class="token punctuation">.</span>user <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 封装写逻辑</span><span class="token keyword">const</span> userDispatcher <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        updateUser<span class="token punctuation">:</span> <span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"update"</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> attrs <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> connentToUser <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>userSelector<span class="token punctuation">,</span> userDispatcher<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="App-jsx-4"><a href="#App-jsx-4" class="headerlink" title="App.jsx"></a>App.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token '&lt;'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> appContext<span class="token punctuation">,</span> store<span class="token punctuation">,</span>connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./redux.jsx"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connentToUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./connects/connectToUser.js"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appContext.Provider</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span><span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connentToUser</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> updateUser<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onChange <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// dispatch({</span>    <span class="token comment" spellcheck="true">//   type: "update",</span>    <span class="token comment" spellcheck="true">//   payload: {</span>    <span class="token comment" spellcheck="true">//     name: e.target.value,</span>    <span class="token comment" spellcheck="true">//   },</span>    <span class="token comment" spellcheck="true">// });</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><h1 id="封装provider和createStore"><a href="#封装provider和createStore" class="headerlink" title="封装provider和createStore"></a>封装provider和createStore</h1><p><img src="D:\vs-vue\1-blog\hexo-blog\source_posts\手写redux\手写redux\5C1676029099571.png" alt="1676029099571"></p><h2 id="redux-jsx-4"><a href="#redux-jsx-4" class="headerlink" title="redux.jsx"></a>redux.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span><span class="token comment" spellcheck="true">// reduce和store都是写死的,不符合规范</span><span class="token comment" spellcheck="true">// 规范state创建流程</span><span class="token comment" spellcheck="true">// const reducer = (state, { type, payload }) => {</span><span class="token comment" spellcheck="true">//   if (type === "update") {</span><span class="token comment" spellcheck="true">//     return {</span><span class="token comment" spellcheck="true">//       ...state,</span><span class="token comment" spellcheck="true">//       user: {</span><span class="token comment" spellcheck="true">//         ...state.user,</span><span class="token comment" spellcheck="true">//         ...payload, // 其实payload就是data</span><span class="token comment" spellcheck="true">//       },</span><span class="token comment" spellcheck="true">//     };</span><span class="token comment" spellcheck="true">//   } else {</span><span class="token comment" spellcheck="true">//     return state;</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// };</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// state: {</span>  <span class="token comment" spellcheck="true">// user: { name: "frank", age: 18 },</span>  <span class="token comment" spellcheck="true">// group: { name: "前端组" },</span>  <span class="token comment" spellcheck="true">// },</span>  state<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  <span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(newState); 没有调用组件的setState,所以不会刷新</span>    store<span class="token punctuation">.</span>state <span class="token operator">=</span> newState<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历监听者列表,调用用户传入的(更新)方法</span>    store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  reducer<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 监听者</span>  listeners<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 让所有使用store的组件监听store的变化,实现更新渲染</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回取消订阅的函数</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      store<span class="token punctuation">.</span>listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建store和reducer</span><span class="token keyword">export</span> <span class="token keyword">const</span> createStore <span class="token operator">=</span> <span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  store<span class="token punctuation">.</span>state <span class="token operator">=</span> initState<span class="token punctuation">;</span>  store<span class="token punctuation">.</span>reducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span>  <span class="token keyword">return</span> store<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> Provider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> store<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appContext.Provider</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="App-jsx-5"><a href="#App-jsx-5" class="headerlink" title="App.jsx"></a>App.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 请从课程简介里下载本代码</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: Unexpected token '&lt;'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> appContext<span class="token punctuation">,</span> createStore<span class="token punctuation">,</span> connect<span class="token punctuation">,</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./redux.jsx"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connentToUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./connects/connectToUser.js"</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">"update"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">.</span>user<span class="token punctuation">,</span>        <span class="token operator">...</span>payload<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> initState <span class="token operator">=</span> <span class="token punctuation">{</span>  user<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  group<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"前端组"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方案2: 将组件的state提取到外部的store</span><span class="token keyword">export</span> <span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 传递上下文</span>    <span class="token comment" spellcheck="true">// &lt;appContext.Provider value={store}></span>    <span class="token comment" spellcheck="true">//   &lt;大儿子 /></span>    <span class="token comment" spellcheck="true">//   &lt;二儿子 /></span>    <span class="token comment" spellcheck="true">//   &lt;幺儿子 /></span>    <span class="token comment" spellcheck="true">// &lt;/appContext.Provider></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Provider</span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>大儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>二儿子 <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>幺儿子 <span class="token operator">/</span><span class="token operator">></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Provider</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ......</span><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token function">connentToUser</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> UserModifier <span class="token operator">=</span> <span class="token function">connentToUser</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> updateUser<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token operator">...</span>props <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="redux概念总结"><a href="#redux概念总结" class="headerlink" title="redux概念总结"></a>redux概念总结</h1><p><img src="D:\vs-vue\1-blog\hexo-blog\source_posts\手写redux\手写redux%5CUsers%5C13695%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1676032605733.png" alt="1676032605733"></p><p><img src="C:\Users\13695\AppData\Roaming\Typora\typora-user-images\1676032698339.png" alt="1676032698339"></p><h1 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h1><h2 id="redux-jsx-5"><a href="#redux-jsx-5" class="headerlink" title="redux.jsx"></a>redux.jsx</h2><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> changed <span class="token operator">=</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">,</span> newState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oldState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> newState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> changed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 每次自己写warpper包装dispatch太麻烦,封装一个return wrapper的函数</span><span class="token comment" spellcheck="true">// 这个写法表示 先接收一个参数,再接收一个参数</span><span class="token comment" spellcheck="true">// export const connent = (selector,mapDispatchToProps) => (Component) => {</span><span class="token keyword">export</span> <span class="token keyword">const</span> connect <span class="token operator">=</span> <span class="token punctuation">(</span>selector<span class="token punctuation">,</span> dispatchSelector<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// context只能在组件内部访问,则这里创建一个组件来封装dispatch的逻辑,然后通过这个组件获取context(权宜之计)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在wrapper使用state,调用更新方法,可以实现更新</span>    <span class="token comment" spellcheck="true">// 而且wrapper包装的是用到state的组件,所以更新时不会影响其他组件</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const contextValue = useContext(appContext);</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> setState <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const { appState, setAppState } = contextValue;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> state<span class="token punctuation">:</span> state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 规范setState流程</span>    <span class="token comment" spellcheck="true">// const dispatch = (action) => {</span>    <span class="token comment" spellcheck="true">//   // setAppState(reducer(appState, action));</span>    <span class="token comment" spellcheck="true">//   setState(reducer(state, action));</span>    <span class="token comment" spellcheck="true">//   // update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>    <span class="token comment" spellcheck="true">// };</span>    <span class="token comment" spellcheck="true">// 每次都要传update,简化</span>    <span class="token keyword">const</span> dispatchers <span class="token operator">=</span> dispatchSelector      <span class="token operator">?</span> <span class="token function">dispatchSelector</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 只订阅一次</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//   const unsubscribe =</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newData <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> state <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断data(store.state.xxx)是否发生变化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">changed</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> newData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//   return unsubscribe; // 取消订阅</span>      <span class="token comment" spellcheck="true">// 这里最好取消订阅,否则selector变化时可能出现重复订阅</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果组件有传值,应该传递(props)</span>    <span class="token comment" spellcheck="true">// return &lt;Component {...props} dispatch={dispatch} state={state} />;</span>    <span class="token comment" spellcheck="true">// return &lt;Component {...props} dispatch={dispatch} {...data} />;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>dispatchers<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">let</span> state <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> reducer <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听者</span><span class="token keyword">let</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> setState <span class="token operator">=</span> <span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// console.log(newState); 没有调用组件的setState,所以不会刷新</span>  state <span class="token operator">=</span> newState<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 遍历监听者列表,调用用户传入的(更新)方法</span>  listeners<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 规范setState流程</span>  dispatch<span class="token punctuation">:</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// setAppState(reducer(appState, action));</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// update({}); // 但是,其他使用store的无法根据store内的改变而重新渲染</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 让所有使用store的组件监听store的变化,实现更新渲染</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回取消订阅的函数</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建store和reducer</span><span class="token keyword">export</span> <span class="token keyword">const</span> createStore <span class="token operator">=</span> <span class="token punctuation">(</span>_reducer<span class="token punctuation">,</span> initState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  state <span class="token operator">=</span> initState<span class="token punctuation">;</span>  reducer <span class="token operator">=</span> _reducer<span class="token punctuation">;</span>  <span class="token keyword">return</span> store<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> Provider <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> store<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appContext.Provider</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="redux如何支持异步"><a href="#redux如何支持异步" class="headerlink" title="redux如何支持异步"></a>redux如何支持异步</h1>]]></content>
      
      
      <categories>
          
          <category> redux </category>
          
          <category> 状态管理 </category>
          
          <category> react </category>
          
          <category> 脚手架 </category>
          
          <category> js </category>
          
          <category> javaScript </category>
          
          <category> 造轮子 </category>
          
          <category> 框架 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> redux </tag>
            
            <tag> 状态管理 </tag>
            
            <tag> react </tag>
            
            <tag> 脚手架 </tag>
            
            <tag> js </tag>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写vue2</title>
      <link href="/2023/02/05/shou-xie-vue2-vuerouter-vuex/shou-xie-vue2-vuerouter-vuex/"/>
      <url>/2023/02/05/shou-xie-vue2-vuerouter-vuex/shou-xie-vue2-vuerouter-vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="rollup开发环境搭建"><a href="#rollup开发环境搭建" class="headerlink" title="rollup开发环境搭建"></a>rollup开发环境搭建</h2><pre class=" language-shell"><code class="language-shell">npm init -y# 工具库一般用rollup打包,babel则是编译高级语法(->低级语法),来适配不同浏览器npm i rollup rollup-plugin-babel @babel/core @babel/preset-env --save-dev# 使用淘宝新镜像下载npm i rollup rollup-plugin-babel @babel/core @babel/preset-env --registry=https://registry.npmmirror.com</code></pre><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p><img src="img_5.png" alt="img_5.png"></p><h3 id="要打包的src-index-js"><a href="#要打包的src-index-js" class="headerlink" title="要打包的src/index.js"></a>要打包的src/index.js</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件 .babelrc"></a>配置文件 .babelrc</h3><pre class=" language-shell"><code class="language-shell">{    "presets": [        // preset是很多插件的集合        "@babel/preset-env"    ]}</code></pre><h3 id="配置文件-rollup-config-js"><a href="#配置文件-rollup-config-js" class="headerlink" title="配置文件 rollup.config.js"></a>配置文件 rollup.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// rollup默认可以导出一个对象,作为打包的配置文件</span><span class="token comment" spellcheck="true">// import babel from 'rollup-plugin-babel' // es6导入语法</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rollup-plugin-babel'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// export default {</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    input<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        file<span class="token punctuation">:</span> <span class="token string">'./dist/vue.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 出口</span>        name<span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后全局添加Vue对象 global Vue</span>        format<span class="token punctuation">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// esm es6模块 commonjs模块 iife自执行函数 umd通用模块规范(兼容AMD和commonjs,iife,不兼容es6)</span>        sourcemap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以调试源代码</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 可以使用的插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            exclude<span class="token punctuation">:</span> <span class="token string">'node_modules/**'</span> <span class="token comment" spellcheck="true">// 排除nodemodule下所有文件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="测试用html"><a href="#测试用html" class="headerlink" title="测试用html"></a>测试用html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_1.png" alt="img_1.png"><img src="img_2.png" alt="img_2.png"><img src="img_3.png" alt="img_3.png"><img src="img_4.png" alt="img_4.png"></p><h1 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h1><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initMixin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拓展了vue,添加init方法</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h2 id="init-js"><a href="#init-js" class="headerlink" title="init.js"></a>init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将用户传入的options挂载到vue对象上</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 原型中的this表示实例</span>        vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// $xxx 表示是vue的属性(在(vue里,如果data里的变量名是$开头,vue是拿不到的)</span>        <span class="token comment" spellcheck="true">// 初始化状态</span>        <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="state-js"><a href="#state-js" class="headerlink" title="state.js"></a>state.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对options内属性和方法进行操作 </span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data数据的初始化</span>        <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据初始化(转为响应式)</span><span class="token keyword">function</span> <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// 如果data是函数,就调用并获取其返回值</span>    data <span class="token operator">=</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data    <span class="token comment" spellcheck="true">// data挂载到vm上</span>    vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// 数据劫持 </span>    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听数据变化</span><span class="token punctuation">}</span></code></pre><h1 id="实现对象响应式"><a href="#实现对象响应式" class="headerlink" title="实现对象响应式"></a>实现对象响应式</h1><h2 id="src-observe-index-js"><a href="#src-observe-index-js" class="headerlink" title="src\observe\index.js"></a>src\observe\index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">debugger</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="第一步测试-能否拿到data数据"><a href="#第一步测试-能否拿到data数据" class="headerlink" title="第一步测试,能否拿到data数据"></a>第一步测试,能否拿到data数据</h3><p><img src="img_6.png" alt="img_6.png"></p><h3 id="继续开发"><a href="#继续开发" class="headerlink" title="继续开发"></a>继续开发</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环对象,对属性依次劫持</span>        <span class="token comment" spellcheck="true">// 重新定义属性(vue2的性能瓶颈所在),每个变量都添加get/set监听</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置值时,如果是对象,也需要转响应式! </span>            value <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token comment" spellcheck="true">// 如果data不是对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 只对对象进行劫持</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对data对象进行劫持</span>    <span class="token comment" spellcheck="true">// 判断是否被劫持 => 通过一个专门的实例来观测判断</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="修改init-js-代理取操作值-vm-data-xxx-gt-vm-xxx"><a href="#修改init-js-代理取操作值-vm-data-xxx-gt-vm-xxx" class="headerlink" title="修改init.js,代理取操作值 vm._data.xxx -> vm.xxx"></a>修改init.js,代理取操作值 vm._data.xxx -&gt; vm.xxx</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ......</span><span class="token comment" spellcheck="true">// 代理取值和设置值,通过响应式的方法来改变实际操作的值</span><span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回vm[_data][key] (vm._data.key)</span>            <span class="token keyword">return</span> vm<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> vm<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            vm<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据初始化(转为响应式)</span><span class="token keyword">function</span> <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// 如果data是函数,就调用并获取其返回值</span>    data <span class="token operator">=</span> <span class="token keyword">typeof</span> data <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> data    <span class="token comment" spellcheck="true">// data挂载到vm上</span>    vm<span class="token punctuation">.</span>_data <span class="token operator">=</span> data    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// 数据劫持 </span>    <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听数据变化</span>    <span class="token comment" spellcheck="true">// 将vm._data代理,则用户操作值只需要vm.xxx(而不是vm._data.xxx)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'_data'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data: {</span>        <span class="token comment" spellcheck="true">//     name: 'zs',</span>        <span class="token comment" spellcheck="true">//     age: 12</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// vue3里data只能是函数,vue2则可以是函数和对象</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    sex<span class="token punctuation">:</span> <span class="token string">'boy'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_7.png" alt="img_7.png"><img src="img_8.png" alt="img_8.png"></p><h3 id="问题-只对第一层data进行响应式处理-而data-obj内的属性则没有转为响应式"><a href="#问题-只对第一层data进行响应式处理-而data-obj内的属性则没有转为响应式" class="headerlink" title="问题: 只对第一层data进行响应式处理,而data.obj内的属性则没有转为响应式"></a>问题: 只对第一层data进行响应式处理,而data.obj内的属性则没有转为响应式</h3><h2 id="修改src-observe-index-js"><a href="#修改src-observe-index-js" class="headerlink" title="修改src\observe\index.js"></a>修改src\observe\index.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// ..... </span><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    <span class="token comment" spellcheck="true">// value可能是一个对象,需要对其进行响应式处理</span>    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 递归了,性能也会降低 &lt;&lt;-</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            value <span class="token operator">=</span> newValue        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// .....</span></code></pre><p><img src="img_9.png" alt="修改后,obj确实多了get和set方法"></p><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data: {</span>        <span class="token comment" spellcheck="true">//     name: 'zs',</span>        <span class="token comment" spellcheck="true">//     age: 12</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// vue3里data只能是函数,vue2则可以是函数和对象</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    sex<span class="token punctuation">:</span> <span class="token string">'boy'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>    <span class="token comment" spellcheck="true">// 新增值时不会转响应式</span>    vm<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>addr <span class="token operator">=</span> <span class="token punctuation">{</span>        code<span class="token punctuation">:</span> <span class="token number">201</span><span class="token punctuation">,</span>        desc<span class="token punctuation">:</span> <span class="token string">'华尔街'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 改变已有值时会转响应式</span>    vm<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token punctuation">{</span>        sex<span class="token punctuation">:</span> <span class="token string">'boy'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">112</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="实现数组的响应式"><a href="#实现数组的响应式" class="headerlink" title="实现数组的响应式"></a>实现数组的响应式</h1><blockquote><p>1,原本的方式可以让数组转响应式,但是需要遍历,如果数组很大,则非常耗时!<br>2,如果数组内部有对象,也需要响应式处理</p></blockquote><h2 id="修改-src-observe-index-js"><a href="#修改-src-observe-index-js" class="headerlink" title="修改 src/observe/index.js"></a>修改 src/observe/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>newArrayProto<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./array"</span><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果data是数组</span>            <span class="token comment" spellcheck="true">// 可以保留数组的特性,重写数组的部分方法 7个变异方法 可以修改数组本身</span>            <span class="token comment" spellcheck="true">// data.__proto__ = { // 这样重新指定原型链,会导致数组原有属性和方法的缺失</span>            <span class="token comment" spellcheck="true">//     push() {</span>            <span class="token comment" spellcheck="true">//         // 重写push</span>            <span class="token comment" spellcheck="true">//         console.log('push')</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            data<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> newArrayProto            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...... </span>    <span class="token comment" spellcheck="true">// 观测,对数组和数组里的对象进行响应式处理</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ......</span></code></pre><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 一般操作数组很少用下标,一般是用数组提供的方法</span>    vm<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'bear'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组里的对象也需要被劫持</span>    vm<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="问题-使用变异方法添加的数组元素没有转响应式"><a href="#问题-使用变异方法添加的数组元素没有转响应式" class="headerlink" title="问题: 使用变异方法添加的数组元素没有转响应式"></a>问题: 使用变异方法添加的数组元素没有转响应式</h3><p><img src="img_10.png" alt="使用变异方法添加的数组元素没有转响应式"></p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><h3 id="src-observe-index-js-1"><a href="#src-observe-index-js-1" class="headerlink" title="src/observe/index.js"></a>src/observe/index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>newArrayProto<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./array"</span><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 如果data是对象,则加上__ob__后,会一直进行响应式处理walk(在构造函数调用了),然后栈溢出</span>            enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不可枚举,(循环时无法获取)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 把observer实例挂载到data,则array.js也可以使用observer的观测数组方法</span>        <span class="token comment" spellcheck="true">// 如果data上有一个__ob__属性,则说明被观测过</span>        <span class="token comment" spellcheck="true">// data.__ob__ = this</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果data是数组</span>            <span class="token comment" spellcheck="true">// 可以保留数组的特性,重写数组的部分方法 7个变异方法 可以修改数组本身</span>            <span class="token comment" spellcheck="true">// data.__proto__ = { // 这样重新指定原型链,会导致数组原有属性和方法的缺失</span>            <span class="token comment" spellcheck="true">//     push() {</span>            <span class="token comment" spellcheck="true">//         // 重写push</span>            <span class="token comment" spellcheck="true">//         console.log('push')</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            data<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> newArrayProto            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环对象,对属性依次劫持</span>        <span class="token comment" spellcheck="true">// 重新定义属性(vue2的性能瓶颈所在),每个变量都添加get/set监听</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 观测,对数组和数组里的对象进行响应式处理</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ......</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token comment" spellcheck="true">// 如果data不是对象</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> data <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 只对对象进行劫持</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>__ob__ <span class="token keyword">instanceof</span> <span class="token class-name">Observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 说明被代理过</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span>__ob__    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 对data对象进行劫持</span>    <span class="token comment" spellcheck="true">// 判断是否被劫持 => 通过一个专门的实例来观测判断</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="src-observe-array-js"><a href="#src-observe-array-js" class="headerlink" title="src/observe/array.js"></a>src/observe/array.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 重写数组部分方法</span><span class="token keyword">let</span> oldArrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// 获取数组的原型</span><span class="token comment" spellcheck="true">// newArrayProto = oldArrayProto 拿到了旧原型</span><span class="token keyword">export</span> <span class="token keyword">let</span> newArrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>oldArrayProto<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 重写</span><span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 找到所有的变异方法(可以修改数组的方法)</span>    <span class="token comment" spellcheck="true">// push 将新元素添加到数组的末尾，并返回新的长度</span>    <span class="token comment" spellcheck="true">// pop 删除数组的最后一个元素，并返回该元素 </span>    <span class="token comment" spellcheck="true">// shift 移除数组的第一项 </span>    <span class="token comment" spellcheck="true">// unshift 将新元素添加到数组的开头，并返回新的长度</span>    <span class="token comment" spellcheck="true">// reverse 反转数组中元素的顺序 </span>    <span class="token comment" spellcheck="true">// sort 排序</span>    <span class="token comment" spellcheck="true">// splice 从数组中添加/删除元素</span>    <span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span>    <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'unshift'</span><span class="token punctuation">,</span>    <span class="token string">'reverse'</span><span class="token punctuation">,</span>    <span class="token string">'sort'</span><span class="token punctuation">,</span>    <span class="token string">'splice'</span><span class="token punctuation">]</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// arr.push(1,2,3)</span>    <span class="token comment" spellcheck="true">// 重写方法</span>    newArrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用</span>        <span class="token comment" spellcheck="true">// 内部调用原方法,函数的劫持,切片编程</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> oldArrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保留旧方法的逻辑 </span>        <span class="token comment" spellcheck="true">// 对新增的数据再次进行劫持</span>        <span class="token keyword">let</span> inserted <span class="token comment" spellcheck="true">// 是一个数组</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>                inserted <span class="token operator">=</span> args                <span class="token keyword">break</span>            <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// splice(开始位置,结束位置,{新增数据},{新增数据})</span>                <span class="token comment" spellcheck="true">// 获取新增的数据</span>                inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 去掉前两个,拿到剩下的</span>                <span class="token keyword">break</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(inserted)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 数组转响应式</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p><img src="img_11.png" alt="img_11.png"></p><h1 id="解析模板参数"><a href="#解析模板参数" class="headerlink" title="解析模板参数 "></a>解析模板参数 </h1><blockquote><p>实现解析表达式的方案:</p></blockquote><ul><li>1,模板引擎 -&gt; 性能差,需要正则匹配替换 vue1.0 -&gt; 没有引入虚拟dom</li><li>2,采用<strong>虚拟dom</strong> -&gt; 数据变化后,比较虚拟dom的差异,最后更新需要更新的地方,核心就是将模板变成js语法,通过js语法生成虚拟dom</li></ul><blockquote><p>涉及语法转换,如 es6-&gt;es5 css压缩<br>需要先变成语法树再重新组装代码,将template语法转换成render函数</p></blockquote><h2 id="配置一下插件-优化import的编码体验"><a href="#配置一下插件-优化import的编码体验" class="headerlink" title="配置一下插件,优化import的编码体验"></a>配置一下插件,优化import的编码体验</h2><pre class=" language-shell"><code class="language-shell"># node插件,可以简化导入npm i @rollup/plugin-node-resolvenpm i @rollup/plugin-node-resolve --registry=https://registry.npmmirror.com</code></pre><h3 id="rollup-config-js"><a href="#rollup-config-js" class="headerlink" title="rollup.config.js"></a>rollup.config.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// rollup默认可以导出一个对象,作为打包的配置文件</span><span class="token comment" spellcheck="true">// import babel from 'rollup-plugin-babel' // es6导入语法</span><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rollup-plugin-babel'</span><span class="token punctuation">)</span><span class="token keyword">const</span> resolve <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@rollup/plugin-node-resolve'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// export default {</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    input<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入口</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        file<span class="token punctuation">:</span> <span class="token string">'./dist/vue.js'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 出口</span>        name<span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后全局添加Vue对象 global Vue</span>        format<span class="token punctuation">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// esm es6模块 commonjs模块 iife自执行函数 umd通用模块规范(兼容AMD和commonjs,iife,不兼容es6)</span>        sourcemap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以调试源代码</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 可以使用的插件</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            exclude<span class="token punctuation">:</span> <span class="token string">'node_modules/**'</span> <span class="token comment" spellcheck="true">// 排除nodemodule下所有文件</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// import xx from 'xxx/index' -> 'xxx'</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="init-js-1"><a href="#init-js-1" class="headerlink" title="init.js"></a>init.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>compileToFunction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ops<span class="token punctuation">.</span>render <span class="token comment" spellcheck="true">// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h3 id="compile-index-js"><a href="#compile-index-js" class="headerlink" title="compile/index.js"></a>compile/index.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对模板进行编译</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1,将template转化为ast语法树</span>    <span class="token comment" spellcheck="true">// 2,生成render方法,render方法执行返回的结果就是虚拟dom</span><span class="token punctuation">}</span></code></pre><h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><h3 id="index-html-1"><a href="#index-html-1" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> skyblue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> skyblue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{name}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// console.log(Vue);</span>    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// name: 'zs',</span>                <span class="token comment" spellcheck="true">// age: 12,</span>                <span class="token comment" spellcheck="true">// obj: {</span>                <span class="token comment" spellcheck="true">//     sex: 'boy'</span>                <span class="token comment" spellcheck="true">// },</span>                arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>hello&lt;/div>'</span>        <span class="token comment" spellcheck="true">// el: '#app', // 将数据解析到el上</span>        <span class="token comment" spellcheck="true">// render(){</span>        <span class="token comment" spellcheck="true">// return createElement('div',{})</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实现解析表达式的方案</span>    <span class="token comment" spellcheck="true">// 1,模板引擎 -> 性能差,需要正则匹配替换 vue1.0 -> 没有引入虚拟dom</span>    <span class="token comment" spellcheck="true">// 2,采用虚拟dom -> 数据变化后,比较虚拟dom的差异,最后更新需要更新的地方</span>    <span class="token comment" spellcheck="true">// 3,核心就是将模板变成js语法,通过js语法生成虚拟dom</span>    <span class="token comment" spellcheck="true">// 涉及语法转换,如 es6->es5 css压缩</span>    <span class="token comment" spellcheck="true">// 需要先变成语法树再重新组装代码,将template语法转换成render函数</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_12.png" alt="img_12.png"></p><h1 id="实现模板转化为ast语法树"><a href="#实现模板转化为ast语法树" class="headerlink" title="实现模板转化为ast语法树"></a>实现模板转化为ast语法树</h1><p><img src="img_13.png" alt="正则表达式可视化网站"></p><h2 id="init-js-2"><a href="#init-js-2" class="headerlink" title="init.js"></a>init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>compileToFunction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ops<span class="token punctuation">.</span>render <span class="token comment" spellcheck="true">// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="compile-index-js-1"><a href="#compile-index-js-1" class="headerlink" title="compile/index.js"></a>compile/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>parseHTML<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./parse"</span><span class="token comment" spellcheck="true">// 编译模板</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(template)</span>    <span class="token comment" spellcheck="true">// 1,将template转化为ast语法树</span>    <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2,生成render方法,render方法执行返回的结果就是虚拟dom </span><span class="token punctuation">}</span></code></pre><h2 id="compile-parse-js"><a href="#compile-parse-js" class="headerlink" title="compile/parse.js"></a>compile/parse.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 正则表达式</span><span class="token comment" spellcheck="true">// vue3采用的不是正则</span><span class="token keyword">const</span> ncname <span class="token operator">=</span> <span class="token template-string"><span class="token string">`[a-zA-Z_][\\-\\.0-9_a-zA-Z]*`</span></span> <span class="token comment" spellcheck="true">// 标签名</span><span class="token keyword">const</span> qnameCapture <span class="token operator">=</span> <span class="token template-string"><span class="token string">`((?:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\:)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ncname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span> <span class="token comment" spellcheck="true">// 解析 &lt;div:xxx> 形式(带命名空间)的标签</span><span class="token keyword">const</span> startTagOpen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`^&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 匹配到的分组是一个开始标签名</span><span class="token keyword">const</span> endTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`^&lt;\\/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>qnameCapture<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[^>]*>`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 匹配的是&lt;/xxx> 最终匹配到的分组是结束标签的名字</span><span class="token keyword">const</span> attribute <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span>\s<span class="token string">"'&lt;>\/=]+)(?:\s*(=)\s*(?:"</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token string">"]*)"</span><span class="token operator">+</span><span class="token operator">|</span><span class="token string">'([^'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'+|([^\s"'</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">></span>`<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">// 匹配属性</span><span class="token keyword">const</span> startTagClose <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">(</span>\<span class="token operator">/</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">/</span> <span class="token comment" spellcheck="true">// 匹配 &lt;br/> 这种单标签</span><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token operator">/</span>\<span class="token punctuation">{</span>\<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">|</span>\r<span class="token operator">?</span>\n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span>\<span class="token punctuation">}</span>\<span class="token punctuation">}</span><span class="token operator">/</span>g <span class="token comment" spellcheck="true">// 匹配 插值表达式 </span><span class="token comment" spellcheck="true">// htmlparser2库也可以解析html</span><span class="token comment" spellcheck="true">/*{    tag: 'div',    type: 1,    attrs: [{name,age,address}],    parent: null,    children:[        {                tag: 'span',                type: 1,                attrs: [{...}],                parent: div,                children:[]        }    ]}*/</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// html必定是&lt;开头(vue2的template不能是字符串,但是vue3可以)</span>    <span class="token comment" spellcheck="true">// 定义虚拟dom的节点类型</span>    <span class="token keyword">const</span> ELEMENT_TYPE <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">const</span> TEXT_TYPE <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 用于存放元素</span>    <span class="token keyword">let</span> currentParent <span class="token comment" spellcheck="true">// 指向栈中最后一个元素</span>    <span class="token keyword">let</span> root <span class="token comment" spellcheck="true">// 标记根节点</span>    <span class="token comment" spellcheck="true">// 创建虚拟dom的节点</span>    <span class="token keyword">function</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            tag<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> ELEMENT_TYPE<span class="token punctuation">,</span>            children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            attrs<span class="token punctuation">,</span>            parent<span class="token punctuation">:</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最终需要转化为一颗抽象语法树</span>    <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(tag, attrs, '开始');</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果还没有根节点,则该元素就是根节点</span>            root <span class="token operator">=</span> node        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentParent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果有当前节点,则当前节点是新节点的parent</span>            node<span class="token punctuation">.</span>parent <span class="token operator">=</span> currentParent            <span class="token comment" spellcheck="true">// 子节点的parent要变为currentParent</span>            currentParent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 放入栈</span>        currentParent <span class="token operator">=</span> node <span class="token comment" spellcheck="true">// 指针指向栈中最后一个</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// vue2源码是保留最多两个空格</span>        text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 去掉空格</span>        <span class="token comment" spellcheck="true">// console.log(text, '文本');</span>        <span class="token comment" spellcheck="true">// 文本直接放入当前指向的节点的children</span>        text <span class="token operator">&amp;&amp;</span> currentParent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> TEXT_TYPE<span class="token punctuation">,</span>            text<span class="token punctuation">,</span>            parent<span class="token punctuation">:</span> currentParent        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">end</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(tag, '结束');</span>        <span class="token comment" spellcheck="true">// 弹出时,其开始标签和文本内容都被加到根结点的children了</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 弹出最后一个 // 可以校验标签是否合法</span>        currentParent <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 截取html字符串</span>    <span class="token keyword">function</span> <span class="token function">advance</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(html)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 匹配是否是开始标签</span>    <span class="token keyword">function</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> start <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(start); // {0: '&lt;div', 1: 'div' ,...}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 分组就是标签名</span>                tagName<span class="token punctuation">:</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// start[0].length是匹配到的字符串,('&lt;div')</span>            <span class="token function">advance</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 从html删除匹配到的字符串</span>            <span class="token comment" spellcheck="true">// console.log(match) </span>            <span class="token comment" spellcheck="true">// 只要不是开始标签的结束,就一直循环匹配</span>            <span class="token keyword">let</span> attr<span class="token punctuation">,</span> end            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>end <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagClose<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 将匹配到的内容存入attr</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>attr <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 因为已经将匹配的内容存放,所以可以删除匹配的字符串</span>                <span class="token function">advance</span><span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// console.log(attr);</span>                match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> attr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 因为等号两边可能有空格,所以value可能是attr[3]或[4]或[5]</span>                    value<span class="token punctuation">:</span> attr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> attr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">||</span> attr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 如果是disable这种没有 = 的,则值是true</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果有 > 这种结束标签,也要删除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">advance</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(match);</span>            <span class="token keyword">return</span> match        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(html);</span>        <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不是开始标签</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 每解析一个,就把解析的内容从html字符串里删除,html删完就是解析完成</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token comment" spellcheck="true">// 开头是 &lt;的 而下一个开头则是&lt;/的&lt; 所以两个 &lt; 之间就是标签的内容</span>        <span class="token comment" spellcheck="true">// 如果indexof的索引是0,则说明是个开始或结束标签</span>        <span class="token comment" spellcheck="true">// 如果indexof的索引大于0,则说明是文本结束位置</span>        <span class="token keyword">let</span> textEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> startTagMatch <span class="token operator">=</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 解析到开始标签</span>                <span class="token comment" spellcheck="true">// console.log(html);</span>                <span class="token function">start</span><span class="token punctuation">(</span>startTagMatch<span class="token punctuation">.</span>tagName<span class="token punctuation">,</span> startTagMatch<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果有结束标签</span>            <span class="token keyword">let</span> endTagMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>endTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">end</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token function">advance</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 文本内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> text <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> textEnd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 文本内容</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 解析到文本 </span>                <span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>                <span class="token function">advance</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// console.log(html)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(root)</span>    <span class="token comment" spellcheck="true">// console.log(html)</span>    <span class="token keyword">return</span> root<span class="token punctuation">}</span>   </code></pre><h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><p><img src="img_14.png" alt="渲染出来的ast"></p><h1 id="代码生成实现原理"><a href="#代码生成实现原理" class="headerlink" title="代码生成实现原理"></a>代码生成实现原理</h1><h2 id="compile-index-js-2"><a href="#compile-index-js-2" class="headerlink" title="compile/index.js"></a>compile/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>parseHTML<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./parse"</span><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token operator">/</span>\<span class="token punctuation">{</span>\<span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token operator">|</span>\r<span class="token operator">?</span>\n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token operator">?</span><span class="token punctuation">)</span>\<span class="token punctuation">}</span>\<span class="token punctuation">}</span><span class="token operator">/</span>g <span class="token comment" spellcheck="true">// 匹配 插值表达式</span><span class="token keyword">function</span> <span class="token function">gen</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 节点直接生成</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">codegen</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 文本</span>        <span class="token keyword">let</span> text <span class="token operator">=</span> node<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true">// 有可能是插值表达式或纯文本</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>defaultTagRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 纯文本</span>            <span class="token comment" spellcheck="true">// stringify是为了加上'',让传入的值变成字符串</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 带插值表达式</span>            <span class="token comment" spellcheck="true">// {{name}}hello => _v(_s(name)+'hello')</span>            <span class="token comment" spellcheck="true">// console.log(text)</span>            <span class="token keyword">let</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// 捕获文本</span>            <span class="token keyword">let</span> match            <span class="token comment" spellcheck="true">// 如果正则里有g,则再次exec会从上次匹配到的位置开始往后找</span>            <span class="token comment" spellcheck="true">// 重置正则匹配的起始位置</span>            defaultTagRE<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 记录上一次匹配的最后一位</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>match <span class="token operator">=</span> defaultTagRE<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// console.log(match)</span>                <span class="token keyword">let</span> index <span class="token operator">=</span> match<span class="token punctuation">.</span>index <span class="token comment" spellcheck="true">// 拿到匹配到字符({{)的开始索引</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// {{name}} hello {{age}} => hello</span>                    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`_s(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 插值表达式里的变量名</span>                <span class="token comment" spellcheck="true">// {{name}} xxx {{age}} -> 0 + name}}.length => 8</span>                <span class="token comment" spellcheck="true">// 下一次匹配到,就可以查看两次匹配中间有没有值 ({{name}} hello {{age}} => hello)</span>                lastIndex <span class="token operator">=</span> index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// {{name}} hello {{age}} world => world</span>                tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(tokens, `_v(${tokens.join("+")})`)</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tokens<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token function">gen</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成属性str的方法</span><span class="token keyword">function</span> <span class="token function">genProps</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// {name,value}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> attrs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> attr <span class="token operator">=</span> attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// color:red => {color:'red'}</span>            <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// color: xxx;font-weight:xxx 多个用;分开</span>            attr<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// color: xxx 单个用:分开</span>                <span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span>                obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token comment" spellcheck="true">// 给obj赋值</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            attr<span class="token punctuation">.</span>value <span class="token operator">=</span> obj        <span class="token punctuation">}</span>        str <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>attr<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// slice(开始,结尾),如果是负数则从末尾开始</span>    <span class="token comment" spellcheck="true">// 这里从0取到-1的字符,去掉了最后一个 ,</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">codegen</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解析children</span>    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token string">`_c('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ast<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token function">genProps</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'null'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ${ast.children.length ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : ''})`</span></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(code)</span>    <span class="token keyword">return</span> code<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 编译模板</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(template)</span>    <span class="token comment" spellcheck="true">// 1,将template转化为ast语法树</span>    <span class="token keyword">let</span> ast <span class="token operator">=</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2,生成render方法,render方法执行返回的结果就是虚拟dom</span>    <span class="token comment" spellcheck="true">// render(){ 把树组装成这样</span>    <span class="token comment" spellcheck="true">//     return _c('div', { id: 'app' },_c('div', { color: 'blue' }, _v(_s(name) + 'hello')</span>    <span class="token comment" spellcheck="true">//         , _c('span', null, _v(_s(age) + 'hello'))))</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// console.log(ast)</span>    <span class="token comment" spellcheck="true">// 生成代码 (模板引擎的实现原理就是 with + new Function)</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">codegen</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(this)</span>    <span class="token comment" spellcheck="true">// with会从传进来的参数里取值,这里的this是调用者</span>    code <span class="token operator">=</span> <span class="token template-string"><span class="token string">`with(this){return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span>    <span class="token comment" spellcheck="true">// 根据代码自动生成函数</span>    <span class="token keyword">let</span> render <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(render.toString())</span>    <span class="token comment" spellcheck="true">// function render(</span>    <span class="token comment" spellcheck="true">// ) {</span>    <span class="token comment" spellcheck="true">//     // 关闭严格模式才能用with</span>    <span class="token comment" spellcheck="true">//     with (this) { return _c('div', { id: "app", style: { "color": "skyblue", "background": " yellow" }, show: true }, _c('div', null, _v(_s(age) + "hello" + _s(name) + "world")), _c('br', null, _v("world"), _c('br', null, _c('span', null, _v(_s(age)))))) }</span>    <span class="token comment" spellcheck="true">// }</span>    <span class="token comment" spellcheck="true">// console.log(render.call(vm))</span>    <span class="token keyword">return</span> render<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// with (vm) {</span><span class="token comment" spellcheck="true">// 传this,则vm的属性会给this</span><span class="token comment" spellcheck="true">// name => this.name => vm.name => vm.data.name</span><span class="token comment" spellcheck="true">//     // 此时,name就是vm.name</span><span class="token comment" spellcheck="true">// log name</span><span class="token comment" spellcheck="true">// }</span></code></pre><h2 id="init-js-3"><a href="#init-js-3" class="headerlink" title="init.js"></a>init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>compileToFunction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mountComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    <span class="token comment" spellcheck="true">// ......</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(ops.render)// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// 组件挂载</span>        <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="lifecycle-js"><a href="#lifecycle-js" class="headerlink" title="lifecycle.js"></a>lifecycle.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 虚拟dom转真实dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 渲染虚拟dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 组件挂载</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1,调用render方法产生虚拟节点,虚拟dom</span>    vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// vm.$options.render 返回虚拟节点</span>    <span class="token comment" spellcheck="true">// 2,根据虚拟dom生成真实dom</span>    <span class="token comment" spellcheck="true">// 3,插入el元素</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// vue核心流程: 1,创建响应式数据 2,模板转化为ast语法树</span><span class="token comment" spellcheck="true">// 3,将ast转换为render函数 4,后续每次更新可以只执行render函数(无需再次执行ast转换)</span><span class="token comment" spellcheck="true">// render函数会产生虚拟节点(使用响应式数据)</span><span class="token comment" spellcheck="true">// 根据生成的虚拟dom创造真实dom</span></code></pre><h2 id="index-js-1"><a href="#index-js-1" class="headerlink" title="index.js"></a>index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>initMixin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>initLifeCycle<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拓展了vue,添加init方法</span><span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 组件渲染,生命周期</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h1 id="实现虚拟dom转真实dom"><a href="#实现虚拟dom转真实dom" class="headerlink" title="实现虚拟dom转真实dom"></a>实现虚拟dom转真实dom</h1><p><img src="img_15.png" alt="在线ast转换工具"></p><h2 id="vdom-index-js"><a href="#vdom-index-js" class="headerlink" title="vdom/index.js"></a>vdom/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 虚拟dom操作</span><span class="token comment" spellcheck="true">// _h() _c()</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElementVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> data<span class="token punctuation">.</span>key    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">delete</span> data<span class="token punctuation">.</span>key    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// _v()</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ast是语法转换,描述语法(html js css), &lt;div xxx> -> div,xxx=true</span><span class="token comment" spellcheck="true">// 虚拟dom是描述dom元素,可以增加自定义属性 div.xxx</span><span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">,</span>        tag<span class="token punctuation">,</span>        key<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        children<span class="token punctuation">,</span>        text        <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="lifecycle-js-1"><a href="#lifecycle-js-1" class="headerlink" title="lifecycle.js"></a>lifecycle.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createElementVnode<span class="token punctuation">,</span> createTextVnode<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./vdom"</span><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">}</span> <span class="token operator">=</span> vnode    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 标签</span>        <span class="token comment" spellcheck="true">// 创建真实节点</span>        <span class="token comment" spellcheck="true">// 将真实节点挂载到虚拟节点,后续修改就可以通过虚拟节点直接找到真实节点</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>        <span class="token function">patchProps</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新属性 xxx=xxx</span>        children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(vnode) 文本虚拟节点的tag是undefined</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是style样式属性</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> sytleName <span class="token keyword">in</span> props<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>sytleName<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>style<span class="token punctuation">[</span>sytleName<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化时是传一个真实dom,一个虚拟dom</span>    <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>nodeType    <span class="token comment" spellcheck="true">// 初次渲染</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> elm <span class="token operator">=</span> oldVNode <span class="token comment" spellcheck="true">// 拿到真实元素</span>        <span class="token keyword">const</span> parentElm <span class="token operator">=</span> elm<span class="token punctuation">.</span>parentNode <span class="token comment" spellcheck="true">// 拿到父元素</span>        <span class="token keyword">let</span> newElm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newElm<span class="token punctuation">)</span>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElm<span class="token punctuation">,</span> elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先插入到当前节点的后面(成为兄弟节点)</span>        parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除老节点 </span>        <span class="token keyword">return</span> newElm    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新时是传两个虚拟dom</span>        <span class="token comment" spellcheck="true">// diff算法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 虚拟dom转真实dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">const</span> el <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el        <span class="token comment" spellcheck="true">// console.log('update', vnode)</span>        <span class="token comment" spellcheck="true">// 既能初始化,又能更新</span>        vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// _c{'div',{},...children}</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this -> vm</span>        <span class="token keyword">return</span> <span class="token function">createElementVnode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// _v(text)</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_v <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(...arguments)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">createTextVnode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">createTextVnode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_s <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 插值表达式里的值(zs)如果不是对象,就直接返回 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value        <span class="token comment" spellcheck="true">// 如果是对象,就转字符串    </span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 渲染虚拟dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log('render')</span>        <span class="token comment" spellcheck="true">// const vm = this </span>        <span class="token comment" spellcheck="true">// 让with里的this指向vm</span>        <span class="token comment" spellcheck="true">// 此时可以视图和属性进行绑定</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>render<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ast语法转义后生成的render</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 组件挂载</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把要被挂载的真实dom,放到vm实例上</span>    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el <span class="token comment" spellcheck="true">// 这个el是querySelector获取了的</span>    <span class="token comment" spellcheck="true">// 1,调用render方法产生虚拟节点,虚拟dom</span>    vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// vm.$options.render 返回虚拟节点</span>    <span class="token comment" spellcheck="true">// 2,根据虚拟dom生成真实dom</span>    <span class="token comment" spellcheck="true">// 3,插入el元素</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// vue核心流程: 1,创建响应式数据 2,模板转化为ast语法树</span><span class="token comment" spellcheck="true">// 3,将ast转换为render函数 4,后续每次更新可以只执行render函数(无需再次执行ast转换)</span><span class="token comment" spellcheck="true">// render函数会产生虚拟节点(使用响应式数据)</span><span class="token comment" spellcheck="true">// 根据生成的虚拟dom创造真实dom</span></code></pre><h2 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{age}} hello {{name}} world    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    world    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// template: '&lt;div>hello&lt;/div>'</span>        <span class="token comment" spellcheck="true">// el: '#app', // 将数据解析到el上</span>        <span class="token comment" spellcheck="true">// render(){</span>        <span class="token comment" spellcheck="true">// return createElement('div',{})</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>        vm<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>        <span class="token comment" spellcheck="true">// 手动重新渲染</span>        vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_17.png" alt="img_17.png"><br><img src="img_16.png" alt="1秒后"><br><img src="img_18.png" alt="小结"></p><h1 id="实现vue中的依赖收集-双向绑定中的数据变化影响视图"><a href="#实现vue中的依赖收集-双向绑定中的数据变化影响视图" class="headerlink" title="实现vue中的依赖收集(双向绑定中的数据变化影响视图)"></a>实现vue中的依赖收集(双向绑定中的数据变化影响视图)</h1><blockquote><p>双向绑定实现原理是观察者模式</p></blockquote><p><img src="img_19.png" alt="组件化的好处"></p><h2 id="修改lifecycle-js的mountComponent方法"><a href="#修改lifecycle-js的mountComponent方法" class="headerlink" title="修改lifecycle.js的mountComponent方法"></a>修改lifecycle.js的mountComponent方法</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 组件挂载</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把要被挂载的真实dom,放到vm实例上</span>    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> el <span class="token comment" spellcheck="true">// 这个el是querySelector获取了的</span>    <span class="token comment" spellcheck="true">// 1,调用render方法产生虚拟节点,虚拟dom</span>    <span class="token comment" spellcheck="true">// 2,根据虚拟dom生成真实dom </span>    <span class="token comment" spellcheck="true">// 3,插入el元素</span>    <span class="token comment" spellcheck="true">// 创建watcher</span>    <span class="token keyword">const</span> updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true用于标识这是一个渲染watcher</span>    <span class="token comment" spellcheck="true">// 改为在Watcher创建时调用,进行初次渲染</span>    <span class="token comment" spellcheck="true">// vm._update(vm._render()) // vm.$options.render 返回虚拟节点</span><span class="token punctuation">}</span></code></pre><h2 id="修改observe-index-js的defineReactive方法"><a href="#修改observe-index-js的defineReactive方法" class="headerlink" title="修改observe/index.js的defineReactive方法"></a>修改observe/index.js的defineReactive方法</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    <span class="token comment" spellcheck="true">// value可能是一个对象,需要对其进行响应式处理</span>    <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 递归了,性能也会降低</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时每个属性都有dep </span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在模板里取值时(mount)才会依赖收集(此时有watcher,watcher把dep.target赋值为自己)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每个属性的dep是不同的</span>                dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 属性的收集器记住当前watcher</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置值时,如果是对象,也需要转响应式!  </span>            value <span class="token operator">=</span> newValue            dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通知更新</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="observe-dep-js"><a href="#observe-dep-js" class="headerlink" title="observe/dep.js"></a>observe/dep.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 用于唯一标识dep </span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 存放当前属性对应的watcher有哪些</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不希望加重复的watcher</span>        <span class="token comment" spellcheck="true">// this.subs.push(Dep.target)</span>        <span class="token comment" spellcheck="true">// debugger</span>        Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让watcher记住dep</span>    <span class="token punctuation">}</span>    <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在watcher里有去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新方法!</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 让所有watcher更新数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>watcher <span class="token operator">=</span><span class="token operator">></span> watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">export</span> <span class="token keyword">default</span> Dep </code></pre><h2 id="observe-watcher-js"><a href="#observe-watcher-js" class="headerlink" title="observe/watcher.js"></a>observe/watcher.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 唯一标识watcher</span><span class="token comment" spellcheck="true">// 1,渲染watcher时,把当前渲染的watcher放到dep.target</span><span class="token comment" spellcheck="true">// 2,调用_render() 会取值,走到属性的get上</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不同组件有不同的watcher</span>    <span class="token comment" spellcheck="true">// 传入vm和更新方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderWatcher <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// 是一个渲染watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> fn <span class="token comment" spellcheck="true">// getter意味着调用这个函数可以发生取值操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 后续实现计算属性和清理工作用得到</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存dep的id(多个),set集合可以去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// init get</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个组件有多个属性,重复的不用记录</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watcher记录dep</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 此时让dep记录watcher</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 当前的watcher给dep</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会从vm上取值</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 渲染完清空</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 重新渲染</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要给每个属性添加一个dep,目的是收集watcher</span><span class="token comment" spellcheck="true">// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher</span><span class="token comment" spellcheck="true">// 一个属性,对应多个组件,一个dep对应多个watcher</span><span class="token comment" spellcheck="true">// 多对多</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h2 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{age}} hello {{name}} world {{name}} {{name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        world        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// console.log(Vue);</span>        <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// obj: {</span>                    <span class="token comment" spellcheck="true">//     sex: 'boy'</span>                    <span class="token comment" spellcheck="true">// },</span>                    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>         <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'ls'</span>            vm<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>            <span class="token comment" spellcheck="true">// 手动重新渲染</span>            <span class="token comment" spellcheck="true">// vm._update(vm._render())</span>            vm<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 页面没用到的更新了也不会触发观察者</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_20.png" alt="img_20.png"></p><h1 id="实现异步更新原理"><a href="#实现异步更新原理" class="headerlink" title="实现异步更新原理"></a>实现异步更新原理</h1><blockquote><p>多个更新任务放到一个队列</p></blockquote><h2 id="watcher-js"><a href="#watcher-js" class="headerlink" title="watcher.js"></a>watcher.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 唯一标识watcher</span><span class="token comment" spellcheck="true">// 1,渲染watcher时,把当前渲染的watcher放到dep.target</span><span class="token comment" spellcheck="true">// 2,调用_render() 会取值,走到属性的get上</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不同组件有不同的watcher</span>    <span class="token comment" spellcheck="true">// 传入vm和更新方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderWatcher <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// 是一个渲染watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> fn <span class="token comment" spellcheck="true">// getter意味着调用这个函数可以发生取值操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 后续实现计算属性和清理工作用得到</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存dep的id(多个),set集合可以去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// init get</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个组件有多个属性,重复的不用记录</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watcher记录dep</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 此时让dep记录watcher</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 当前的watcher给dep</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会从vm上取值</span>        Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 渲染完清空</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 多次更新同一个数据,则应该用队列记录,只更新最后一次</span>        <span class="token function">queryWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 暂存watcher</span>        <span class="token comment" spellcheck="true">// this.get() // 重新渲染</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此时最终的vm.name已经赋值完毕(ls5),更新时取值,就是最后的这个值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要给每个属性添加一个dep,目的是收集watcher</span><span class="token comment" spellcheck="true">// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher</span><span class="token comment" spellcheck="true">// 一个属性,对应多个组件,一个dep对应多个watcher</span><span class="token comment" spellcheck="true">// 多对多</span><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 源码是用set来去重</span><span class="token comment" spellcheck="true">// 这里使用对象来去重</span><span class="token keyword">let</span> has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 防抖</span><span class="token comment" spellcheck="true">// 等待一段时间后进入该方法,一次性更新</span><span class="token keyword">function</span> <span class="token function">flushSchedulerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flushQueue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 刷新过程中,可能也有新的watcher,可以重新放到queue</span>    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    pending <span class="token operator">=</span> <span class="token boolean">false</span>    flushQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>q <span class="token operator">=</span><span class="token operator">></span> q<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">queryWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有重复,直接放入队列</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>        has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">// console.log(queue)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不管update多少次,最终只执行一轮刷新操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushSchedulerQueue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用户更新队列</span><span class="token keyword">let</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 异步批处理</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    waiting <span class="token operator">=</span> <span class="token boolean">false</span>    callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> timerFunc<span class="token comment" spellcheck="true">// 有bug,promise拿到的还是老的</span><span class="token comment" spellcheck="true">// if (Promise) { // 判断有没有promise(可以转字符串看是不是原生promise)</span><span class="token comment" spellcheck="true">//     // console.log('Promise')</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         Promise.resolve().then(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else if (MutationObserver) {</span><span class="token comment" spellcheck="true">//     // 这里传入的回调是异步的</span><span class="token comment" spellcheck="true">//     let observe = new MutationObserver(flushCallbacks)</span><span class="token comment" spellcheck="true">//     // 监控文本变化</span><span class="token comment" spellcheck="true">//     let textNode = document.createTextNode(1)</span><span class="token comment" spellcheck="true">//     observe.observe(textNode, {</span><span class="token comment" spellcheck="true">//         characterData: true,</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         textNode.textContent = 2</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else if (setImmediate) {</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         setImmediate(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else {</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         setTimeout(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 暴露给外部的更新方法</span><span class="token comment" spellcheck="true">// vue里的nextTick不是用api(定时器...),而是采用优雅降级的方式</span><span class="token comment" spellcheck="true">// 降级: promise(ie不兼容) => MutationObserver(h5的api) => setImmediate(ie专用) => setTimeout</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先用户还是先内部更新 ? => 看用户更新方法在前,还是数据变化在前</span>    <span class="token comment" spellcheck="true">// 定时器耗性能,promise执行比定时器快</span>    callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// timerFunc(flushCallbacks) </span>        <span class="token comment" spellcheck="true">// timerFunc() // 执行的就是flushCallbacks</span>        waiting <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h2 id="index-js-2"><a href="#index-js-2" class="headerlink" title="index.js"></a>index.js</h2><p><img src="img_21.png" alt="img_21.png"></p><h2 id="测试-7"><a href="#测试-7" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{age}} hello {{name}} world {{name}} {{name}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        world        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>            {{age}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// console.log(Vue);</span>        <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>                    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// obj: {</span>                    <span class="token comment" spellcheck="true">//     sex: 'boy'</span>                    <span class="token comment" spellcheck="true">// },</span>                    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'ant'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// template: '&lt;div>hello&lt;/div>'</span>            <span class="token comment" spellcheck="true">// el: '#app', // 将数据解析到el上</span>            <span class="token comment" spellcheck="true">// render(){</span>            <span class="token comment" spellcheck="true">// return createElement('div',{})</span>            <span class="token comment" spellcheck="true">// }</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 实现解析表达式的方案</span>        <span class="token comment" spellcheck="true">// 1,模板引擎 -> 性能差,需要正则匹配替换 vue1.0 -> 没有引入虚拟dom</span>        <span class="token comment" spellcheck="true">// 2,采用虚拟dom -> 数据变化后,比较虚拟dom的差异,最后更新需要更新的地方</span>        <span class="token comment" spellcheck="true">// 3,核心就是将模板变成js语法,通过js语法生成虚拟dom</span>        <span class="token comment" spellcheck="true">// 涉及语法转换,如 es6->es5 css压缩</span>        <span class="token comment" spellcheck="true">// 需要先变成语法树再重新组装代码,将template语法转换成render函数</span>        <span class="token comment" spellcheck="true">// setTimeout(() => {</span>        <span class="token comment" spellcheck="true">//     // 多次更新</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls1'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls2'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls3'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls4'</span>        <span class="token comment" spellcheck="true">//     vm.name = 'ls5'</span>        <span class="token comment" spellcheck="true">//     // vm.age = 23</span>        <span class="token comment" spellcheck="true">//     // 手动重新渲染</span>        <span class="token comment" spellcheck="true">//     // vm._update(vm._render())</span>        <span class="token comment" spellcheck="true">//     // vm.arr[0] = 0 // 页面没用到的更新了也不会触发观察者</span>        <span class="token comment" spellcheck="true">// }, 1000);</span>        vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'jw'</span> <span class="token comment" spellcheck="true">// 不会立即重新渲染页面</span>        <span class="token comment" spellcheck="true">// 同步获取,拿不到最新的</span>        <span class="token comment" spellcheck="true">// console.log(app.innerHTML);</span>        <span class="token comment" spellcheck="true">// setTimeout(() => {</span>        <span class="token comment" spellcheck="true">//     // 可以拿到最新的</span>        <span class="token comment" spellcheck="true">//     console.log(app.innerHTML);</span>        <span class="token comment" spellcheck="true">// }, 1000);</span>        <span class="token comment" spellcheck="true">// // promise优先级大于定时器,拿到的还是老的</span>        <span class="token comment" spellcheck="true">// Promise.resolve().then(() => {</span>        <span class="token comment" spellcheck="true">//     console.log(app.innerHTML);</span>        <span class="token comment" spellcheck="true">// })</span>        <span class="token comment" spellcheck="true">// 解决方案: 使用统一暴露给外部的更新方法</span>        <span class="token comment" spellcheck="true">// nextTick不是创建异步任务,而是将任务维护到队列</span>        vm<span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// vm.name = 'jw2' // 放在后面更新,前面拿到的应该还是老数据</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_22.png" alt="img_22.png"></p><h1 id="实现数组的更新"><a href="#实现数组的更新" class="headerlink" title="实现数组的更新"></a>实现数组的更新</h1><h2 id="observe"><a href="#observe" class="headerlink" title="observe/"></a>observe/</h2><h3 id="index-js-3"><a href="#index-js-3" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> newArrayProto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./array"</span><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">'./dep'</span><span class="token comment" spellcheck="true">// 观察data对象的类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data可能是对象或数组</span>        <span class="token comment" spellcheck="true">// 如果对象或数组新增数据,希望也能进行更新,所以给数组或对象本身添加dep</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 如果data是对象,则加上__ob__后,会一直进行响应式处理walk(在构造函数调用了),然后栈溢出</span>            enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 不可枚举,(循环时无法获取)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 把observer实例挂载到data,则array.js也可以使用observer的观测数组方法</span>        <span class="token comment" spellcheck="true">// 如果data上有一个__ob__属性,则说明被观测过</span>        <span class="token comment" spellcheck="true">// data.__ob__ = this</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果data是数组</span>            <span class="token comment" spellcheck="true">// 可以保留数组的特性,重写数组的部分方法 7个变异方法 可以修改数组本身</span>            <span class="token comment" spellcheck="true">// data.__proto__ = { // 这样重新指定原型链,会导致数组原有属性和方法的缺失</span>            <span class="token comment" spellcheck="true">//     push() {</span>            <span class="token comment" spellcheck="true">//         // 重写push</span>            <span class="token comment" spellcheck="true">//         console.log('push')</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// }</span>            data<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> newArrayProto            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Object.defineProperty只能劫持已经存在的属性 (vue里提供了专门的api($set $delete ...)来解决)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">walk</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 循环对象,对属性依次劫持</span>        <span class="token comment" spellcheck="true">// 重新定义属性(vue2的性能瓶颈所在),每个变量都添加get/set监听</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 观测,对数组和数组里的对象进行响应式处理</span>    <span class="token function">observeArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> current <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        current<span class="token punctuation">.</span>__ob__ <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 如果数组里有数组,而且还有数组,就继续依赖收集</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dependArray</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对象转响应式的方法(重新定义)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 闭包 属性劫持</span>    <span class="token comment" spellcheck="true">// value可能是一个对象,需要对其进行响应式处理</span>    <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 递归了,性能也会降低</span>    <span class="token comment" spellcheck="true">// childOb.dep是用来收集依赖的,childOb是observe方法返回的Observe实例对象</span>    <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时每个属性都有dep </span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内部使用了外部的变量(value),所以value被保存到闭包</span>        <span class="token comment" spellcheck="true">// 取值时执行</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在模板里取值时(mount)才会依赖收集(此时有watcher,watcher把dep.target赋值为自己)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 每个属性的dep是不同的</span>                dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 属性的收集器记住当前watcher</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果有childOb(非对象和被代理过的不会产生Observer实例)</span>                    childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// (数组或对象)进行依赖收集</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 解决数组嵌套数组无法依赖收集的问题</span>                        <span class="token comment" spellcheck="true">// 如果是数组</span>                        <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 修改时执行</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span>            <span class="token function">observe</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置值时,如果是对象,也需要转响应式!  </span>            value <span class="token operator">=</span> newValue            dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通知更新</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><h3 id="array-js"><a href="#array-js" class="headerlink" title="array.js"></a>array.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 重写数组部分方法</span><span class="token keyword">let</span> oldArrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">// 获取数组的原型</span><span class="token comment" spellcheck="true">// newArrayProto = oldArrayProto 拿到了旧原型</span><span class="token keyword">export</span> <span class="token keyword">let</span> newArrayProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>oldArrayProto<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 重写</span><span class="token keyword">let</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 找到所有的变异方法(可以修改数组的方法)</span>    <span class="token comment" spellcheck="true">// push 将新元素添加到数组的末尾，并返回新的长度</span>    <span class="token comment" spellcheck="true">// pop 删除数组的最后一个元素，并返回该元素 </span>    <span class="token comment" spellcheck="true">// shift 移除数组的第一项 </span>    <span class="token comment" spellcheck="true">// unshift 将新元素添加到数组的开头，并返回新的长度</span>    <span class="token comment" spellcheck="true">// reverse 反转数组中元素的顺序 </span>    <span class="token comment" spellcheck="true">// sort 排序</span>    <span class="token comment" spellcheck="true">// splice 从数组中添加/删除元素</span>    <span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span>    <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'unshift'</span><span class="token punctuation">,</span>    <span class="token string">'reverse'</span><span class="token punctuation">,</span>    <span class="token string">'sort'</span><span class="token punctuation">,</span>    <span class="token string">'splice'</span><span class="token punctuation">]</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// arr.push(1,2,3)</span>    <span class="token comment" spellcheck="true">// 重写方法</span>    newArrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用</span>        <span class="token comment" spellcheck="true">// 内部调用原方法,函数的劫持,切片编程</span>        <span class="token keyword">const</span> result <span class="token operator">=</span> oldArrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保留旧方法的逻辑 </span>        <span class="token comment" spellcheck="true">// 对新增的数据再次进行劫持</span>        <span class="token keyword">let</span> inserted <span class="token comment" spellcheck="true">// 是一个数组</span>        <span class="token keyword">let</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__ <span class="token comment" spellcheck="true">// 挂载在data的observer实例,可以使用其更新方法</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>                inserted <span class="token operator">=</span> args                <span class="token keyword">break</span>            <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// splice(开始位置,结束位置,{新增数据},{新增数据})</span>                <span class="token comment" spellcheck="true">// 获取新增的数据</span>                inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 去掉前两个,拿到剩下的</span>                <span class="token keyword">break</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(inserted)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(this)</span>            <span class="token comment" spellcheck="true">// 数组转响应式</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 数组变化,更新依赖收集</span>        ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="测试-8"><a href="#测试-8" class="headerlink" title="测试"></a>测试</h2><h3 id="index-html-2"><a href="#index-html-2" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>skyblue<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">show</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            {{ a }}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>            {{arr}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// console.log(Vue);</span>        <span class="token comment" spellcheck="true">// 响应式的数据变化 (数据变化可以被监控) </span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// vm.$mount('#app')</span>        <span class="token comment" spellcheck="true">// vm.arr[0] = 100 // 只重写数组方法,没有监视数组改变</span>        <span class="token comment" spellcheck="true">// vm.arr.length = 100 // 没有监控数组长度变化</span>        <span class="token comment" spellcheck="true">// 改变的不是arr里的值,而是改变arr对象本身,所有会更新</span>        <span class="token comment" spellcheck="true">// vm.arr = [123, 456]</span>        <span class="token comment" spellcheck="true">// vm.arr[3].a = 2 // a对象取值时会调用jsonstringfy进行取值,所以会更新</span>        <span class="token comment" spellcheck="true">// vm.a.a = 199</span>        vm<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">222</span> <span class="token comment" spellcheck="true">// 无法直接对不存在的值更新(要用$set)</span>        vm<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// $set原理</span>        vm<span class="token punctuation">.</span>a<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        vm<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span>        vm<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'d'</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_23.png" alt="vue3使用proxy"><br><img src="img_24.png" alt="img_24.png"></p><h1 id="实现计算属性"><a href="#实现计算属性" class="headerlink" title="实现计算属性"></a>实现计算属性</h1><blockquote><p>计算属性就是根据多个响应式数据得出的值</p></blockquote><h2 id="使用原生vue2的计算属性-进行分析"><a href="#使用原生vue2的计算属性-进行分析" class="headerlink" title="使用原生vue2的计算属性,进行分析"></a>使用原生vue2的计算属性,进行分析</h2><blockquote><ol><li>多次get只会执行一次(除非值发生了变化) -&gt; 需要维护一个dirty(脏值检测)</li><li>计算属性不会立刻执行</li><li>有get和set -&gt; 是一个defineProperty</li><li>可以监听计算属性所依赖的值的改变,从而更新视图 -&gt; 计算属性 是/有 watcher</li></ol></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         {{fullname}} {{fullname}} {{fullname}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script src="./vue.js">&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                firstname<span class="token punctuation">:</span> <span class="token string">'俊'</span><span class="token punctuation">,</span>                lastname<span class="token punctuation">:</span> <span class="token string">'杰'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 简写</span>                <span class="token comment" spellcheck="true">// fullname() { // defineProperty中的get方法</span>                <span class="token comment" spellcheck="true">// return this.firstname + this.lastname</span>                <span class="token comment" spellcheck="true">// }</span>                fullname<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 可见,计算属性需要维护一个dirty属性</span>                    <span class="token comment" spellcheck="true">// 默认计算属性不会立刻执行</span>                    <span class="token comment" spellcheck="true">// 就是一个defineProperty</span>                    <span class="token comment" spellcheck="true">// 如果组成计算属性的值改变(计算属性依赖的值发生改变),则会触发更新 -> 计算属性也是一个watcher</span>                    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (如果值没发生改变)多次调用只执行一次 (脏值检测)</span>                        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token keyword">set</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// vm.fullname = '123'</span>            vm<span class="token punctuation">.</span>firstname <span class="token operator">=</span> <span class="token string">'123'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_25.png"></p><blockquote><p>计算属性所依赖的属性的dep监听到变化,会去找watcher,此时stack里只剩下计算属性的watcher,但是当前的update方法执行get方法不会触发更新(传入watchcer的fn(是getter)不能更新视图)</p></blockquote><p><img src="img_27.png" alt="修改了dep对应的属性的值,此时渲染watcher执行结束已经被pop,需要让dep记录下渲染watcher,更新时调用渲染watcher来更新视图"></p><h2 id="修改state-js"><a href="#修改state-js" class="headerlink" title="修改state.js"></a>修改state.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">"./observe/dep"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> observe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./observe/index"</span><span class="token keyword">import</span> Watcher <span class="token keyword">from</span> <span class="token string">"./observe/watcher"</span><span class="token comment" spellcheck="true">// 对options内属性和方法进行操作 </span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data数据的初始化</span>        <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(vm.$options)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 计算属性初始化</span>        <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代理取值和设置值,通过响应式的方法来改变实际操作的值</span><span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据初始化(转为响应式)</span><span class="token keyword">function</span> <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 计算属性初始化</span><span class="token keyword">function</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 拿到用户定义的计算属性(有两种写法)</span>    <span class="token keyword">const</span> computed <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>computed    <span class="token comment" spellcheck="true">// console.log(computed)</span>    <span class="token comment" spellcheck="true">// 挂载到vm</span>    <span class="token keyword">let</span> watchers <span class="token operator">=</span> vm<span class="token punctuation">.</span>_computedWatchers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 保存不同计算属性的watcher</span>    <span class="token comment" spellcheck="true">// 拿到computed里定义的计算属性</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> userDef <span class="token operator">=</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 缓存</span>        <span class="token comment" spellcheck="true">// 需要监控计算属性中get(依赖的属性)的变化</span>        <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token keyword">typeof</span> userDef <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> userDef <span class="token punctuation">:</span> userDef<span class="token punctuation">.</span><span class="token keyword">get</span>        <span class="token comment" spellcheck="true">// 直接new,会走fn,所以用lazy来标识不需要立刻执行fn</span>        watchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token punctuation">{</span> lazy<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将计算属性和watcher对应起来</span>        <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义计算属性</span><span class="token keyword">function</span> <span class="token function">defineComputed</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断计算属性是函数还是对象</span>    <span class="token comment" spellcheck="true">// const getter = typeof userDef === 'function' ? userDef : userDef.get</span>    <span class="token keyword">const</span> setter <span class="token operator">=</span> userDef<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// console.log(getter, setter)</span>    <span class="token comment" spellcheck="true">// 可以通过实例(target[vm])获取对应属性 </span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this指向vm </span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> setter    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意: 计算属性不会收集依赖,只会让自己的依赖属性去收集依赖</span><span class="token comment" spellcheck="true">// 包装一下getter,判断是不是重复get了</span><span class="token keyword">function</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 检测是否要执行getter</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this指向vm</span>        <span class="token comment" spellcheck="true">// 拿到对应属性的watcher (计算属性watcher)</span>        <span class="token comment" spellcheck="true">// console.log(this, key) </span>        <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是dirty,就执行用户传入的函数</span>            watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用完会设置dirty为false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算属性出栈后,还要渲染,需要记录渲染watcher来更新视图</span>            watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(this.value)</span>        <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value <span class="token comment" spellcheck="true">// 返回watcher上的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h2 id="修改dep-js"><a href="#修改dep-js" class="headerlink" title="修改dep.js"></a>修改dep.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 用于唯一标识dep </span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 存放当前属性对应的watcher有哪些</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不希望加重复的watcher</span>        <span class="token comment" spellcheck="true">// this.subs.push(Dep.target)</span>        <span class="token comment" spellcheck="true">// debugger</span>        Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让watcher记住dep</span>    <span class="token punctuation">}</span>    <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在watcher里有去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新方法!</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 让所有watcher更新数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>watcher <span class="token operator">=</span><span class="token operator">></span> watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 这个stack是共用的</span><span class="token comment" spellcheck="true">// 只有一个watcher时,其实和之前没有差别</span><span class="token comment" spellcheck="true">// 改为将watcher放入栈,target指向最后放入的watcher</span><span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 渲染前入栈</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">pushTarget</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> watcher    <span class="token comment" spellcheck="true">// console.log(stack)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 渲染后出栈</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Dep </code></pre><h2 id="修改watcher-js"><a href="#修改watcher-js" class="headerlink" title="修改watcher.js"></a>修改watcher.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep<span class="token punctuation">,</span> <span class="token punctuation">{</span> popTarget<span class="token punctuation">,</span> pushTarget <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 唯一标识watcher</span><span class="token comment" spellcheck="true">// 1,渲染watcher时,把当前渲染的watcher放到dep.target</span><span class="token comment" spellcheck="true">// 2,调用_render() 会取值,走到属性的get上</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不同组件有不同的watcher</span>    <span class="token comment" spellcheck="true">// 传入vm和更新方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(fn)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderWatcher <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// 是一个渲染watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> fn <span class="token comment" spellcheck="true">// getter意味着调用这个函数可以发生取值操作</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 后续实现计算属性和清理工作用得到</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存dep的id(多个),set集合可以去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> options<span class="token punctuation">.</span>lazy <span class="token comment" spellcheck="true">// 是否立刻执行fn</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token comment" spellcheck="true">// 标记脏,是否第一次执行</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm        <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// init get</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个组件有多个属性,重复的不用记录</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watcher记录dep</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 此时让dep记录watcher</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用户传入的get方法 </span>        <span class="token comment" spellcheck="true">// console.log(this)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用户get函数的返回值 </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 如果再次取值,则state.js里的判断会false,不会再次触发this.get</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Dep.target = this // 当前的watcher给dep</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会从vm上取值</span>        <span class="token comment" spellcheck="true">// console.log(value)</span>        <span class="token comment" spellcheck="true">// console.log(this.getter)</span>        <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Dep.target = null // 渲染完清空</span>        <span class="token keyword">return</span> value <span class="token comment" spellcheck="true">// 计算属性执行的是用户传入的getter,返回值就是计算属性的值</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// dep.depend()</span>            <span class="token comment" spellcheck="true">// dep依赖渲染watcher和计算属性watcher,都需要收集</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让计算属性watcher也收集渲染watcher</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是计算属性,依赖的值变化了,会触发计算属性watcher的update方法</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 标记为true,可以更新(state.js)</span>            <span class="token comment" spellcheck="true">// console.log(1) </span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 多次更新同一个数据,则应该用队列记录,只更新最后一次</span>        <span class="token function">queryWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 暂存watcher</span>        <span class="token comment" spellcheck="true">// this.get() // 重新渲染</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此时最终的vm.name已经赋值完毕(ls5),更新时取值,就是最后的这个值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要给每个属性添加一个dep,目的是收集watcher</span><span class="token comment" spellcheck="true">// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher</span><span class="token comment" spellcheck="true">// 一个属性,对应多个组件,一个dep对应多个watcher</span><span class="token comment" spellcheck="true">// 多对多</span><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 源码是用set来去重</span><span class="token comment" spellcheck="true">// 这里使用对象来去重</span><span class="token keyword">let</span> has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 防抖</span><span class="token comment" spellcheck="true">// 等待一段时间后进入该方法,一次性更新</span><span class="token keyword">function</span> <span class="token function">flushSchedulerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flushQueue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 刷新过程中,可能也有新的watcher,可以重新放到queue</span>    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    pending <span class="token operator">=</span> <span class="token boolean">false</span>    flushQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>q <span class="token operator">=</span><span class="token operator">></span> q<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">queryWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有重复,直接放入队列</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>        has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">// console.log(queue)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不管update多少次,最终只执行一轮刷新操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushSchedulerQueue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用户更新队列</span><span class="token keyword">let</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 异步批处理</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    waiting <span class="token operator">=</span> <span class="token boolean">false</span>    callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 暴露给外部的更新方法</span><span class="token comment" spellcheck="true">// vue里的nextTick不是用api(定时器...),而是采用优雅降级的方式</span><span class="token comment" spellcheck="true">// 降级: promise(ie不兼容) => MutationObserver(h5的api) => setImmediate(ie专用) => setTimeout</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先用户还是先内部更新 ? => 看用户更新方法在前,还是数据变化在前</span>    <span class="token comment" spellcheck="true">// 定时器耗性能,promise执行比定时器快</span>    callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// timerFunc(flushCallbacks) </span>        <span class="token comment" spellcheck="true">// timerFunc() // 执行的就是flushCallbacks</span>        waiting <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h2 id="测试-9"><a href="#测试-9" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{fullname}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script src="https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js">&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                firstname<span class="token punctuation">:</span> <span class="token string">'俊'</span><span class="token punctuation">,</span>                lastname<span class="token punctuation">:</span> <span class="token string">'杰'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 简写</span>                <span class="token function">fullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// defineProperty中的get方法</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// console.log(this); </span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// fullname: {</span>                <span class="token comment" spellcheck="true">//     // 可见,计算属性需要维护一个dirty属性</span>                <span class="token comment" spellcheck="true">//     // 默认计算属性不会立刻执行</span>                <span class="token comment" spellcheck="true">//     // 就是一个defineProperty</span>                <span class="token comment" spellcheck="true">//     // 如果组成计算属性的值改变(计算属性依赖的值发生改变),则会触发更新 -> 计算属性也是一个watcher</span>                <span class="token comment" spellcheck="true">//     get() {</span>                <span class="token comment" spellcheck="true">//         console.log('run'); // (如果值没发生改变)多次调用只执行一次 (脏值检测)</span>                <span class="token comment" spellcheck="true">//         return this.firstname + this.lastname</span>                <span class="token comment" spellcheck="true">//     },</span>                <span class="token comment" spellcheck="true">//     set(newVal) {</span>                <span class="token comment" spellcheck="true">//         console.log(newVal);</span>                <span class="token comment" spellcheck="true">//     }</span>                <span class="token comment" spellcheck="true">// }</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>             vm<span class="token punctuation">.</span>firstname <span class="token operator">=</span> <span class="token string">'123'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_28.png" alt="img_28.png"><img src="img_29.png" alt="img_29.png"></p><h1 id="实现watch"><a href="#实现watch" class="headerlink" title="实现watch"></a>实现watch</h1><blockquote><p>watch的功能就是监控特定变量的变化<br>计算属性和watch底层都是基于计算属性</p></blockquote><h2 id="index-js-4"><a href="#index-js-4" class="headerlink" title="index.js"></a>index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> initMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initLifeCycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token keyword">import</span> Watcher<span class="token punctuation">,</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./observe/watcher"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化 </span>    <span class="token comment" spellcheck="true">// if (options.el) this.$mount(options.el) // 挂载</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$nextTick <span class="token operator">=</span> nextTick <span class="token comment" spellcheck="true">// 统一暴露给外部的更新方法</span><span class="token comment" spellcheck="true">// debugger</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 拓展了vue,添加init方法</span><span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 组件渲染</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>exprOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(exprOrFn, cb, options)</span>    <span class="token comment" spellcheck="true">// exprOrFn可能是函数(返回一个函数),也有可能是字符串</span>    <span class="token comment" spellcheck="true">// cb是watch监测的值变化时触发的函数</span>    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> exprOrFn<span class="token punctuation">,</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h2 id="state-js-1"><a href="#state-js-1" class="headerlink" title="state.js"></a>state.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep <span class="token keyword">from</span> <span class="token string">"./observe/dep"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> observe <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./observe/index"</span><span class="token keyword">import</span> Watcher <span class="token keyword">from</span> <span class="token string">"./observe/watcher"</span><span class="token comment" spellcheck="true">// 对options内属性和方法进行操作 </span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// data数据的初始化</span>        <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(vm.$options)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 计算属性初始化</span>        <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// watch的初始化</span>        <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代理取值和设置值,通过响应式的方法来改变实际操作的值</span><span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据初始化(转为响应式)</span><span class="token keyword">function</span> <span class="token function">initData</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 计算属性初始化</span><span class="token keyword">function</span> <span class="token function">initComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义计算属性</span><span class="token keyword">function</span> <span class="token function">defineComputed</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// .....</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意: 计算属性不会收集依赖,只会让自己的依赖属性去收集依赖</span><span class="token comment" spellcheck="true">// 包装一下getter,判断是不是重复get了</span><span class="token keyword">function</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 检测是否要执行getter</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this指向vm</span>        <span class="token comment" spellcheck="true">// 拿到对应属性的watcher (计算属性watcher)</span>        <span class="token comment" spellcheck="true">// console.log(this, key) </span>        <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是dirty,就执行用户传入的函数</span>            watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用完会设置dirty为false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 计算属性出栈后,还要渲染,需要记录渲染watcher来更新视图</span>            watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(this.value)</span>        <span class="token keyword">return</span> watcher<span class="token punctuation">.</span>value <span class="token comment" spellcheck="true">// 返回watcher上的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> watch <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>watch    <span class="token comment" spellcheck="true">// console.log(watch)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 三种情况: 字符串,数组,函数 (其实也可以是对象,但是这里不考虑)</span>        <span class="token keyword">const</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// 如果是数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不是数组</span>            <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建watch</span><span class="token keyword">function</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字符串,数组,函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="watcher-js-1"><a href="#watcher-js-1" class="headerlink" title="watcher.js"></a>watcher.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Dep<span class="token punctuation">,</span> <span class="token punctuation">{</span> popTarget<span class="token punctuation">,</span> pushTarget <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./dep"</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 唯一标识watcher</span><span class="token comment" spellcheck="true">// 1,渲染watcher时,把当前渲染的watcher放到dep.target</span><span class="token comment" spellcheck="true">// 2,调用_render() 会取值,走到属性的get上</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不同组件有不同的watcher</span>    <span class="token comment" spellcheck="true">// 传入vm和更新方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> exprOrFn<span class="token punctuation">,</span> options<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(fn)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token operator">++</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>renderWatcher <span class="token operator">=</span> options <span class="token comment" spellcheck="true">// 是一个渲染watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb <span class="token comment" spellcheck="true">// 获取用户定义的watch回调|处理逻辑</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exprOrFn <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 字符串</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> vm<span class="token punctuation">[</span>exprOrFn<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// vm.xxx</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> exprOrFn <span class="token comment" spellcheck="true">// getter意味着调用这个函数可以发生取值操作</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 后续实现计算属性和清理工作用得到</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存dep的id(多个),set集合可以去重</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">=</span> options<span class="token punctuation">.</span>lazy <span class="token comment" spellcheck="true">// 是否立刻执行fn</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token comment" spellcheck="true">// 标记脏,是否第一次执行</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm        <span class="token comment" spellcheck="true">// 拿到初始值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lazy <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// init get</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> options<span class="token punctuation">.</span>user<span class="token comment" spellcheck="true">// 标识是不是用户自己的watch</span>    <span class="token punctuation">}</span>    <span class="token function">addDep</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个组件有多个属性,重复的不用记录</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watcher记录dep</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 此时让dep记录watcher</span>            dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用户传入的get方法 </span>        <span class="token comment" spellcheck="true">// console.log(this)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 用户get函数的返回值 </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 如果再次取值,则state.js里的判断会false,不会再次触发this.get</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Dep.target = this // 当前的watcher给dep</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会从vm上取值</span>        <span class="token comment" spellcheck="true">// console.log(value)</span>        <span class="token comment" spellcheck="true">// console.log(this.getter)</span>        <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Dep.target = null // 渲染完清空</span>        <span class="token keyword">return</span> value <span class="token comment" spellcheck="true">// 计算属性执行的是用户传入的getter,返回值就是计算属性的值</span>    <span class="token punctuation">}</span>    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// dep.depend()</span>            <span class="token comment" spellcheck="true">// dep依赖渲染watcher和计算属性watcher,都需要收集</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 让计算属性watcher也收集渲染watcher</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是计算属性,依赖的值变化了,会触发计算属性watcher的update方法</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 标记为true,可以更新(state.js)</span>            <span class="token comment" spellcheck="true">// console.log(1) </span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 多次更新同一个数据,则应该用队列记录,只更新最后一次</span>        <span class="token function">queryWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 暂存watcher</span>        <span class="token comment" spellcheck="true">// this.get() // 重新渲染</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value        <span class="token comment" spellcheck="true">// 此时最终的vm.name已经赋值完毕(ls5),更新时取值,就是最后的这个值</span>        <span class="token keyword">let</span> newVal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// watch调用用户定义的处理逻辑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> newVal<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 需要给每个属性添加一个dep,目的是收集watcher</span><span class="token comment" spellcheck="true">// 一个组件中,有多个属性(n个属性对应一个视图) n个dep对应一个watcher</span><span class="token comment" spellcheck="true">// 一个属性,对应多个组件,一个dep对应多个watcher</span><span class="token comment" spellcheck="true">// 多对多</span><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 源码是用set来去重</span><span class="token comment" spellcheck="true">// 这里使用对象来去重</span><span class="token keyword">let</span> has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 防抖</span><span class="token comment" spellcheck="true">// 等待一段时间后进入该方法,一次性更新</span><span class="token keyword">function</span> <span class="token function">flushSchedulerQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> flushQueue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 刷新过程中,可能也有新的watcher,可以重新放到queue</span>    queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    pending <span class="token operator">=</span> <span class="token boolean">false</span>    flushQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>q <span class="token operator">=</span><span class="token operator">></span> q<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">queryWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有重复,直接放入队列</span>        queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>        has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token comment" spellcheck="true">// console.log(queue)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不管update多少次,最终只执行一轮刷新操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushSchedulerQueue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用户更新队列</span><span class="token keyword">let</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// 异步批处理</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    waiting <span class="token operator">=</span> <span class="token boolean">false</span>    callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    cbs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cb <span class="token operator">=</span><span class="token operator">></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> timerFunc<span class="token comment" spellcheck="true">// 有bug,promise拿到的还是老的</span><span class="token comment" spellcheck="true">// if (Promise) { // 判断有没有promise(可以转字符串看是不是原生promise)</span><span class="token comment" spellcheck="true">//     // console.log('Promise')</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         Promise.resolve().then(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else if (MutationObserver) {</span><span class="token comment" spellcheck="true">//     // 这里传入的回调是异步的</span><span class="token comment" spellcheck="true">//     let observe = new MutationObserver(flushCallbacks)</span><span class="token comment" spellcheck="true">//     // 监控文本变化</span><span class="token comment" spellcheck="true">//     let textNode = document.createTextNode(1)</span><span class="token comment" spellcheck="true">//     observe.observe(textNode, {</span><span class="token comment" spellcheck="true">//         characterData: true,</span><span class="token comment" spellcheck="true">//     })</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         textNode.textContent = 2</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else if (setImmediate) {</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         setImmediate(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// } else {</span><span class="token comment" spellcheck="true">//     timerFunc = () => {</span><span class="token comment" spellcheck="true">//         setTimeout(flushCallbacks)</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span><span class="token comment" spellcheck="true">// 暴露给外部的更新方法</span><span class="token comment" spellcheck="true">// vue里的nextTick不是用api(定时器...),而是采用优雅降级的方式</span><span class="token comment" spellcheck="true">// 降级: promise(ie不兼容) => MutationObserver(h5的api) => setImmediate(ie专用) => setTimeout</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先用户还是先内部更新 ? => 看用户更新方法在前,还是数据变化在前</span>    <span class="token comment" spellcheck="true">// 定时器耗性能,promise执行比定时器快</span>    callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">flushCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// timerFunc(flushCallbacks) </span>        <span class="token comment" spellcheck="true">// timerFunc() // 执行的就是flushCallbacks</span>        waiting <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Watcher</code></pre><h2 id="测试-10"><a href="#测试-10" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 可以给模板中的属性添加一个收集器 dep --></span>    <span class="token comment" spellcheck="true">&lt;!-- 页面渲染时 将渲染逻辑封装到watcher中, vm._update(vm.render()) --></span>    <span class="token comment" spellcheck="true">&lt;!-- 让dep记住这个watcher,数据变化时找到对应的watcher进行更新 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 多个{{name}},会有重复watcher,要避免 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果渲染的el里有注释,会卡死!!!! --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{fullname}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            {{firstname}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script src="https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js">&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                firstname<span class="token punctuation">:</span> <span class="token string">'俊'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token function">fullname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstname <span class="token operator">+</span> <span class="token string">'lastname'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 写法3 </span>            <span class="token comment" spellcheck="true">// methods: {</span>            <span class="token comment" spellcheck="true">//     fn(newVal, oldVal) {</span>            <span class="token comment" spellcheck="true">//         console.log(newVal, oldVal);</span>            <span class="token comment" spellcheck="true">//     }</span>            <span class="token comment" spellcheck="true">// },</span>            <span class="token comment" spellcheck="true">// 写法1,直接写函数</span>            watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// firstname(newVal, oldVal) {</span>                <span class="token comment" spellcheck="true">//     console.log(newVal, oldVal);</span>                <span class="token comment" spellcheck="true">// }</span>                <span class="token comment" spellcheck="true">// 写法2: 数组内函数依次执行</span>                <span class="token comment" spellcheck="true">// firstname: [</span>                <span class="token comment" spellcheck="true">//     // 'fn', // 写法3,调用method里定义的方法</span>                <span class="token comment" spellcheck="true">//     (newVal, oldVal) => {</span>                <span class="token comment" spellcheck="true">//     },</span>                <span class="token comment" spellcheck="true">//     (newVal, oldVal) => {</span>                <span class="token comment" spellcheck="true">//     }</span>                <span class="token comment" spellcheck="true">// ]</span>                <span class="token comment" spellcheck="true">// firstname: 'fn', // 写法3,调用method里定义的方法 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写法不同,但是底层都是$watch</span>        <span class="token comment" spellcheck="true">// 写法4</span>        <span class="token comment" spellcheck="true">// vm.$watch(() => vm.firstname, (newVal, oldVal) => {</span>        <span class="token comment" spellcheck="true">//     // vm.$watch("firstname", (newVal, oldVal) => {</span>        <span class="token comment" spellcheck="true">//     console.log(newVal, oldVal);</span>        <span class="token comment" spellcheck="true">// })</span>        vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> vm<span class="token punctuation">.</span>fullname<span class="token punctuation">,</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span>firstname <span class="token operator">=</span> <span class="token string">'123'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_30.png" alt="img_30.png"></p><h1 id="实现基本diff算法"><a href="#实现基本diff算法" class="headerlink" title="实现基本diff算法"></a>实现基本diff算法</h1><p><img src="img_31.png" alt="老节点没有,新节点有"><br><img src="5C1676119360637.png" alt="老节点有,新节点没有"><br><img src="img_32.png" alt="交叉比较"><br><img src="img_33.png" alt="交叉比较"><br><img src="img_34.png" alt="交叉比较解决的特殊情况"></p><h2 id="vue的index问题"><a href="#vue的index问题" class="headerlink" title="vue的index问题"></a>vue的index问题</h2><p><img src="img_37.png" alt="img_37.png"><br><img src="img_36.png" alt="img_36.png"><br><img src="img_35.png" alt="img_35.png"><br><img src="img_38.png" alt="img_38.png"><br><img src="img_39.png" alt="img_39.png"><br><img src="img_40.png" alt="key只能是number或string"><br><img src="img_41.png" alt="img_41.png"><br><img src="img_42.png" alt="乱序比较-映射表"><br><img src="img_43.png" alt="img_43.png"></p><h2 id="src-index-js"><a href="#src-index-js" class="headerlink" title="src/index.js"></a>src/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> compileToFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initLifeCycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token keyword">import</span> Watcher<span class="token punctuation">,</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./observe/watcher"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initStateMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createElm<span class="token punctuation">,</span> patch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./vdom/patch"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化 </span>    <span class="token comment" spellcheck="true">// if (options.el) this.$mount(options.el) // 挂载</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// debugger</span><span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 组件渲染</span><span class="token function">initStateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// test</span><span class="token comment" spellcheck="true">// let render1 = compileToFunction(`&lt;li key="b" b='1' style="color: red">{{name}}&lt;/li>`)</span><span class="token comment" spellcheck="true">// let render1 = compileToFunction(`&lt;li key="b" b='1' style="color: red">&lt;/li>`)</span><span class="token comment" spellcheck="true">// let render1 = compileToFunction(`&lt;ul style="color: red"></span><span class="token comment" spellcheck="true">//     &lt;li key="a">a&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="b">b&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="c">c&lt;/li></span><span class="token comment" spellcheck="true">// &lt;/ul>`)</span><span class="token comment" spellcheck="true">// let render1 = compileToFunction(`&lt;ul style="color: red"></span><span class="token comment" spellcheck="true">//     &lt;li key="a">a&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="b">b&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="c">c&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="d">d&lt;/li></span><span class="token comment" spellcheck="true">// &lt;/ul>`)</span><span class="token keyword">let</span> render1 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;ul style="color: red">    &lt;li key="a">a&lt;/li>    &lt;li key="b">b&lt;/li>    &lt;li key="c">c&lt;/li>      &lt;li key="d">d&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> vm1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"zf"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> prevVnode <span class="token operator">=</span> render1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(prevVnode);</span><span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>prevVnode<span class="token punctuation">)</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;span key="a" style="color: red;background: blue">{{name}}&lt;/span>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;li key="a" style="color: red;background: blue">{{name}}&lt;/li>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;li key="b" a='1' style="color: red;background: blue">{{name}}&lt;/li>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;li key="b" a='1' style="color: red;background: blue">&lt;/li>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;li key="b" a='1' style="color: red;background: blue">&lt;div>1&lt;span>2&lt;/span>&lt;/div>{{name}}&lt;/li>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;ul style="color: red;background: blue"></span><span class="token comment" spellcheck="true">//     &lt;li key="a">a&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="b">b&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="c">c&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="d">d&lt;/li></span><span class="token comment" spellcheck="true">// &lt;/ul>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;ul style="color: red;background: blue"></span><span class="token comment" spellcheck="true">//     &lt;li key="a">a&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="b">b&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="c">c&lt;/li> </span><span class="token comment" spellcheck="true">// &lt;/ul>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;ul style="color: red;background: blue"></span><span class="token comment" spellcheck="true">//     &lt;li key="d">d&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="a">a&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="b">b&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="c">c&lt;/li> </span><span class="token comment" spellcheck="true">// &lt;/ul>`)</span><span class="token comment" spellcheck="true">// let render2 = compileToFunction(`&lt;ul style="color: red;background: blue"></span><span class="token comment" spellcheck="true">//     &lt;li key="d">d&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="c">c&lt;/li> </span><span class="token comment" spellcheck="true">//     &lt;li key="b">b&lt;/li></span><span class="token comment" spellcheck="true">//     &lt;li key="a">a&lt;/li></span><span class="token comment" spellcheck="true">// &lt;/ul>`)</span><span class="token keyword">let</span> render2 <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;ul style="color: red;background: blue">      &lt;li key="b">b&lt;/li>    &lt;li key="m">m&lt;/li>    &lt;li key="a">a&lt;/li>    &lt;li key="p">p&lt;/li>       &lt;li key="c">c&lt;/li>      &lt;li key="q">q&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">)</span><span class="token keyword">let</span> vm2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"zf"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">let</span> nextVnode <span class="token operator">=</span> render2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(nextVnode);</span><span class="token keyword">let</span> newEl <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>nextVnode<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 暴力替换, 如果用户一直创建并操作dom, 会很耗性能</span><span class="token comment" spellcheck="true">// diff算法平级进行比较,如果相同就不修改</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// el.parentNode.replaceChild(newEl, el)</span>    <span class="token function">patch</span><span class="token punctuation">(</span>prevVnode<span class="token punctuation">,</span> nextVnode<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h2 id="vdom-patch-js"><a href="#vdom-patch-js" class="headerlink" title="vdom/patch.js"></a>vdom/patch.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> isSameVnode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"."</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text <span class="token punctuation">}</span> <span class="token operator">=</span> vnode    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 标签</span>        <span class="token comment" spellcheck="true">// 创建真实节点</span>        <span class="token comment" spellcheck="true">// 将真实节点挂载到虚拟节点,后续修改就可以通过虚拟节点直接找到真实节点</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>        <span class="token function">patchProps</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新属性 xxx=xxx</span>        children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// debugger</span>            <span class="token comment" spellcheck="true">// console.log(child)</span>            vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(vnode) 文本虚拟节点的tag是undefined</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// console.log(vnode.el)</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 老的属性中有,新的没有,要删除老的</span>    <span class="token comment" spellcheck="true">// style</span>    <span class="token keyword">let</span> oldStyles <span class="token operator">=</span> oldProps<span class="token punctuation">.</span>style <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> newStyles <span class="token operator">=</span> props<span class="token punctuation">.</span>style <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oldStyles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newStyles<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// attributes</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新的覆盖老的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果是style样式属性</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> sytleName <span class="token keyword">in</span> props<span class="token punctuation">.</span>style<span class="token punctuation">)</span> <span class="token punctuation">{</span>                el<span class="token punctuation">.</span>style<span class="token punctuation">[</span>sytleName<span class="token punctuation">]</span> <span class="token operator">=</span> props<span class="token punctuation">.</span>style<span class="token punctuation">[</span>sytleName<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化时是传一个真实dom,一个虚拟dom</span>    <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>nodeType    <span class="token comment" spellcheck="true">// 初次渲染</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> elm <span class="token operator">=</span> oldVNode <span class="token comment" spellcheck="true">// 拿到真实元素</span>        <span class="token keyword">const</span> parentElm <span class="token operator">=</span> elm<span class="token punctuation">.</span>parentNode <span class="token comment" spellcheck="true">// 拿到父元素</span>        <span class="token keyword">let</span> newElm <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(newElm)</span>        parentElm<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>newElm<span class="token punctuation">,</span> elm<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 先插入到当前节点的后面(成为兄弟节点)</span>        parentElm<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除老节点 </span>        <span class="token keyword">return</span> newElm    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新时是传两个虚拟dom</span>        <span class="token comment" spellcheck="true">// diff算法</span>        <span class="token comment" spellcheck="true">// console.log(oldVNode, vnode);</span>        <span class="token comment" spellcheck="true">// 1,两个节点不是同一个(key或标签tag不同),则直接更新</span>        <span class="token comment" spellcheck="true">// 2,如果两个节点是同一个,则比较其属性是否有差异(复用老的,更新属性)</span>        <span class="token comment" spellcheck="true">// 3,节点比较完毕,就比较儿子</span>        <span class="token comment" spellcheck="true">// console.log(isSameVnode(oldVNode, vnode));</span>        <span class="token comment" spellcheck="true">// 比较的方法</span>        <span class="token keyword">return</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(!isSameVnode(oldVNode, vnode));</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用老节点的父节点进行替换</span>        <span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>        oldVNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>        <span class="token keyword">return</span> el    <span class="token punctuation">}</span>    <span class="token keyword">let</span> el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>el <span class="token comment" spellcheck="true">// 复用老节点的元素    </span>    <span class="token comment" spellcheck="true">// 文本的情况,则比较文本内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVNode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true">// 新的文本,覆盖老文本</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 文本的tag是undefined</span>    <span class="token comment" spellcheck="true">// 如果是标签,需要对比标签的属性</span>    <span class="token comment" spellcheck="true">// console.log(1);</span>    <span class="token function">patchProps</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldVNode<span class="token punctuation">.</span>data<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 比较儿子节点 (1,双方都有children;2,只有一方有children)</span>    <span class="token keyword">let</span> oldChildren <span class="token operator">=</span> oldVNode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">let</span> newChildren <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(oldChildren, newChildren);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(el);</span>        <span class="token comment" spellcheck="true">// 完整diff,需要比较两个人的children</span>        <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新两个人的children</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有老的,有新的</span>        <span class="token comment" spellcheck="true">// 直接插入</span>        <span class="token function">mountChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有新的,老的有,要删除</span>        <span class="token comment" spellcheck="true">// unmountChildren(el, oldChildren)</span>        el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// 可以循环删除,这里只是图省事</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> el<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mountChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> child <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(el, newChildren, oldChildren);</span>    <span class="token comment" spellcheck="true">// 比较时,为了提高性能,需要优化(push,shift,pop,unshift,reserve,sort)</span>    <span class="token comment" spellcheck="true">// vue2使用双指针的方式比较两个节点,(优化特殊情况: )只要头指针超过尾指针或者重合,就执行更新</span>    <span class="token keyword">let</span> oldStartIndex <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> newStartIndex <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> oldEndIndex <span class="token operator">=</span> oldChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">let</span> newEndIndex <span class="token operator">=</span> newChildren<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">// console.log(oldEndIndex, newEndIndex);</span>    <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>oldEndIndex<span class="token punctuation">]</span>    <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 为了防止空格干扰,就在parse里去掉空格</span>    <span class="token comment" spellcheck="true">// console.log(oldStartVnode, newStartVnode, oldEndVnode, newEndVnode);</span>    <span class="token comment" spellcheck="true">// 特殊情况: 只要最后/或最前的几个节点不同</span>    <span class="token keyword">let</span> lastEqIndex <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 解决bug(insertBefore)</span>    <span class="token keyword">let</span> lastEqVnode <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token comment" spellcheck="true">// 根据老的列表做映射关系,用新的去找,找到就移动,找不到就添加,最后多余的删除</span>    <span class="token keyword">function</span> <span class="token function">makeIndexByKey</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            map<span class="token punctuation">[</span>child<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> index        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> map    <span class="token punctuation">}</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token function">makeIndexByKey</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex <span class="token operator">&amp;&amp;</span> newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 排除为undefined的情况</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldStartVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldEndVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 有一方 头指针 > 尾部指针,则停止循环</span>        <span class="token comment" spellcheck="true">// 从头向后比较</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 递归比较</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span>            oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 向后移动</span>            newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// 比较开头节点</span>            <span class="token comment" spellcheck="true">// console.log(oldStartIndex, oldEndIndex, newStartIndex, newEndIndex);</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从尾向前比较</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 最后一次相同后--,则存入的是不相同的元素</span>            lastEqVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>lastEqIndex<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">// console.log(lastEqIndex, lastEqVnode);</span>            oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 向前移动</span>            newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>            lastEqIndex <span class="token operator">=</span> oldEndIndex        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 交叉比较</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 老的尾 移到 老的头 (insertBefore有移动性,会把旧的移动走)</span>            el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 老的被复用,所以要替换老的</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span>            oldEndVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIndex<span class="token punctuation">]</span>            newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 老的头 移到 老的新尾 (insertBefore有移动性,会把旧的移动走)</span>            el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 老的被复用,所以要替换老的</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span>            oldStartVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIndex<span class="token punctuation">]</span>            newEndVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">--</span>newEndIndex<span class="token punctuation">]</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 乱序比对</span>            <span class="token comment" spellcheck="true">// 如果没有key就直接替换(没办法比较)</span>            <span class="token keyword">let</span> moveIndex <span class="token operator">=</span> map<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 如果拿到,则说明是要移动的索引</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>moveIndex <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> moveVnode <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>moveIndex<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 找的对应的虚拟节点,复用</span>                el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>moveVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>                oldChildren<span class="token punctuation">[</span>moveIndex<span class="token punctuation">]</span> <span class="token operator">=</span> undefined <span class="token comment" spellcheck="true">// 表示这个节点已经移动走了(如果是删除会报错)</span>                <span class="token function">patchVnode</span><span class="token punctuation">(</span>moveVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 比较属性和子节点</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 找不到就创建新的,直接插入到oldStartVnode前 </span>                el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">)</span><span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            newStartVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span><span class="token operator">++</span>newStartIndex<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(newStartIndex, newEndIndex);</span>    <span class="token comment" spellcheck="true">// 经过上面的比较后,指针都移到了双方最后一个相同的节点的位置,剩下的就是old或new独有的</span>    <span class="token comment" spellcheck="true">// 新的多余的插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIndex <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> newStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> newEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> childEl <span class="token operator">=</span> <span class="token function">createElm</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 可能是向前或向后追加</span>            <span class="token comment" spellcheck="true">// 根据后一位有无节点来判断是不是向后追加</span>            <span class="token comment" spellcheck="true">// Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.</span>            <span class="token comment" spellcheck="true">// let anchor = newChildren[newEndIndex + 1] ? newChildren[newEndIndex + 1].el : null // 获取下一个元素</span>            <span class="token keyword">let</span> anchor <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>newEndIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> lastEqVnode<span class="token punctuation">.</span>el <span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 获取下一个元素</span>            <span class="token comment" spellcheck="true">// el.appendChild(childEl) // 添加节点</span>            <span class="token comment" spellcheck="true">// console.log(childEl, anchor);</span>            el<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>childEl<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// anchor为null,则认为是appendChild</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 旧的多余的删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIndex <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> oldStartIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> oldEndIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 排除是undefined的情况,有值才删除</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> childEl <span class="token operator">=</span> oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el                el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>childEl<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="测试-11"><a href="#测试-11" class="headerlink" title="测试"></a>测试</h2><p><img src="img_44.png" alt="img_44.png"><br><img src="img_45.png" alt="img_45.png"></p><h1 id="实现组件的虚拟节点"><a href="#实现组件的虚拟节点" class="headerlink" title="实现组件的虚拟节点"></a>实现组件的虚拟节点</h1><p><img src="img_46.png" alt="img_46.png"><br><img src="img_48.png" alt="img_48.png"></p><h2 id="修改lifeCycle-js"><a href="#修改lifeCycle-js" class="headerlink" title="修改lifeCycle.js"></a>修改lifeCycle.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 虚拟dom转真实dom</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">const</span> el <span class="token operator">=</span> vm<span class="token punctuation">.</span>$el        <span class="token comment" spellcheck="true">// console.log('update', vnode)</span>        <span class="token comment" spellcheck="true">// 判断是否是更新操作</span>        <span class="token keyword">const</span> prevVnode <span class="token operator">=</span> vm<span class="token punctuation">.</span>_vnode        <span class="token comment" spellcheck="true">// 把组件第一次产生的虚拟节点保存到vnode上</span>        vm<span class="token punctuation">.</span>_vnode <span class="token operator">=</span> vnode        <span class="token keyword">if</span> <span class="token punctuation">(</span>prevVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 之前渲染过了</span>            <span class="token comment" spellcheck="true">// diff更新</span>            <span class="token function">patch</span><span class="token punctuation">(</span>prevVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化 </span>            vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> <span class="token function">patch</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><h2 id="修改init-js"><a href="#修改init-js" class="headerlink" title="修改init.js"></a>修改init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// debugger</span>        <span class="token comment" spellcheck="true">// 将用户传入的options挂载到vue对象上</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 原型中的this表示实例</span>        <span class="token comment" spellcheck="true">// vm.$options = options // $xxx 表示是vue的属性(在(vue里,如果data里的变量名是$开头,vue是拿不到的)</span>        vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// $xxx 表示是vue的属性(在(vue里,如果data里的变量名是$开头,vue是拿不到的)</span>        <span class="token comment" spellcheck="true">// 初始化状态</span>        <span class="token comment" spellcheck="true">// console.log(vm.$options)</span>        <span class="token function">initState</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// callHook(vm, 'created')     </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>            vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>el<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><h2 id="修改src-index-js"><a href="#修改src-index-js" class="headerlink" title="修改src/index.js"></a>修改src/index.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> compileToFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initGlobalAPI <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./globalApi"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./init"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initLifeCycle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token keyword">import</span> Watcher<span class="token punctuation">,</span> <span class="token punctuation">{</span> nextTick <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./observe/watcher"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> initStateMixin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createElm<span class="token punctuation">,</span> patch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./vdom/patch"</span><span class="token comment" spellcheck="true">// class会把所有方法耦合在一起</span><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// options就是用户提供的选项 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化 </span>    <span class="token comment" spellcheck="true">// if (options.el) this.$mount(options.el) // 挂载</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// debugger</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">initLifeCycle</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 组件渲染</span><span class="token function">initGlobalAPI</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token function">initStateMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> Vue</code></pre><h2 id="utils-js"><a href="#utils-js" class="headerlink" title="utils.js"></a>utils.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> strats <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">const</span> LIFECYCLE <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'beforeCreate'</span><span class="token punctuation">,</span>    <span class="token string">'create'</span><span class="token punctuation">]</span>LIFECYCLE<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>hook <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    strats<span class="token punctuation">[</span>hook<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果儿子有,父亲有,就拼在一起</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 儿子有,父亲没有,则将儿子包装为数组</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> p <span class="token comment" spellcheck="true">// 如果儿子没有,则用父亲即可</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 解决全局和局部声明同一组件的情况 </span>strats<span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>parentValue<span class="token punctuation">,</span> childValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parentValue<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> childValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回的是构造的对象,可以拿到父亲身上的属性,并且将儿子的都拷贝到自己身上</span>            res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> childValue<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取老的</span>        <span class="token function">margeField</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">margeField</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">margeField</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用策略模式减少if/else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strats<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> strats<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不在策略中,则以儿子为主</span>            options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> options<span class="token punctuation">}</span></code></pre><h2 id="修改init-js-1"><a href="#修改init-js-1" class="headerlink" title="修改init.js"></a>修改init.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> initState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> compileToFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./compile"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mountComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./lifecycle"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./utils"</span><span class="token comment" spellcheck="true">// 提供给vue来使用(此时全局还没有vue对象,所以没办法直接挂载)</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 渲染模板的操作</span>    Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(el)</span>        <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token comment" spellcheck="true">// 获取el对应的dom</span>        el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(el);</span>        <span class="token keyword">let</span> ops <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 先看有没有render函数</span>            <span class="token keyword">let</span> template <span class="token comment" spellcheck="true">// 没有render就看看有没有template</span>            <span class="token comment" spellcheck="true">// 如果用户没有使用了render函数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ops<span class="token punctuation">.</span>template <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 没有写模板,但是写了el</span>                <span class="token comment" spellcheck="true">/*                    1）innerHTML:                    从对象的起始位置到终止位置的全部内容,不包括Html标签。                    2）outerHTML:                    除了包含innerHTML的全部内容外, 还包含对象标签本身。                */</span>                template <span class="token operator">=</span> el<span class="token punctuation">.</span>outerHTML  <span class="token comment" spellcheck="true">// outerHTML在火狐下可能不兼容</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// if (el) {</span>                    <span class="token comment" spellcheck="true">// console.log(el) </span>                    <span class="token comment" spellcheck="true">// 写了template,就用用户的template</span>                    template <span class="token operator">=</span> ops<span class="token punctuation">.</span>template                <span class="token comment" spellcheck="true">// }</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// console.log(template)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 对模板进行编译</span>                <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>                ops<span class="token punctuation">.</span>render <span class="token operator">=</span> render            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log(ops.render)// 最终获取render方法</span>        <span class="token comment" spellcheck="true">// 组件挂载</span>        <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// script标签引用的vue.global.js,这个过程是在浏览器运行的</span>        <span class="token comment" spellcheck="true">// runtime是不包含模板编译的,整个编译是打包时通过loader来转义vue文件的,用runtime时不能使用template</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="globalApi-js"><a href="#globalApi-js" class="headerlink" title="globalApi.js"></a>globalApi.js</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> mergeOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./utils"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initGlobalAPI</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Vue构造函数挂到全局</span>        _base<span class="token punctuation">:</span> Vue    <span class="token punctuation">}</span>    Vue<span class="token punctuation">.</span>mixin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>mixin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> mixin<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(Vue.options);</span>    Vue<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(options);</span>        <span class="token keyword">function</span> <span class="token function">Sub</span><span class="token punctuation">(</span>options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 最终使用一个组件,就是new一个实例</span>            <span class="token comment" spellcheck="true">// console.log(options,Sub.options);</span>            <span class="token comment" spellcheck="true">// options = mergeOptions(Sub.options,options)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 默认对子类进行初始化操作</span>            <span class="token comment" spellcheck="true">// console.log(this._init,this.$mount);</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 子类可以找到父类原型 Sub.prototype.__proto__ = Vue.prototype</span>        Sub<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// object.create 但是此时Sub的构造器用的是父类的</span>        <span class="token comment" spellcheck="true">// console.log(Vue.prototype, Sub.prototype,Object.create(Vue.prototype));</span>        Sub<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Sub        <span class="token comment" spellcheck="true">// console.log(Sub.prototype.__proto__);</span>        <span class="token comment" spellcheck="true">// Sub.prototype.__proto__ = Vue.prototype</span>        Sub<span class="token punctuation">.</span>options <span class="token operator">=</span> <span class="token function">mergeOptions</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>options<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 保存用户传的选项</span>        <span class="token keyword">return</span> Sub    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明全局组件</span>    Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>components <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    Vue<span class="token punctuation">.</span>component <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果definition是函数,说明用户调用了extend()</span>        definition <span class="token operator">=</span>            <span class="token keyword">typeof</span> definition <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> definition <span class="token punctuation">:</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span>        Vue<span class="token punctuation">.</span>options<span class="token punctuation">.</span>components<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> definition        <span class="token comment" spellcheck="true">// console.log(Vue.options.components);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="vdom"><a href="#vdom" class="headerlink" title="vdom/"></a>vdom/</h2><h3 id="修改patch-js"><a href="#修改patch-js" class="headerlink" title="修改patch.js"></a>修改patch.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> isSameVnode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"."</span><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data    <span class="token comment" spellcheck="true">// data变为init方法</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>hook    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> data <span class="token operator">=</span> data<span class="token punctuation">.</span>init    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 初始化组件</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(vnode);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vnode<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text <span class="token punctuation">}</span> <span class="token operator">=</span> vnode    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 标签</span>        <span class="token comment" spellcheck="true">// 区分是组件还是元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件</span>            <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">.</span>$el        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建真实节点</span>        <span class="token comment" spellcheck="true">// 将真实节点挂载到虚拟节点,后续修改就可以通过虚拟节点直接找到真实节点</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>        <span class="token function">patchProps</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 更新属性 xxx=xxx</span>        children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// debugger</span>            <span class="token comment" spellcheck="true">// console.log(child)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">)</span> <span class="token keyword">return</span>            vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElm</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会把组件创建的节点添加到父节点</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(vnode) 文本虚拟节点的tag是undefined</span>        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// debugger</span>    <span class="token comment" spellcheck="true">// console.log(vnode.el)</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 组件挂载,没有传el</span>        <span class="token keyword">return</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// vm.$el 组件渲染的结果</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mountChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldChildren<span class="token punctuation">,</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><h3 id="修改index-js"><a href="#修改index-js" class="headerlink" title="修改index.js"></a>修改index.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 虚拟dom操作</span><span class="token comment" spellcheck="true">// _h() _c()</span><span class="token keyword">const</span> isReservedTag <span class="token operator">=</span> <span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 判断是不是html中已有的原始标签</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token string">'span'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createElementVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(data)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> key <span class="token operator">=</span> data<span class="token punctuation">.</span>key    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">delete</span> data<span class="token punctuation">.</span>key    <span class="token comment" spellcheck="true">// 如果是原始标签</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReservedTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(tag);</span>        <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创造虚拟节点</span>        <span class="token keyword">let</span> Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>components<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 拿到组件的构造函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">createComponentVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 创建组件虚拟节点</span><span class="token keyword">function</span> <span class="token function">createComponentVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> Ctor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Ctor <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是对象</span>        <span class="token comment" spellcheck="true">/*         let Sub = Vue.extend({            template: '&lt;button>click&lt;my-button>&lt;/my-button>&lt;/button>',            components: {                'my-button': {                    template: '&lt;button>click-my-sub&lt;/button>'                }            }            // Vue解析组件的template来渲染        })        */</span>        <span class="token comment" spellcheck="true">// 拿到构造函数</span>        Ctor <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">.</span>hook <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 组件创建真实节点时调用</span>            <span class="token comment" spellcheck="true">// 保存组件的实例到虚拟节点上</span>            <span class="token keyword">let</span> instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vnode<span class="token punctuation">.</span>componentsOptions<span class="token punctuation">.</span>Ctor</span>            instance<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// instance.$el</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// console.log(Ctor);</span>    <span class="token comment" spellcheck="true">// 创建vnode</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> Ctor <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// _v()</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(text)</span>    <span class="token keyword">return</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ast是语法转换,描述语法(html js css), &lt;div xxx> -> div,xxx=true</span><span class="token comment" spellcheck="true">// 虚拟dom是描述dom元素,可以增加自定义属性 div.xxx</span><span class="token keyword">function</span> <span class="token function">vnode</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">,</span> text<span class="token punctuation">,</span> componentsOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">,</span>        tag<span class="token punctuation">,</span>        key<span class="token punctuation">,</span>        data<span class="token punctuation">,</span>        children<span class="token punctuation">,</span>        text<span class="token punctuation">,</span>        componentsOptions <span class="token comment" spellcheck="true">// 组件的构造函数</span>        <span class="token comment" spellcheck="true">// ......</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断是不是同一个虚拟节点</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSameVnode</span><span class="token punctuation">(</span>vnode1<span class="token punctuation">,</span> vnode2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> vnode1<span class="token punctuation">.</span>tag <span class="token operator">===</span> vnode2<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> vnode1<span class="token punctuation">.</span>key <span class="token operator">===</span> vnode2<span class="token punctuation">.</span>key<span class="token punctuation">}</span></code></pre><h2 id="测试-12"><a href="#测试-12" class="headerlink" title="测试"></a>测试</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;script src="https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js">&lt;/script> --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 根实例</span>        <span class="token comment" spellcheck="true">// 组件三大特性: 自定义标签 组件有自己的事件和属性 组件插槽</span>        <span class="token comment" spellcheck="true">// 声明组件: 全局 (不管全局还是局部,内部都是调用Vue.extend)</span>        Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-button'</span><span class="token punctuation">,</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Vue解析组件的template来渲染</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;button>click-my&lt;/button>'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> Sub <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token punctuation">:</span> <span class="token string">'&lt;button>click&lt;my-button>&lt;/my-button>&lt;/button>'</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'my-button'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    template<span class="token punctuation">:</span> <span class="token string">'&lt;button>click-my-sub&lt;/button>'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Vue解析组件的template来渲染</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// console.log(new Sub());</span>        <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// const vm = new Vue({</span>        <span class="token comment" spellcheck="true">//     el: '#app',</span>        <span class="token comment" spellcheck="true">//     data() {</span>        <span class="token comment" spellcheck="true">//         return { name: 'zf' }</span>        <span class="token comment" spellcheck="true">//     },</span>        <span class="token comment" spellcheck="true">//     component: { // 类似js原型链,局部没有才找全局</span>        <span class="token comment" spellcheck="true">//         'my-button': {</span>        <span class="token comment" spellcheck="true">//             template: '&lt;button>click2&lt;/button>'</span>        <span class="token comment" spellcheck="true">//         }</span>        <span class="token comment" spellcheck="true">//     }</span>        <span class="token comment" spellcheck="true">// }) </span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="img_49.png" alt="img_49.png"></p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
          <category> js </category>
          
          <category> javaScript </category>
          
          <category> 造轮子 </category>
          
          <category> 框架 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> js </tag>
            
            <tag> javaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于java反射手写iset注解,实现自动new</title>
      <link href="/2023/01/30/ji-yu-java-fan-she-shou-xie-iset-zhu-jie-shi-xian-zi-dong-new/ji-yu-java-fan-she-shou-xie-iset-zhu-jie-shi-xian-zi-dong-new/"/>
      <url>/2023/01/30/ji-yu-java-fan-she-shou-xie-iset-zhu-jie-shi-xian-zi-dong-new/ji-yu-java-fan-she-shou-xie-iset-zhu-jie-shi-xian-zi-dong-new/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>这个注解是我之前学反射时写的,代码规范不是很好,有很多需要改进的地方,不过作为学习已经是够用了,也可以用来理解spring的依赖注入</p></blockquote><h1 id="1-新建maven工程"><a href="#1-新建maven工程" class="headerlink" title="1,新建maven工程"></a>1,新建maven工程</h1><h2 id="1-1-添加lombok依赖-简化开发"><a href="#1-1-添加lombok依赖-简化开发" class="headerlink" title="1.1,添加lombok依赖,简化开发"></a>1.1,添加lombok依赖,简化开发</h2><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="2-注解"><a href="#2-注解" class="headerlink" title="2,注解"></a>2,注解</h1><p>写一个注解类,代码如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 作用在字段上</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 运行时使用</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">iset</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注入单个属性</span>    String <span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要设置的属性名</span>    String <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要设置的属性值</span>    <span class="token comment" spellcheck="true">// 注入多个属性</span>    <span class="token comment" spellcheck="true">// 两个数组一一对应,到时候逐个赋值</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>说明一下:  </p><blockquote><p>@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。<br>@Target - 标记使用这个注解的应该是哪种 Java 成员。</p></blockquote><p>而我们的目标是声明字段(一个类的实例),然后通过iset来为这个字段创建实例和注入属性</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注入单个字段 </span><span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setName <span class="token operator">=</span> <span class="token string">"age"</span> <span class="token punctuation">,</span> setData <span class="token operator">=</span> <span class="token string">"8"</span> <span class="token punctuation">)</span>tStu stu2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注入多个字段</span><span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">,</span><span class="token string">"lisi@qq.com"</span><span class="token punctuation">,</span><span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>User user<span class="token punctuation">;</span></code></pre><h1 id="3-核心代码逻辑"><a href="#3-核心代码逻辑" class="headerlink" title="3,核心代码逻辑"></a>3,核心代码逻辑</h1><p>我们这里希望怎么做呢, 就是定义一个类,提供方法,将当前所有标记了@iset注解的字段创建, 并将其属性赋值, 然后放入一个公共map&lt;类实例字段的字段名,类实例&gt;, 想要类实例只需要从公共map里取就行了</p><h2 id="3-1-iConstruct"><a href="#3-1-iConstruct" class="headerlink" title="3.1,iConstruct"></a>3.1,iConstruct</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author malguy-wang sir * @create --- */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">iConstruct</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>iConstruct<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * a map to save all class (保存所有创建的类)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> dogs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取所有创建好的类     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dogs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 传入当前类的路径,创建新的实例     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">generateDogs</span><span class="token punctuation">(</span>String targetClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"\t\t==========>>> iset运行开始 &lt;&lt;&lt;=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//路径改为全类名</span>        targetClass <span class="token operator">=</span> iUtils<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//寻找并加载要创建的类</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//准备返回的类</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取当前类所有的全类名</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 会带有当前类和全类名+空格+作为属性的类的全类名</span>            <span class="token comment" spellcheck="true">// private org.malred.iset.entitys.User org.malred.iset.itest.t.user</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"获取当前类所有的全类名 => "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取类实例的字段名称 ( org.malred.iset.itest.t.user => user )</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"解析类实例字段名 => "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>                    classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>                    classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"解析结果 => "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 根据解析完成的类实例字段名,获取类实例需要的字段,然后赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"为 => { "</span><span class="token operator">+</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" } 类实例字段,注入属性值开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取所有字段</span>            <span class="token comment" spellcheck="true">// isAnnotationPresent(iset.class));//判断有没有加注解</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>iset<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                iset is <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>iset<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取注解</span>                Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> type <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取类</span>                Object iu <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建实例</span>                Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> iu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取属性名</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> iargs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 属性名数组</span>                <span class="token comment" spellcheck="true">// 解析属性名(全类名 -> 字段名)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    iargs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>                            <span class="token comment" spellcheck="true">// 属性会带全类名,比如org.malred.iset.itest.t.user</span>                            fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                            fields<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"获取类属性名称 => "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 注入单个属性时</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 { "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" } 为 { "</span> <span class="token operator">+</span> is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" } 中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Field declaredField <span class="token operator">=</span> iu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 设置可访问(私有字段也能被访问)</span>                        declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 传入字段和属性,赋值</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>iUtils<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 如果是数值类型需要转int</span>                            declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> is<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 => "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 注入属性</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> fields<span class="token punctuation">.</span>length<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> is<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 { "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" } 为 { "</span>                                    <span class="token operator">+</span> is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" } 中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// iu是创建了的实例</span>                            Field declaredField <span class="token operator">=</span> iu<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 如果是数值类型需要转int</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>iUtils<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>iu<span class="token punctuation">,</span> is<span class="token punctuation">.</span><span class="token function">setDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"设置参数 => "</span> <span class="token operator">+</span> iargs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" 完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"为 => { "</span><span class="token operator">+</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" } 类实例字段,注入属性值完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"将 { "</span> <span class="token operator">+</span> classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" } 放入map中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 放入dogs集合</span>                u<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>classes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> iu<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"\t\t==========>>> iset运行结束 &lt;&lt;&lt;=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> u<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成类,并获取所有创建好的类(map)     *     * @param nowClass 当前类的路径或全类名     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getDogs</span><span class="token punctuation">(</span>String nowClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        dogs <span class="token operator">=</span> <span class="token function">generateDogs</span><span class="token punctuation">(</span>nowClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dogs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过id(字段名)获取类实例     *     * @param className     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getDogByName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> dogs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//just new class , than U can get a map named dogs which have all class you need</span>    <span class="token keyword">public</span> <span class="token function">iConstruct</span><span class="token punctuation">(</span>String nowClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token function">getDogs</span><span class="token punctuation">(</span>nowClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><h2 id="3-2-iUtils-工具类"><a href="#3-2-iUtils-工具类" class="headerlink" title="3.2,iUtils 工具类"></a>3.2,iUtils 工具类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>utils<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * 工具类 * * @author malguy-wang sir * @create --- */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">iUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断字符串是不是数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//传入来自源根的路径,返回全类名</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getClassName</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> path<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4,测试"></a>4,测试</h1><h2 id="4-1-实体类"><a href="#4-1-实体类" class="headerlink" title="4.1,实体类"></a>4.1,实体类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span> <span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> age<span class="token punctuation">;</span>  <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span>  </code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">;</span> <span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span> <span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">tStu</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h2 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2,测试"></a>4.2,测试</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">t</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">,</span> <span class="token string">"lisi@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"56"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    tStu stu<span class="token punctuation">;</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setNames <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> setDatas <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    tStu stu1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@iset</span><span class="token punctuation">(</span>setName <span class="token operator">=</span> <span class="token string">"age"</span> <span class="token punctuation">,</span> setData <span class="token operator">=</span> <span class="token string">"8"</span> <span class="token punctuation">)</span>    tStu stu2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">t1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Map iuser <span class="token operator">=</span> iConstruct<span class="token punctuation">.</span>                <span class="token function">generateDogs</span><span class="token punctuation">(</span><span class="token string">"org/malred/iset/itest/t.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iuser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">iConstruct</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map map <span class="token operator">=</span> iConstruct<span class="token punctuation">.</span><span class="token function">getDogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stu1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stu2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-3-结果"><a href="#4-3-结果" class="headerlink" title="4.3,结果"></a>4.3,结果</h2><pre class=" language-java"><code class="language-java"><span class="token string">"C:\Program Files\Java\jdk1.8.0_241\bin\java.exe"</span> <span class="token operator">-</span>Dvisualvm<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">218153308319900</span> <span class="token string">"-javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.1\lib\idea_rt.jar=50078:C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.1\bin"</span> <span class="token operator">-</span>Dfile<span class="token punctuation">.</span>encoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>classpath <span class="token string">"C:\Program Files\Java\jdk1.8.0_241\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_241\jre\lib\rt.jar;C:\Users\13695\Desktop\造轮子\代码\手写造轮子\iset(反射小练习)\myConstruct\target\classes;D:\java_maven\maven_repository\org\projectlombok\lombok\1.18.24\lombok-1.18.24.jar"</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span>         <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">>>></span> iset运行开始 <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">private</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>User org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>user一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu1一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取当前类所有的全类名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu2一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">private</span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>User org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>user一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> user一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> stu一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu1一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> stu1一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析类实例字段名 <span class="token operator">=</span><span class="token operator">></span> org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>entitys<span class="token punctuation">.</span>tStu org<span class="token punctuation">.</span>malred<span class="token punctuation">.</span>iset<span class="token punctuation">.</span>itest<span class="token punctuation">.</span>t<span class="token punctuation">.</span>stu2一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 解析结果 <span class="token operator">=</span><span class="token operator">></span> stu2一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> id一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> email一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> id <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">200</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> id 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> name <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> 李四 <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> name 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">18</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> email <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> lisi<span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> email 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> user <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> name <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> 张三 <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> name 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">56</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> stu <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu1 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> name <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> 王五 <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> name 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">8</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu1 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> stu1 <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu2 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值开始一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> name一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 获取类属性名称 <span class="token operator">=</span><span class="token operator">></span> age一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token punctuation">{</span> age <span class="token punctuation">}</span> 为 <span class="token punctuation">{</span> <span class="token number">8</span> <span class="token punctuation">}</span> 中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 设置参数 <span class="token operator">=</span><span class="token operator">></span> age 完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 为 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> stu2 <span class="token punctuation">}</span> 类实例字段<span class="token punctuation">,</span>注入属性值完毕一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span> 将 <span class="token punctuation">{</span> stu2 <span class="token punctuation">}</span> 放入map中一月 <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2023</span> <span class="token number">8</span><span class="token operator">:</span><span class="token number">18</span><span class="token operator">:</span><span class="token number">23</span> 下午 com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>Logger warn警告<span class="token operator">:</span>         <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">>>></span> iset运行结束 <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;=</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token function">User</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> name<span class="token operator">=</span>李四<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> email<span class="token operator">=</span>lisi<span class="token annotation punctuation">@qq</span><span class="token punctuation">.</span>com<span class="token punctuation">)</span><span class="token function">tStu</span><span class="token punctuation">(</span>name<span class="token operator">=</span>张三<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token function">tStu</span><span class="token punctuation">(</span>name<span class="token operator">=</span>王五<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token function">tStu</span><span class="token punctuation">(</span>name<span class="token operator">=</span>null<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>进程已结束，退出代码为 <span class="token number">0</span> </code></pre><h1 id="问题和拓展"><a href="#问题和拓展" class="headerlink" title="*.问题和拓展"></a>*.问题和拓展</h1><p>git仓库</p><blockquote><p><a href="https://github.com/malred/myConstruct.git">https://github.com/malred/myConstruct.git</a><br><a href="https://gitee.com/malguy/myConstruct.git">https://gitee.com/malguy/myConstruct.git</a></p></blockquote><h2 id="1-对象"><a href="#1-对象" class="headerlink" title="*.1,对象"></a>*.1,对象</h2><p>我这里没有考虑类里面有对象类型的属性的情况,如果要创建的类需要一个对象属性,如何实现?</p><h2 id="2-循环依赖"><a href="#2-循环依赖" class="headerlink" title="*.2,循环依赖"></a>*.2,循环依赖</h2><p>如果有user和stu类,user类有一个属性是stu类,而stu类也有一个user属性,那么,就会互相依赖,无法创建,如何解决?</p><h2 id="3-扫描"><a href="#3-扫描" class="headerlink" title="*.3,扫描"></a>*.3,扫描</h2><p>当前需要手动传入当前类路径,能不能实现像spring的scan一样的扫描,将某个实现@Scan注解的类的子目录全部扫描,并根据有无@compnent+@iset注解来注入呢</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> 造轮子 </tag>
            
            <tag> 反射 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk11缺失依赖报错</title>
      <link href="/2022/10/16/jdk11-que-shi-yi-lai-bao-cuo/jdk11-que-shi-yi-lai-bao-cuo/"/>
      <url>/2022/10/16/jdk11-que-shi-yi-lai-bao-cuo/jdk11-que-shi-yi-lai-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>当jdk8升级到jdk11,Java EE相关模块默认不在Java包里面了，相关的类需要增加额外依赖或者替换成其他的类,如果你直接运行,可能会出现这个问题: </p><p>error: package javax.xml.bind does not exist<br>import javax.xml.bind.JAXBException;  </p><p>Exception in thread “main” java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException<br>    at monitor.Main.main(Main.java:27)<br>Caused by: java.lang.ClassNotFoundException: javax.xml.bind.JAXBException<br>    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:582)<br>    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:185)<br>    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:496)<br>    … 1 more<br> 我的建议是直接加上缺失的依赖: </p><pre class=" language-xml"><code class="language-xml">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sun.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish.jaxb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jaxb-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.10-b140310.1920<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>activation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--引⼊Jaxb，结束--></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> bug记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea启动报错</title>
      <link href="/2022/10/16/idea-qi-dong-bao-cuo/idea-qi-dong-bao-cuo/"/>
      <url>/2022/10/16/idea-qi-dong-bao-cuo/idea-qi-dong-bao-cuo/</url>
      
        <content type="html"><![CDATA[<p>今天启动idea突然报错:   </p><p>Internal error. Please refer to <a href="https://jb.gg/ide/critical-startup-errors">https://jb.gg/ide/critical-startup-errors</a> </p><p>java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind</p><p>….</p><p>虽然不知道什么原因,但是拿报错搜了一下,找到解决方法</p><p>win+x –&gt; 以管理员身份运行powershell –&gt; 执行命令net stop winnat和 net start winnat 就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ide </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> bug记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>尚硅谷spring security笔记一</title>
      <link href="/2022/10/15/spring-security-bi-ji-yi/spring-security-bi-ji-yi/"/>
      <url>/2022/10/15/spring-security-bi-ji-yi/spring-security-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p><img src="img.png" alt="img.png"><img src="img_1.png" alt="img_1.png"><img src="img_2.png" alt="img_2.png"><img src="img_3.png" alt="img_3.png"><img src="img_4.png" alt="img_4.png"><br><img src="img_5.png" alt="img_5.png"><img src="img_6.png" alt="img_6.png"><img src="img_7.png" alt="img_7.png"><br><img src="img_8.png" alt="img_8.png"><img src="img_9.png" alt="img_9.png"><br><img src="img_10.png" alt="img_10.png"><br><img src="img_11.png" alt="img_11.png"><br><img src="img_12.png" alt="img_12.png"><br><img src="img_13.png" alt="img_13.png"><br><img src="img_14.png" alt="img_14.png"><br><img src="img_15.png" alt="img_15.png"><img src="img_16.png" alt="img_16.png"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="ig_1.png" alt="ig.png"><img src="ig_2.png" alt="ig_1.png"><img src="ig_3.png" alt="ig_2.png"><img src="ig_4.png" alt="ig_3.png"><img src="ig_5.png" alt="ig_4.png"><br><img src="ig_6.png" alt="ig_5.png"><img src="ig_7.png" alt="ig_6.png"></p>]]></content>
      
      
      <categories>
          
          <category> security </category>
          
          <category> 权限 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug记录 </tag>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> security </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人spring踩坑合集</title>
      <link href="/2022/10/15/ge-ren-spring-cai-keng-he-ji/ge-ren-spring-cai-keng-he-ji/"/>
      <url>/2022/10/15/ge-ren-spring-cai-keng-he-ji/ge-ren-spring-cai-keng-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="注册的时候赋值了不存在的参数："><a href="#注册的时候赋值了不存在的参数：" class="headerlink" title="注册的时候赋值了不存在的参数："></a>注册的时候赋值了不存在的参数：</h1><p><img src="img.png" alt="img.png"></p><h1 id="内部bean设置错误报错"><a href="#内部bean设置错误报错" class="headerlink" title="内部bean设置错误报错"></a>内部bean设置错误报错</h1><p><img src="img_1.png" alt="img_1.png"><br><img src="img_2.png" alt="img_2.png"><br><img src="img_3.png" alt="img_3.png"><br><img src="img_4.png" alt="img_4.png"></p><h2 id="不能在内部类配置接口多态"><a href="#不能在内部类配置接口多态" class="headerlink" title="不能在内部类配置接口多态"></a>不能在内部类配置接口多态</h2><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p><img src="img_5.png" alt="img_5.png"></p><h3 id="首先传入name字符串（应该是通过配置文件或别的方式），然后把-换成-，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null"><a href="#首先传入name字符串（应该是通过配置文件或别的方式），然后把-换成-，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null" class="headerlink" title="首先传入name字符串（应该是通过配置文件或别的方式），然后把 . 换成 / ，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null"></a>首先传入name字符串（应该是通过配置文件或别的方式），然后把 . 换成 / ，在接上class（其实就是获取name对应的类的路径），然后通过ucp的getresource方法寻找类，如果不为空就返回一个类，否则返回null</h3><h3 id="此时result为null，返回类未找到异常"><a href="#此时result为null，返回类未找到异常" class="headerlink" title="此时result为null，返回类未找到异常"></a>此时result为null，返回类未找到异常</h3><p><img src="img_6.png" alt="img_6.png"><br><img src="img_7.png" alt="img_7.png"><br><img src="img_8.png" alt="img_8.png"><br><img src="img_9.png" alt="img_9.png"><br><img src="img_10.png" alt="img_10.png"></p><h2 id="解决：修改配置文件"><a href="#解决：修改配置文件" class="headerlink" title="解决：修改配置文件"></a>解决：修改配置文件</h2><h3 id="内部声明对象不能用property直接创建"><a href="#内部声明对象不能用property直接创建" class="headerlink" title="内部声明对象不能用property直接创建"></a>内部声明对象不能用property直接创建</h3><p><img src="img_11.png" alt="img_11.png"></p><h1 id="内部类未添加set方法而报错"><a href="#内部类未添加set方法而报错" class="headerlink" title="内部类未添加set方法而报错"></a>内部类未添加set方法而报错</h1><p><img src="img_12.png" alt="img_12.png"><br><img src="img_13.png" alt="img_13.png"></p><h2 id="配置文件会调用set方法来赋值"><a href="#配置文件会调用set方法来赋值" class="headerlink" title="配置文件会调用set方法来赋值"></a>配置文件会调用set方法来赋值</h2><p><img src="img_14.png" alt="img_14.png"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p><img src="img_15.png" alt="img_15.png"><br><img src="img_16.png" alt="img_16.png"></p><h1 id="外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法"><a href="#外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法" class="headerlink" title="外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法"></a>外部类set和get方法齐全并创建了对象和属性，引用方未设置set方法</h1><p><img src="img_17.png" alt="img_17.png"><br><img src="img_18.png" alt="img_18.png"></p><h2 id="在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来"><a href="#在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来" class="headerlink" title="在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来"></a>在创建属性时会调用set方法，引用类没set方法就无法让外部类赋值过来</h2><h1 id="创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错"><a href="#创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错" class="headerlink" title="创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错"></a>创建内部类的属性时，没设置get方法（类就无法调用内部类的属性），报错</h1><h2 id="这里面还有一个错误：调用内部类属性需要xxx-xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致"><a href="#这里面还有一个错误：调用内部类属性需要xxx-xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致" class="headerlink" title="这里面还有一个错误：调用内部类属性需要xxx.xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致"></a>这里面还有一个错误：调用内部类属性需要xxx.xx这种命名方式，外部类的名字必须和内部类的外部类属性名一致</h2><p><img src="img_19.png" alt="img_19.png"></p><h2 id="改正："><a href="#改正：" class="headerlink" title="改正："></a>改正：</h2><p><img src="img_20.png" alt="img_20.png"><br><img src="img_21.png" alt="img_21.png"></p><h1 id="xml配置错误"><a href="#xml配置错误" class="headerlink" title="xml配置错误"></a>xml配置错误</h1><p><img src="img_22.png" alt="img_22.png"><br><img src="img_23.png" alt="img_23.png">   </p><h2 id="更正"><a href="#更正" class="headerlink" title="更正"></a>更正</h2><p><img src="img_24.png" alt="img_24.png"></p><h1 id="按照名称注入报错"><a href="#按照名称注入报错" class="headerlink" title="按照名称注入报错"></a>按照名称注入报错</h1><h2 id="解决，默认bean名是类名且首字母小写"><a href="#解决，默认bean名是类名且首字母小写" class="headerlink" title="解决，默认bean名是类名且首字母小写"></a>解决，默认bean名是类名且首字母小写</h2><p><img src="img_25.png" alt="img_25.png"></p><h1 id="过时的数据库api"><a href="#过时的数据库api" class="headerlink" title="过时的数据库api"></a>过时的数据库api</h1><p><img src="img_26.png" alt="img_26.png"></p><h2 id="把com-mysql-jdbc-Driver改为com-mysql-cj-jdbc-Driver"><a href="#把com-mysql-jdbc-Driver改为com-mysql-cj-jdbc-Driver" class="headerlink" title="把com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver"></a>把com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver</h2><h1 id="数据库参数不匹配"><a href="#数据库参数不匹配" class="headerlink" title="数据库参数不匹配"></a>数据库参数不匹配</h1><p><img src="img_27.png" alt="img_27.png"></p><h2 id="args参数要和数据库完全匹配，不能多也不能少"><a href="#args参数要和数据库完全匹配，不能多也不能少" class="headerlink" title="args参数要和数据库完全匹配，不能多也不能少"></a>args参数要和数据库完全匹配，不能多也不能少</h2><p><img src="img_28.png" alt="img_28.png"></p><h1 id="未指定映射类"><a href="#未指定映射类" class="headerlink" title="未指定映射类"></a>未指定映射类</h1><h2 id="使用BeanPropertyRowMapper时，构造器未传递参数"><a href="#使用BeanPropertyRowMapper时，构造器未传递参数" class="headerlink" title="使用BeanPropertyRowMapper时，构造器未传递参数"></a>使用BeanPropertyRowMapper时，构造器未传递参数</h2><h2 id="解决：在构造器里传递要映射的类Book-class"><a href="#解决：在构造器里传递要映射的类Book-class" class="headerlink" title="解决：在构造器里传递要映射的类Book.class"></a>解决：在构造器里传递要映射的类Book.class</h2><p><img src="img_29.png" alt="img_29.png"><br><img src="img_30.png" alt="img_30.png"></p>]]></content>
      
      
      <categories>
          
          <category> ssm </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug记录 </tag>
            
            <tag> Java </tag>
            
            <tag> spring </tag>
            
            <tag> 框架 </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式理论</title>
      <link href="/2022/10/13/fen-bu-shi-li-lun/fen-bu-shi-li-lun/"/>
      <url>/2022/10/13/fen-bu-shi-li-lun/fen-bu-shi-li-lun/</url>
      
        <content type="html"><![CDATA[<h1 id="二-分布式理论"><a href="#二-分布式理论" class="headerlink" title="二,分布式理论"></a>二,分布式理论</h1><h2 id="2-1-数据一致性"><a href="#2-1-数据一致性" class="headerlink" title="2.1,数据一致性"></a>2.1,数据一致性</h2><h3 id="2-1-1-什么是数据一致性"><a href="#2-1-1-什么是数据一致性" class="headerlink" title="2.1.1,什么是数据一致性"></a>2.1.1,什么是数据一致性</h3><p>数据在多副本中保存,各副本数据都是一样的</p><h3 id="2-1-2-副本一致性"><a href="#2-1-2-副本一致性" class="headerlink" title="2.1.2,副本一致性"></a>2.1.2,副本一致性</h3><p>分布式系统中,数据往往有多个副本,则带来了<strong>数据同步</strong>的问题,因为延迟等因素,几乎无法保证同时更新所有副本数据,<br>在性能和一致性之间,需要权衡-&gt;分布式一致性协议</p><h3 id="2-1-3-一致性分类"><a href="#2-1-3-一致性分类" class="headerlink" title="2.1.3,一致性分类"></a>2.1.3,一致性分类</h3><p>强一致性-&gt;系统写什么,读出来就是什么,但是对系统性能影响大,也很难实现  </p><p>弱一致性-&gt;写入成功后,不一定立刻且不一定多久可以读到写入的值,但尽可能在某个时间级别后让数据达到一致性状态</p><p>最终一致性-&gt;<strong>也是弱一致性的一种</strong>,<strong>保证一段时间后,节点数据达到一致性状态</strong>,<br>在一致性状态前的时间片段称为[不一致窗口]</p><p>最终一致性又有多个变种-&gt;因果一致性||读己所写一致性||会话一致性||单调/写读一致性||</p><p><img src="img1.png" alt="一致性分类"></p><h2 id="2-2-CAP定理"><a href="#2-2-CAP定理" class="headerlink" title="2.2,CAP定理"></a>2.2,CAP定理</h2><h3 id="2-2-1-CAP定理介绍"><a href="#2-2-1-CAP定理介绍" class="headerlink" title="2.2.1,CAP定理介绍"></a>2.2.1,CAP定理介绍</h3><p>又称布鲁尔定理,它指出,对一个分布式系统,<strong>不可能同时满足以下三点</strong>:</p><p><img src="img3.png" alt="CAP定理"></p><h4 id="1-一致性"><a href="#1-一致性" class="headerlink" title="1.一致性"></a>1.一致性</h4><p>指的是强一致性,一旦客户端写入数据,则其他节点访问的任何一台服务器节点得到的都是最新的数据</p><h4 id="2-可用性"><a href="#2-可用性" class="headerlink" title="2.可用性"></a>2.可用性</h4><p>系统中的非故障节点收到每个请求都有响应,不允许服务器忽略请求</p><h4 id="3-分区容错性"><a href="#3-分区容错性" class="headerlink" title="3.分区容错性"></a>3.分区容错性</h4><p>允许网络丢失任意节点间的消息丢失(不同步)</p><h3 id="2-2-2-CAP如何选择"><a href="#2-2-2-CAP如何选择" class="headerlink" title="2.2.2,CAP如何选择"></a>2.2.2,CAP如何选择</h3><p><img src="img03.png" alt="img.png"></p><ul><li>CA系统,关注一致性和可用性,不能容忍网络问题或节点错误,出现这种错误,就会拒绝写请求,变成只读</li><li>CP系统,关注一致性和分区容错性,保证大多数节点数据一致,少数节点会在没有同步的时候处于不可用状态</li><li>AP系统,关注可用性和分区容错性,系统不能达成一致,需要给出数据冲突,给出数据冲突就需要维护数据版本</li></ul><p>互联网电商更多是AP,而银行必须保证C</p><h2 id="2-3-BASE理论"><a href="#2-3-BASE理论" class="headerlink" title="2.3,BASE理论"></a>2.3,BASE理论</h2><p>BASE-&gt;基本可用+软状态+最终一致性;是一致性和可用性的权衡,基于CAP定理演化  </p><p>核心思想: 无法做到强一致性,则根据不同应用的特点采用合适的方式达到最终一致性  </p><h3 id="2-3-1-基本可用"><a href="#2-3-1-基本可用" class="headerlink" title="2.3.1,基本可用"></a>2.3.1,基本可用</h3><p>出现不可预知的故障,但还是能用,相比一般系统,可能出现:</p><ul><li>响应时间的损失: 正常系统在0.5内返回结果,基本可用则在1秒内返回</li><li>功能上的损失: 正常购物可以顺利交易,但是活动流量大的时候,为了保证稳定,部分消费者可能被引导到降级页面  </li></ul><h3 id="2-3-2-软状态"><a href="#2-3-2-软状态" class="headerlink" title="2.3.2,软状态"></a>2.3.2,软状态</h3><p>硬状态要求多个节点数据副本一致,软状态则允许系统中的数据存在中间状态,允许不同节点的副本数据存在数据延时</p><h3 id="2-3-3-最终一致性"><a href="#2-3-3-最终一致性" class="headerlink" title="2.3.3,最终一致性"></a>2.3.3,最终一致性</h3><p>软状态在一定时间内达到副本数据一致</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构与理论</title>
      <link href="/2022/10/13/fen-bu-shi-yi-zhi-xing-xie-yi/fen-bu-shi-yi-zhi-xing-xie-yi/"/>
      <url>/2022/10/13/fen-bu-shi-yi-zhi-xing-xie-yi/fen-bu-shi-yi-zhi-xing-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1-二阶段提交协议-2PC"><a href="#3-1-二阶段提交协议-2PC" class="headerlink" title="3.1,二阶段提交协议(2PC)"></a>3.1,二阶段提交协议(2PC)</h1><h2 id="3-1-1-二阶段提交协议"><a href="#3-1-1-二阶段提交协议" class="headerlink" title="3.1.1,二阶段提交协议"></a>3.1.1,二阶段提交协议</h2><p>简称2PC,是比较常见的解决分布式事务问题的方式: 要么所有参与进程都提交事务,要么都取消事务,即实现ACID的A原子性</p><blockquote><p>分布式事务: 事务提供一种操作本地数据库的不可分割的一系列操作,”要么什么都不做,要么做全套(All or Nothing)”的机制,<br>而分布式事务就是为了操作不同数据库的不可分割的一系列操作的机制</p></blockquote><p><img src="img4.png" alt="img.png"> </p><h2 id="3-1-2-执行流程"><a href="#3-1-2-执行流程" class="headerlink" title="3.1.2,执行流程"></a>3.1.2,执行流程</h2><h3 id="1-成功执行的事务提交流程"><a href="#1-成功执行的事务提交流程" class="headerlink" title="1,成功执行的事务提交流程"></a>1,成功执行的事务提交流程</h3><p><img src="img.png" alt="img.png"><br>阶段一: </p><ul><li>事务询问</li><li>执行事务</li><li>各参与者向协调者反馈事务询问的响应 </li></ul><p>阶段二: </p><ul><li>发送提交请求</li><li>事务提交</li><li>反馈事务提交结果</li><li>完成事务</li></ul><h3 id="2-中断事务流程"><a href="#2-中断事务流程" class="headerlink" title="2,中断事务流程"></a>2,中断事务流程</h3><p>假如任何一个参与者挂了(超时等),协调者无法接收到反馈,会中断事务  </p><p>阶段一: </p><ul><li>事务询问</li><li>执行事务</li><li>各参与者向协调者反馈事务询问的响应 </li></ul><p>阶段二: </p><ul><li>发送回滚请求</li><li>事务回滚</li><li>反馈事务回滚结果 </li><li>中断事务</li></ul><h2 id="3-1-3-2PC的优缺点"><a href="#3-1-3-2PC的优缺点" class="headerlink" title="3.1.3 2PC的优缺点"></a>3.1.3 2PC的优缺点</h2><h3 id="1-优点"><a href="#1-优点" class="headerlink" title="1,优点"></a>1,优点</h3><p>原理简单</p><h3 id="2-缺点"><a href="#2-缺点" class="headerlink" title="2,缺点"></a>2,缺点</h3><ul><li>同步阻塞<br>在二阶段提交的执行过程中,事务处于阻塞状态,如果参与者占用公共资源,则其他节点访问会被阻塞</li><li>单点问题<br>协调者出现问题,提交流程出现问题,所有参与者一直处于事务锁定状态</li><li>数据不一致<br>协调者发送commit请求,如果一部分参与者网络故障或宕机,则会出现无法接收commit请求来完成事务操作,出现数据不一致问题</li><li>没有完善的容错机制<br>任何一个节点的失败都会导致整个事务的失败</li></ul><h1 id="3-2-三阶段提交协议-3PC"><a href="#3-2-三阶段提交协议-3PC" class="headerlink" title="3.2,三阶段提交协议(3PC)"></a>3.2,三阶段提交协议(3PC)</h1><h1 id="3-3-NWR协议"><a href="#3-3-NWR协议" class="headerlink" title="3.3,NWR协议"></a>3.3,NWR协议</h1><h1 id="3-4-Gossip协议"><a href="#3-4-Gossip协议" class="headerlink" title="3.4,Gossip协议"></a>3.4,Gossip协议</h1><h1 id="3-5-Paxos协议"><a href="#3-5-Paxos协议" class="headerlink" title="3.5,Paxos协议"></a>3.5,Paxos协议</h1><h1 id="3-6-Raft协议"><a href="#3-6-Raft协议" class="headerlink" title="3.6,Raft协议"></a>3.6,Raft协议</h1><h1 id="3-7-Lease机制"><a href="#3-7-Lease机制" class="headerlink" title="3.7,Lease机制"></a>3.7,Lease机制</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式架构与理论</title>
      <link href="/2022/10/05/fen-bu-shi-jia-gou-she-ji/fen-bu-shi-jia-gou-she-ji/"/>
      <url>/2022/10/05/fen-bu-shi-jia-gou-she-ji/fen-bu-shi-jia-gou-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一-分布式架构与理论"><a href="#一-分布式架构与理论" class="headerlink" title="一,分布式架构与理论"></a>一,分布式架构与理论</h1><h2 id="一-分布式架构与理论-1"><a href="#一-分布式架构与理论-1" class="headerlink" title="一,分布式架构与理论"></a>一,分布式架构与理论</h2><h3 id="1-1-什么是分布式系统"><a href="#1-1-什么是分布式系统" class="headerlink" title="1.1,什么是分布式系统"></a>1.1,什么是分布式系统</h3><p>分布式系统是硬软件分布在不同网络计算机上,彼此通过消息传递进行通信协调的系统  </p><p>把一个大的业务拆成多个可以独立部署和实现功能的子模块,分布在不同服务器节点,共同构成的系统  </p><p><img src="img0.png" alt="分布式系统">  </p><h3 id="1-2-分布式和集群的区别"><a href="#1-2-分布式和集群的区别" class="headerlink" title="1.2,分布式和集群的区别"></a>1.2,分布式和集群的区别</h3><p>集群-&gt;多个服务做同一件事  </p><p>分布式-&gt;多个服务做不同的事  </p><h3 id="1-3-分布式系统特性"><a href="#1-3-分布式系统特性" class="headerlink" title="1.3,分布式系统特性"></a>1.3,分布式系统特性</h3><p>分布性-&gt;可以分布在不同空间(物理)   </p><p>对等性-&gt;计算机服务节点没有主从之分  </p><p>并发性-&gt;分布式系统的多个节点,可能并发地操作资源(数据库等)  </p><p>缺乏全局时钟-&gt;由于处于不同机器,而且是远程通信,事件执行的先后顺序难以确认  </p><p>故障容易发生-&gt;机器越多,越有可能发生局部的故障  </p><p>单点故障-&gt;如果某个功能/角色只有一台计算机支撑,则它出现的故障就是单点故障</p><h3 id="1-4-分布式系统面临的问题"><a href="#1-4-分布式系统面临的问题" class="headerlink" title="1.4,分布式系统面临的问题"></a>1.4,分布式系统面临的问题</h3><h4 id="1-通信异常"><a href="#1-通信异常" class="headerlink" title="1,通信异常"></a>1,通信异常</h4><p>网络本身可能异常,则会出现<strong>分布式系统无法完成一次网络通信</strong>的情况,<br>而且,远程通信也有延迟,综上,分布式系统很容易出现<strong>消息丢失和延迟</strong></p><h4 id="2-网络分区"><a href="#2-网络分区" class="headerlink" title="2,网络分区"></a>2,网络分区</h4><p>部分网络不连通,但是子网络内部的网络通信正常,导致网络环境分成了不同的区域,出现<strong>局部小集群</strong>,<br>此时需要这些小集群完成服务,对分布式一致性提出巨大挑战</p><h4 id="3-节点故障"><a href="#3-节点故障" class="headerlink" title="3,节点故障"></a>3,节点故障</h4><p>组成微服务的服务器节点宕机或僵死</p><h4 id="4-三态-重发"><a href="#4-三态-重发" class="headerlink" title="4,三态,重发"></a>4,三态,重发</h4><p>三态-&gt;分布式系统每次请求响应都有<strong>成功/失败/超时</strong>三种状态  </p><p>重发-&gt;超时/失败的情况就需要重新发起调用</p><h4 id="5-幂等"><a href="#5-幂等" class="headerlink" title="5,幂等"></a>5,幂等</h4><p>多次请求某个资源,对资源本身都是产生和一次调用相同的结果 </p><h1 id="四-分布式系统设计策略"><a href="#四-分布式系统设计策略" class="headerlink" title="四,分布式系统设计策略"></a>四,分布式系统设计策略</h1><h1 id="五-分布式架构服务调用"><a href="#五-分布式架构服务调用" class="headerlink" title="五,分布式架构服务调用"></a>五,分布式架构服务调用</h1><h1 id="六-分布式服务治理"><a href="#六-分布式服务治理" class="headerlink" title="六,分布式服务治理"></a>六,分布式服务治理</h1><h1 id="七-架构设计基本原则"><a href="#七-架构设计基本原则" class="headerlink" title="七,架构设计基本原则"></a>七,架构设计基本原则</h1>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一代微服务</title>
      <link href="/2022/10/05/di-yi-dai-wei-fu-wu/di-yi-dai-wei-fu-wu/"/>
      <url>/2022/10/05/di-yi-dai-wei-fu-wu/di-yi-dai-wei-fu-wu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2022/10/04/ce-shi-wen-zhang/ce-shi-wen-zhang/"/>
      <url>/2022/10/04/ce-shi-wen-zhang/ce-shi-wen-zhang/</url>
      
        <content type="html"><![CDATA[<p>测试文章</p><img src="/2022/10/04/ce-shi-wen-zhang/ce-shi-wen-zhang/test.jpg" class="" title="图片引用方法一"><p><img src="test.jpg" alt="图片引用方法二"></p><p><img src="/images/test.jpg" alt="图片引用方法三"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
